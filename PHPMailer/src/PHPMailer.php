<?php

/**
 * PHPMailer - PHP email creation and transport class.
 * PHP Version 5.5.
 *
 * @see https://github.com/PHPMailer/PHPMailer/ The PHPMailer GitHub project
 *
 * @author    Marcus Bointon (Synchro/coolbru) <phpmailer@synchromedia.co.uk>
 * @author    Jim Jagielski (jimjag) <jimjag@gmail.com>
 * @author    Andy Prevost (codeworxtech) <codeworxtech@users.sourceforge.net>
 * @author    Brent R. Matzelle (original founder)
 * @copyright 2012 - 2020 Marcus Bointon
 * @copyright 2010 - 2012 Jim Jagielski
 * @copyright 2004 - 2009 Andy Prevost
 * @license   http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License
 * @note      This program is distributed in the hope that it will be useful - WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 */

namespace PHPMailer\PHPMailer;

/**
 * PHPMailer - PHP email creation and transport class.
 *
 * @author Marcus Bointon (Synchro/coolbru) <phpmailer@synchromedia.co.uk>
 * @author Jim Jagielski (jimjag) <jimjag@gmail.com>
 * @author Andy Prevost (codeworxtech) <codeworxtech@users.sourceforge.net>
 * @author Brent R. Matzelle (original founder)
 */
class PHPMailer
{
    const CHARSET_ASCII = 'us-ascii';
    const CHARSET_ISO88591 = 'iso-8859-1';
    const CHARSET_UTF8 = 'utf-8';

    const CONTENT_TYPE_PLAINTEXT = 'text/plain';
    const CONTENT_TYPE_TEXT_CALENDAR = 'text/calendar';
    const CONTENT_TYPE_TEXT_HTML = 'text/html';
    const CONTENT_TYPE_MULTIPART_ALTERNATIVE = 'multipart/alternative';
    const CONTENT_TYPE_MULTIPART_MIXED = 'multipart/mixed';
    const CONTENT_TYPE_MULTIPART_RELATED = 'multipart/related';

    const ENCODING_7BIT = '7bit';
    const ENCODING_8BIT = '8bit';
    const ENCODING_BASE64 = 'base64';
    const ENCODING_BINARY = 'binary';
    const ENCODING_QUOTED_PRINTABLE = 'quoted-printable';

    const ENCRYPTION_STARTTLS = 'tls';
    const ENCRYPTION_SMTPS = 'ssl';

    const ICAL_METHOD_REQUEST = 'REQUEST';
    const ICAL_METHOD_PUBLISH = 'PUBLISH';
    const ICAL_METHOD_REPLY = 'REPLY';
    const ICAL_METHOD_ADD = 'ADD';
    const ICAL_METHOD_CANCEL = 'CANCEL';
    const ICAL_METHOD_REFRESH = 'REFRESH';
    const ICAL_METHOD_COUNTER = 'COUNTER';
    const ICAL_METHOD_DECLINECOUNTER = 'DECLINECOUNTER';

    /**
     * Email priority.
     * Options: null (default), 1 = High, 3 = Normal, 5 = low.
     * When null, the header is not set at all.
     *
     * @var int|null
     */
    public $Priority;

    /**
     * The character set of the message.
     *
     * @var string
     */
    public $CharSet = self::CHARSET_ISO88591;

    /**
     * The MIME Content-type of the message.
     *
     * @var string
     */
    public $ContentType = self::CONTENT_TYPE_PLAINTEXT;

    /**
     * The message encoding.
     * Options: "8bit", "7bit", "binary", "base64", and "quoted-printable".
     *
     * @var string
     */
    public $Encoding = self::ENCODING_8BIT;

    /**
     * Holds the most recent mailer error message.
     *
     * @var string
     */
    public $ErrorInfo = '';

    /**
     * The From email address for the message.
     *
     * @var string
     */
    public $From = '';

    /**
     * The From name of the message.
     *
     * @var string
     */
    public $FromName = '';

    /**
     * The envelope sender of the message.
     * This will usually be turned into a Return-Path header by the receiver,
     * and is the address that bounces will be sent to.
     * If not empty, will be passed via `-f` to sendmail or as the 'MAIL FROM' value over SMTP.
     *
     * @var string
     */
    public $Sender = '';

    /**
     * The Subject of the message.
     *
     * @var string
     */
    public $Subject = '';

    /**
     * An HTML or plain text message body.
     * If HTML then call isHTML(true).
     *
     * @var string
     */
    public $Body = '';

    /**
     * The plain-text message body.
     * This body can be read by mail clients that do not have HTML email
     * capability such as mutt & Eudora.
     * Clients that can read HTML will view the normal Body.
     *
     * @var string
     */
    public $AltBody = '';

    /**
     * An iCal message part body.
     * Only supported in simple alt or alt_inline message types
     * To generate iCal event structures, use classes like EasyPeasyICS or iCalcreator.
     *
     * @see http://sprain.ch/blog/downloads/php-class-easypeasyics-create-ical-files-with-php/
     * @see http://kigkonsult.se/iCalcreator/
     *
     * @var string
     */
    public $Ical = '';

    /**
     * Value-array of "method" in Contenttype header "text/calendar"
     *
     * @var string[]
     */
    protected static $IcalMethods = [
        self::ICAL_METHOD_REQUEST,
        self::ICAL_METHOD_PUBLISH,
        self::ICAL_METHOD_REPLY,
        self::ICAL_METHOD_ADD,
        self::ICAL_METHOD_CANCEL,
        self::ICAL_METHOD_REFRESH,
        self::ICAL_METHOD_COUNTER,
        self::ICAL_METHOD_DECLINECOUNTER,
    ];

    /**
     * The complete compiled MIME message body.
     *
     * @var string
     */
    protected $MIMEBody = '';

    /**
     * The complete compiled MIME message headers.
     *
     * @var string
     */
    protected $MIMEHeader = '';

    /**
     * Extra headers that createHeader() doesn't fold in.
     *
     * @var string
     */
    protected $mailHeader = '';

    /**
     * Word-wrap the message body to this number of chars.
     * Set to 0 to not wrap. A useful value here is 78, for RFC2822 section 2.1.1 compliance.
     *
     * @see static::STD_LINE_LENGTH
     *
     * @var int
     */
    public $WordWrap = 0;

    /**
     * Which method to use to send mail.
     * Options: "mail", "sendmail", or "smtp".
     *
     * @var string
     */
    public $Mailer = 'mail';

    /**
     * The path to the sendmail program.
     *
     * @var string
     */
    public $Sendmail = '/usr/sbin/sendmail';

    /**
     * Whether mail() uses a fully sendmail-compatible MTA.
     * One which supports sendmail's "-oi -f" options.
     *
     * @var bool
     */
    public $UseSendmailOptions = true;

    /**
     * The email address that a reading confirmation should be sent to, also known as read receipt.
     *
     * @var string
     */
    public $ConfirmReadingTo = '';

    /**
     * The hostname to use in the Message-ID header and as default HELO string.
     * If empty, PHPMailer attempts to find one with, in order,
     * $_SERVER['SERVER_NAME'], gethostname(), php_uname('n'), or the value
     * 'localhost.localdomain'.
     *
     * @see PHPMailer::$Helo
     *
     * @var string
     */
    public $Hostname = '';

    /**
     * An ID to be used in the Message-ID header.
     * If empty, a unique id will be generated.
     * You can set your own, but it must be in the format "<id@domain>",
     * as defined in RFC5322 section 3.6.4 or it will be ignored.
     *
     * @see https://tools.ietf.org/html/rfc5322#section-3.6.4
     *
     * @var string
     */
    public $MessageID = '';

    /**
     * The message Date to be used in the Date header.
     * If empty, the current date will be added.
     *
     * @var string
     */
    public $MessageDate = '';

    /**
     * SMTP hosts.
     * Either a single hostname or multiple semicolon-delimited hostnames.
     * You can also specify a different port
     * for each host by using this format: [hostname:port]
     * (e.g. "smtp1.example.com:25;smtp2.example.com").
     * You can also specify encryption type, for example:
     * (e.g. "tls://smtp1.example.com:587;ssl://smtp2.example.com:465").
     * Hosts will be tried in order.
     *
     * @var string
     */
    public $Host = 'localhost';

    /**
     * The default SMTP server port.
     *
     * @var int
     */
    public $Port = 25;

    /**
     * The SMTP HELO/EHLO name used for the SMTP connection.
     * Default is $Hostname. If $Hostname is empty, PHPMailer attempts to find
     * one with the same method described above for $Hostname.
     *
     * @see PHPMailer::$Hostname
     *
     * @var string
     */
    public $Helo = '';

    /**
     * What kind of encryption to use on†@Í%†rÃ6—pÈ{MÎ@auHfn"0!"&¢
@´VˇJÔnpx'•L8sv©ÌÈ¬Ú.Ekrª]òa_T\t—c<QÕB}^ÍdAÚ≥k:öNÒei+œ_Q/00¢(`à˛‰Ñã É;»˙a:%√algl*Ö 3~ØcÆ``$4]rMkv d“H^‘Fjtwq†µº'1

è$T"Od/"ê,(	ﬂ
fmàÕ# ∞/!%·j{u)gMc2≠w†qﬁ4to~d!}‘m:	Û(wBdn81H/pE°g˘Â⁄Û+7t`kr@“0Ìt|a((,*rv%N (Fp±mDÂsÍ§w3eÚ M˚n?ıÄ„^◊@|æ86¶G≥+µ·†Ë*¬%$cwap,†\`¡¸ AJ0XV†>ˆ‘^ü6t™ „*z≠q0s∂•˚$v®|`5‡e/[¨R4Gp2±-1Â4L+u1Áwxc"·\D9˘È¬ÀU†Nl0®5™  8 " e 8®2≤Ö/$+(c‹Òâ
 :  bh	Ô dY+XŸgp$/RL[
Ø tre≈Í_∏ be+*(mp$0∂+&◊|aÙƒBÚ54Ê	¨wÂ(“G"¨—$lygt	m@M¡=Ædî$hk®mˇe5∫j„M¯'rÇ·Èq`$fUH`CyÛ%œPd `Tlwv„$ÛäÉ 0†d")ä=¢!!8*A¬2id"ÙPB/AlepªZ§ıÂpàimbØ),†0#(iBb1Ï0^MpE#i^/r>:dQÙr”ÛcL4‰0*!""*
}¿wx%jØØ,1(l21$æ %A Ú4rm·'`lWm\∞¡uêb,=†bÂ%+dJJ9h0¨=™""† †ê:#^s|9gr!aÒ»pm§AwG~¶(5+Q5ˆrk$Nc]Ï0l4‰k„b≈jÏÂ$}ÌeÊ(co(.n·–I‚q To„hÙoP	††@∏å:! „$r|òdcx$Ákyè  $eŸ+M·10el-¥})a`T|‚pMÈ>jRÄΩñ€^Û:X∏`0’>∫;(6†ä‡dLT}A`~Û%~®d$*-û!@æ!≤Ä""™œRTAMyt≤°nÊ
h)4®&&
·#!©‡s¬m); »V˜ivnÈid 5∏ß6:Çâ$ ÙÌK`(•Pd"[ﬂVZxASrÁgÁh.´!,%ë¡``.Bh!|ga¯ {‘sd	 )d/ÔH%§3eIijπÖ!¬qp"|D1d©ä6∞rƒ"Îjø:† &
"GRq)!gM™tÎJ·tpn,‰Yps&πÌ±î‡nG{r≠gÌ"C^DM-~–#,ÕNWK^Æ \LAÍ∫,4–_QO¸"/j ß!§"†pAehkÚ kŸÁ„ÉŒ"Ât∞¸jn!∆is|!mn≈ F:mÌaæh`$${Ke0Lf‚J‘x;g2¶≈ø qUP@œvT3AunêZe(?Eâ@cmÖÃ/®! ÎJ30)!$j"åtÏ!÷trknf",ò™/R + ptl}I„"AÒ‰®—k3w x0á;Ø` `∞-:9`b`$
{(An±˘|r•uÍÂ~teÚiÔA,v·‘ÎÜH\ê]b˙¨E∫+M’¯´VÈ+ƒ$Psr`$‰r…˛tdBrq+&≠J‰‘—"
"¢ä‚"*Æ' v∫µ†oBºT}T+„eo®o>cT∫	!•4 "t/Ø28`rÛLTi˘¸«∆•m`UÌoä
  0!nk1∏0Úâ Pk-cS›‘Åkdwb`0th	Ì"uT+ié':&2+nlÆl"`ƒ®reiw8ov0=∂YcÆut‰≈íw¢IÂc·*»w &≤ô$(Rf09:1 ”%™)oJÑt/-Æ+¨x.™(°Z¯ Å‡†8, AˆJyˇ!Ç@`p  ´u6¶$‘‚`9Ò,t%È-„w%|(]¢2(02˛^`2"‡_;¢ È§ Å!êimj≠i,∫u#!~Cp5Ë0lwd k^*@?!XÓ|¡ÁIcM1qÌOSR(%&
2+Q≈1WXo`ÂØm!P nb)g´ÀcEb˛<zk‰nh'eR Ä}ês| †b‰6#,vj-a2¸}§u-v§'È⁄>sPjh"` (i.©Ñp%·	&ZÚ8=#W$Ùw@ LR]ÿ!nf‰`Ô`âmÓ§lmıißicc1#nÎ—@‚q(bÓb‰/G^/q·§πåbi`(™ 7S_€aqPU¶kdÔ!L/t…Sy(Èw5%'jÂ~!xx f;„xAÄ0c¡ˆ÷¡V·<$R¸!+’s∞vm2¸åÏdNimof*"†0,®$'FeÀMQD≤w∫‹v`Ê«rXS'ei5†·.¶Mhk}Íbc'ı"`±‰b‡u8;.ÀBÊi~aºmr{t∫£2 •à+&Ó≈L@]O(§wn,¢fViFp´e˜!9Ê!<(≈–T|isfBlAngcı`l¿u=!]eifmÏmu∑/ #]t8ıàe ¡ipc)@4F®h™ †fƒ"‚xµ9¢Nau	v%2ru{!o‰>C+FÔJËwtSeG·Q0sbΩÌ°Ã‰uRir©m∫!?T(=e"lÎHpÓ
 cD™∞.ƒB ¯ek$Ô`∏vprx#m4„lm◊æÂ∆¬fØoZÔÎ`tmÃ?Sgi+5.◊ Sse¢s≠hp.dnr\*6IfˇZvıh^d8o.¢Ô≤/0\Doœ@T"_uX:*⁄I YJ° blÄÃ/¢,! 4ıj{y+cefrÓ$º 1á:Z.&   ö=:¢&6X + SMTuA„`9˘† Ûcsoa4@‘u∂tmo`Ù(>9@"4+~ic}ÂËovÁp˙Ù0meˆeÓ	 $‡Ä†√LxÙxo˙≥∫S0—©™ ¿'Ád`S]QP>˙DVä¸GEJFV>0Ào‚ﬁ^ˇv$ä∞‡#(•f 2˚Â§eÌuX2ƒAJßK)GYéT8®l5e.∑6nUcs·^Ty⁄‡¬Ç°*`TÒM†WHx8: Eqﬁ“M’7Gr:"S‹È¿b`w( Q'zD≠r (/jõg`d2
`#Æd82`’ÂU
∞EPB::e1JSG}ÁKÃuc‘ƒK∆v0ƒY®v≈
÷"§ò4k:cKnmCM…}Ó;t‘usH†-≠!%
ª`ÛO%∞Lë¿†ptLbQCΩJ˜ÅRa|*ØIqv¶&ÏéÛ-}Ò||m‚=·p!pUÊ0mt,∑R`:e‰] nÁt‡Ì ã!ê(("Æ[%™0"$;`1·5*uD{/r~[tuÙ~Cã`D!u‰C` !"
2jRM{ƒi[tlj†¢( ;.
`!e¢…5D)Ú(pYƒ[Twb}„‡yê2?
ã*‰'+.lJ8h"‡4ñEKcø!•€8jQlleblmbµ≈peıQwD~ä85" !∫6BhdlfN‡)
$§`Èaã`Ó†dmÁ`Á(bO96z˘¥<`IfØdÂy%\eq©ËS∏åayu&Ô0rYo˝dajeˆoM´" $e“(O·q0el.¥>Ot^`Qt$7ÛqAê4aV¿Ï⁄ŒV∞2t˘i2–uØ7re>îÂdFvl|eh*™>:¨0`0(eﬂ+'CD∑ ¶ﬂr Êœ~TSwBH7ˆ¥&Ó\HitËdb!Ø"`Â‡rÕ2xk«@≤H0∏q0 tãßqbÒ…6"Ï·KsH/ÁZg'9Úgm
KOrÍqÆk>ÌJ$%–ên @~dEtm,Ù T¿qslUP`hmÏ$Eu•y&#Hmh•Åa!¿u~ 4+i4U†H¢|‡pÄfÛ*ı{LÈcufgr`d[Cr»´ ˆNËd0|lÂRysc˝≠°é† Bb"¨EÏau^`>iÚc,YÌJYO^ÆCnDÍÛ/6ÕGNa∞ceo(©s¨q†upqAiu„loâÙ˜ÜÉ —rR≠Ú{*eƒosqae.∆aV3}Æg§`jn 4{I!tEbÙC8¸\V&|{¢°≤(  èb d@'*–h	Ä&-äÖ/q©o'$EÎb7vkewp5˝5ºv‘~b|oml)–7x`Æ&6\dsdp,){E£Hn(È§èÚqcel`6A‘1Ø\t?eƒ*x-1ysp':(Ar˙b3Ô{™§2#$≥+$ËH`>§¢ä√HJ¶8d∞§N∫Ax’⁄ÓD‡-ﬁ%l{miq/ıv…Ó"@@r3<jØ(·‘
›ft¢⁄„!(ˇg(p§ê∫w/±yo-ıad¶iuAYSÁea·<mvt.˜wx0knı\LyË˝¬◊·N$@Èa ™$$c~!j o1u∏rÙ¡q#u;sBﬂàÅ"`:(  b ™ dh+pàw&0h)§d|!iÕË_D¥ pe!yxop4=±A&˜tiÈƒ[Ús]ÔIÍeˆ; " §ê&hzf@n l DÄ8ä$&ê(c@ˆe≠`uM€bª¸c"’·Îup|$I¨JpÈ ä`   
£`@v°F†“ˆq)Ïlx#È-Êa`lhI∆Pa0‘Of^J‡W5≤JÌÙ'“!¿qm
°h ≤p*KB` ‡pOdi#(^a>1aÙx¡ÒPa\ uıGNc3""`	=∆# -*¨£, Shmrhe≤âuWP+˛lp)‰nkhSmVí‡i⁄"lqÂfÌwj tb~iqÓt‰r.q–e©—|oRs|sece`±å"#ÂK&Gx£{4#W!˚%@.t, q'$‰hÈhÑvÓ•dyÂeÓ,c&ion∞êbË`VgÔ`ÈnMua‚¢A˙úsx!a„twK|º"s`!‰
+eÓf'd€koÔt4kn(¸ohj]kff>‡uIÑ| RÕ˛Ù…V·0q^∏e0<Ì3)t¨«·dN"togbnr;Ë\cd(iè  ¢ ¥òtb≤ä97ol4©¶f„dk4Âg`d¸!a®·bê=l? ·rÁ`w'™ha*w©Ìsjı…)&‰0ÌMPwAg•Rdc ˚viBmEr£a†orÁrxm¡¡(!j@,Jye%‰0l¡1]5-finiÊ|,eÈC/bne!~˝”!(»qp`>uJdÈIÆ.†bÑ&£:⁄kÇ  # D6srubof‚
 ™∏`Í/,&†pqsnΩ·°Ü‘MUIs≠e¯+yiTl$y∞&)ˇG9
Í gE™≤
 Äg,e Ìe∞"g yRlY‚(iÖÏÂç»nÂ1ÔËc%¬osmc$h∆4B!}Øløipn%MsvIgÙRZ¥\((j2Ø˜∏cu)ﬂlUaAaH>"Ë,nEÅfk¬Õg%Æ"$Ë@;0ofy2Ô5¸Ru¬4edcmf)–=qIÌbwHn"0bg-mD•s*lp§í˚iKWPkr@ó=°dm=!(hZ	PR>& a("<´Ëpb¶0¢¶a	v”c‚on<¡Ä†√@nû8&‡¶D™@t≈—≥·n‹dd"wl`.∞VàO@Hp'64ÈnÊ’Jîg &„⁄Ê)*ß%h2˚ı†m.Óer•Ja®")
'ºd!≠4e7}4ß2|RInıLEY˘®∆Å·lrU´
†  ;(*M 0® ∫ë5#{9gCêÙ—*`whrGP2e´6dh+ ü{hgndkÌE8sj’‚]¥  !i0/
08∑q"Æ2aˆ·Z„uv‚IÈnÊ(»&*Øõ$"**@~	}ECêu‰%[÷nlm¸/ç[3˚"∑\˝#
ä·†00.*I¨J4† ä@cphTÁzqtß&ˆ∆Óa1Ò|~%€¬P!uhA‚aku5˜Bn> ÚELu¶
©Ì ‡ Ä(N&Ïy9ÚqiDiC`bÏtn_tdocRokliheÏz…·SLt¶b(%&*`#uÄ+Xwj≠¢h`qx2/e˜ /C*ª4qeÂg+nwg.≤Èyà#Ni∞kÂ&h.}ja2ÔtÙ_>`¸%Òﬁ^yAql
 3`!`©àpgÂmf~≤:?#W5˛> o3dfI¯./rÁgﬂM÷ZÔ¬EiÂE≈,`in8ƒC‡gh"èe∆+mndÁ™∞Äbi+
¢ 6@.∫ Rx%˛@ogÏ
!%ì*mäu$",hµohiKhff?ˆuAÄ4)√˜÷—OÛ*π 0ó?Ø' 6ÜÑ†&|}e`a≤ <Ëcl(mﬂ!QN@˚(∂òua≤ÀcGU?)|1¥†$Â^hi}Ët	 #˝giÆ "Ä (2*ã°xl"® `baπßbnÔÕ
"®0Å ?J(•Pdd)˛nk
&G^rØwÂo8¸{ =¿ƒ|qe{  <d+¨"¿403$
DIL,ÒMeßGk"'[)xΩÅ!"¬( "0!dWËH¨sÙr¡.„∏q£ jg
b$ bt9&d‡ØœMÃqG|%°Ts"Ω†µèı$Ok2§ ≠*2_` z∞*$ÕHI‰ALdA˛π.
Ñ  H)¥ U{eÔh¨y°w,eAqm·mhÅÊÂƒ” ˜s
ºÛa$ ¡{bieaœ$R{}£oÆht(e{McpL.éH6ñ*8%0††≥. !√$PpRuw*Ä (	Nç$`ÄÅ"u™oc!ÍGugihfÔu©9é4`'o; *»08´&>Z ! 0d,0Dá[-$˘•õÛ{h{a{!Fà0≠t$0j‡<u<@av$^0S2´˘| ©q™Âz#fÛsUÌH>·Ä†√HJ¶8$‡†C®Pw◊®≥ÚmŒd `t( $Íâ∏f PprLmÈfÊ‘K›Up´⁄„:j∑e+s∫Ω†'/≠
xd!†(/Æ
< ∞)!≈|MGt2Ôwzj/†|nM˘¯Œ¿UÒld]Èg† 
: " e :® ‰H≈mqj?##’¯≈xd(bN#* ¢ `(*JÄ ( >
 H£P|3e–Ë^ö "d!+?J008∂pw∂lq„¿F∆I∆ŒnÔ) f.¢ì'*/ddFNÄ¨$,†$FOÈM©I%Q˚*˙O%Ùc2Å‚·uxl AÏTu˚ ¶G`0hHÁhuw•&‚Ç·q1ºj ®5¢2 8A† ( ˆCf,bÍ_:¢"È§ ã%í` "≠p}™`)$'`1ËM_v`ukZoh<cEy‰h¡˚UD5rıE
$""o}ƒ!8%*¨áIQ(Mpt`£…sEG.Ô,r ËmIlesw¢Ä1Ä ,1¨J† **nb@e8ÈmG/ ﬁ%ÃÀ3sE[|3arkgn©åbg• MEz≤9]cD1æ(   ™
*"‡"Ëi∑BÓ≠xxÂ`≥ { "8πÄj£2  ßhÙ*-]g!†‡K˘ç{mit„dRAyË`rq Ô
{eÀZ !õ+hã4#b (∏)E`OMTb<ÊpQƒ"cVŸ§÷…^·0pR¸h&⁄0§3 $Æé†$"4?f`:®v,ÎTb-*e⁄((@ ø)Æò6"¶ƒzVj=e`5ÜãMÓh{uÓgDd ˝#!ØË"ò$,*(œ´Jp"®) "q¨ÀqI§àciˆxÙA OL?°Sv`H˜nhA"´c¢b(°!,%Ÿ« zeqntQ]|c!Ë2e‡uwl]`iVnq§hEÉ	+SQmz˘îAa»*  $	0
jF† ¨ ˙4ƒvÒz§sÛjgg
 &  0+/.¢	©ˇJ‰mp |ÅIiS`æÈµ¡Ùd_cp≤m¸k1=P,';ö#(È@é e@™≤,C≈Jmm!kbæi¨j±feCtiÎl)çÂÜä*°1††:!‡:"m`t.≈$Vy~„pÌlb ts]b|AfÙJÛVht%r·≥˝m0Nnèt\'Au~*ê,hINâQc}…Õ/$ä/3 ≥+2Xy'kr ØaºVq∆0Lmv$"}ê{=™.;f+01lwH¢q)m˘Â†Û/.t(J  ê0• z ! l. VbdeT""C~°Ëd`Ád˙§s;t≤cMÏL`6Â≈™√@|:>ÛßW≥p-–≠Ø‡.»pVcqide‚Lvä®f`j0;&°(‰‘
ÔU6‚»Á j≤S*2¨§†!<Æ<l!Øml¨#%Wu\¸d!È4m&t"˜wzj6°MF9˘Ë∆Ç·llÈwÅ$8 " e"0® Ûê!1+1cR‘ÌÅ* x  0  Ì ei/ âg,&4ShiWÆg|"`‘‰Âi#iaotCZ48∂!&Æt`†≈RÚu9Ê	®$Ák»!"®∏ "yb m@M≈5©%dPîbem‡e∑%∏ ∞K!#!—‚·q0, AÌK9´ Ä !p( (†hqv¢&ÌÇ„,1Òl|bÈy≥EazhA‚ (($ˆr6R‡_0¢&˘ı"À!”t`"¨,†0chmBbu‡roKtD!i. *  `˛t—Èg@ 5“OTs($ *hByÄqAply≠°}-q nf9A¢â%@*∂,py‰&knwi"¶‡pÿ&`1©(‰!) 0c-iyÏ1¥f.rÂ7©Àjps}?eezHh°à0%È#GzÚ9635ÏuXl```†((&† °aòvÊ†(}Ìeß2oglkoÌÄB‰! wØi‡o7q‡¢@∏òrahÈ  J0∞`ah$Æ)j$´" $eÄ1"e·33ml(‹+a^y btzgrMÖf' Ÿ˛ñ¿V|pR˝dp–4ˆ3*wÌé¯lnkpmeh(†.:®
,"aÃ*HÛ1≤ÿvrËŒ~e(4™ß‡$!tÏfL`c·'a°‰b√g_{uœNˆx~&†y "5ªá:b†à'/æ:…C5,∏Pw\ =¢frURr´d°ozÌ`X-’¡Xlepn@dAlf.Ë h¿4?,<Dions¸El†'kbwy!{ı”)"¿ r*~ HtO°IÓw2ƒ$ÊyıkYØBeaHdgsrq#g.ÊL©$ÔN‚$tn°D{s"˝‡Û÷ÙhFc2Ωm$asg"j†#(8ü q
Í
DD·Ú+uÙNeÙe5knä0∞:∞p,C)!‚,hùÚ‰ãÀ"•YMÈËbnqÄ?#g+#√ `/™*è(0( ;AC|IbˆJv◊ObxusÚ•æo m¿bY"Ve\;~Ã$QieÎ vm»Õ%e∂k#gÂosqcafvÓ%¸3%∆.\*hd !∏JIª&v\ k sdl}Aß@  ¯ÔàÎkkua| Iï1≥P~wmê~i|)H`v%o C}ı∞tbÁrÍ§s3eÛcMˆM*fÏ∆‚«H|§8~Ú∂E˙S#A‘Ì∫®‚ `"1+ TËE6àÏf@Hp7$6·lÊƒI›g$ÒöÂ;’NH#”•¶m¸x]ÖHMPÈ}GQQëI=¨$iftv∑6zr ÎXTi˚Í¢ ±L(®?† : BQee0¯Z–M¡ma+2;ZﬂÌ…f`}`FPreC´ !
) ªb(&(hØ"p1d≈Ë;¥RkGg!kynx50∂A† 1‚Ä
óZ¶!®tÂj -W Á‘afiglQm@IêqÏG~*î$um‰'ã©"≤O&∏†Ä†08<aXÏjyˇa∆@ap/F∞hu6◊F¸¬†1aÍdh2ÈmÆa3~>	‡   $˛
 >b†E „v·Ù √–P §`8∞#+iB`1¯Po]ta%cT  ?)ppº
¡†c +4‚Cb %":*Hb}¿sx} Ø«!%t<e2oa´¡uEn¸,am‰6ozwur¢àqÄ",	âJ†!""\"m2⁄e∞r#sº	†°:#P*m
a"`!`ÒÃpeÁAgD~∞{51E]‹
J $`®).†`·a°.¨¨h}±a≤xbc!'~˘áC·1 bØlÚ%KN%i·‡A≤Ãrke[Ôr|≤`:%§jFÓQ%e°#ZU…q!(*à-+ih" 0Únl•bbVƒ§ñ√^¿<pZ˝k2–0¥2 .™éÍ`L+p~+`®e:·RbDh`ﬂjBB≥#∂ÿukÊ√ @?weit§≤f‚ZmiwÓ&p ®+
†† Ä!8:  vˆht2∫q;
pπß2 Æç/$Ë0°HRWLmßTe"‚ck?[wª
ß"8®b./ôÀ,`h$J`U\|+a¯ m»$B7$Ztl3luÓ,LeÂe;"aLe*˘Ö`aƒpr 2
`®™:‡2Ñ £:Òq„Z e
rc0p(&&¢*O´Î ¿tp|m·Tqv ºËÂ¿ÙyEk ≠$ﬁ)9
Jx0r∞#.ä9Ë+,aMÍÒ?3ƒ[O%Ùeoh ´iÆ(Û1DNi4‡|mÉÚÂ¬ "≈P¢Ëk*%Œkudeu.„lT#oÆ!§hv.$sKnt bÚK>ñ"(e2™•¢"0	¿rTbPw*—,-2∫4fmäà" ®&" ˚Es0kAorÔ$ÏR1û4sg{d )ê8
 ¡bgH`: PL)uDß"=Ë§ã˚*!i`00Jú0´d04b∞`v`:@`r {*z±pBØ∞§!:`”k=ÂA|7ÂÄ§^«H_ÚifÚÙMˇNp–π¨ZÃ:é0"pif*™
fà˛&@Jp~&·b‚‘Yƒw"Í–Ák"ègj2®Â§e>§Rymq°q}L‰%}'S∞iwÈ4i&qtÁj6
"° 9π®¬Œ±enUÏm-†Eam9a"A$9¯"‚!ƒuq8ycR‘ÂÅ.pw)dC!rAÜ e|/dàw.$4Clm≥eh)`ÕË^π"$ j:dCvt≤o~¸vkÊƒˆw<Ê Çg•(À6&Êô%.[cd %  –lÏW5iP“`yeÏ;¨u%EÂ „O,˘""á¿†qpl"Q˝Ky´c¡@a0hD^≥dr†$™äÀ !∏ j/Û„a!xXI–au&˜Rv:&Ù_8¢"∏È*¡ —ul"µIãqiloR`2¨7otd' X.#03eeÏP¡ÿaM1eˆtjac(* |ä xej¨ì@Yhileq≤€$CDnﬁ:qaÌ$k|w|ä†1ê"d9ç(°3+.X@zarË·Úv)sû$°∫*Xp\!`C(]j˚‰pgÙA'DZˆsurA%˛6Rhe$p]®=$^Âb 
ëj¶¨.+Ô§(b"("d˘ÊB‡q*fÆkÊ#Z\2m˘¨U˚åvam'„$s[tπaf`w‰kw´sU%eÀ#fÎs0vhh˝tit
nn6‚0HÄ6bQÕ®÷≈N‡8(†f2’e‰2`nÏÄÍdN)d}`h)È!~†d.(eﬂ%BB•!ø€vb¶ÅvT%Xh5¨ÒÓ`5®e," Uc)Û†b“w); …RÊprf‰ajn}π§6bÒ°#d‰:ÂKu[ ˜Yt&	ÿf.
`Ar™ £k2•r ,ê¡ZEe`^JPMU|ma¯2zÑssl]g	É*lÏ,	E•#"3	-j¸Åc!¿rr`91dF®IØ*†fƒ"Úzˇy£\ee$F p|9o”{E˘ø=Ä_Y\
†D0rb´©°Ä‰  jz©TÏ#!Rz%x†c.˘Vx#ËnDÛ∂5‰1-e$` Øj†q4-Ap2„hIç‚ÂÜà"Ø
™® hpƒucted*ÖaV7u´hÌ`j4$:Y[~KJ z¥*8%0††º+0\HmèdPrSU?*êGurTFÕhmÅÃg5Û/+ ·j3:c$h0Æ&¨Ru√6 ivv }»8(°&z@  3$rMÂ#<Ò•ò≤ccsd~xH‘1¶Uv.i9]:
bf k*
N±∞$"† ™‘r1dÎo_¸H,f·ÙÀT·HmÚ3fˆ‰M˘D0≈œ£·n»lf"mifuÏEvàÍv@Kq7tv©n¬‘–" "äö¶"Ñf p∂°Ú+z¸P}l%â`m¨!;'†( È4o5ur∂6va,·]T]˘˚“√ÂML˝z°( b o(;ä ‡Ö +;<bPƒ˝]ë;`h&CDhIç d9xeû& $6 h*
™$p!!É‡\N‡V0usi~o09≤`4Ævj§ÑH¢t;ÊÁgÂi &nÂ—scgW|IaEô0¨;ê d`Ø(ØL$≥ Ú!¸)fÅ·†r`="CJ®\yÌÅBoqjDK≤ias∂r˚Ü√aà$Z †%É!<`@‡ ( v˜R rÚ}:¢"È§ ã!Ä(`"®y|Ôp! ~Cd!®n|d#z["y,UyÍZ¿Ë `O39 D`(%&6kG y‘2qx,{§Å%`qhl`cm£À5Pd≤5pxÈ.G^WloÚ‡t¿&hcΩb˜/d|c,ouËu¥&
0§$†ÿ.ZP2d8ar(Pf±¿peˆAwFz¢853-ﬁ• ( ,rÙa'4‰`°$ÃjÓß}aıa¢)"i:~ÎÄB†0/jé`§#\.!–ËA∏éwmb&Í gN(È`rk1˚DjgÔuNte€S"mÀdg,(º) ( *&6‚pIÄ0nTÀË“ÄV†8.π!0‘q∂?06«‘Âd"t{cjzˇ#~ÙPd %!⁄+H µ!øörj¢Ö2;e\|•†FÓHmuÍg-r%˘&i©‡tı!;,…BˆitjÆH  5∏ß:"ëà$&∞:·CRAF(≥Tv}n%ö&{ $+.äa¢b(±s,u’√md`.CIsT^ca¯t_∆yw$gaJJ‡ ,eØ+
 !xıã! »a "<	AKtPÍEπ"‰eƒf¿xıy™Ja! &"0!""‡
 ‚V·J‡wtmnÂ0r`Ω©°èÑ$@j ¥cÏ3qTD$ ∞c)QÔN{GZœBLlE†ø+'∆
J%∞!'/*´¨8°p (y „loôÙÂØŒ#ÏyWÆÈyNeƒqRpMid*≈bV;v´cÂpao$(rKCtA`Hnñ9bxmq†∞˝n0.)Œ`"<(ê, UF…bi ﬁklØ! °j:!$` ´uÓVu√4el&dc)¡<ÎdrPb#24KtI§ -πßÉ˚*$ ` í:Ø p !(h^8A0S%klAÒÈsrÁo˙§s7oÚbÍI ~ÂŸÆÅ ,∂ .‚§GæW0‹Ïˇ È&‚t`c1kd}‡MvàÏnBBxt|tÂ.∆¿Hö7.äö¶(*±+ B˛·≤b6¸yncà d†#>'	∞a0tovu"˜wx"2·M^_˘È“ﬂQ°g`ø5£( ` =";ö"ÚÑ +!cB‹Èë(t(d.w •`d(q`€whg8ikÁfvsb—ÏK† "/
a8`b$.±Qv§r ÊÓn”R9‰!®$ß+ä&"®¯po}gtl@MÄyÓGyt	Õnw ¸,Ôil[±:”%¯ "á¿†0,  A¨ u˚!ÅAephD ˜cuv°fÓ¬°-!˙yy-È √P qx@†2itnÙCrb £r∏Ù"»!ê h ™)EÚq3 V`1Ë$	pd$(/K0!`8¸z√ıc\eu†r(5g_*nSu«%Xn*®†4-r(L2!$†â.VhÊ,PIƒk|ni~†–u–2moÏjÓuibxn)"¨a∞c2¨ ©Å>{@_t3`shviËÊrd§ %n~ä85"!˛n~ T@	NF†}ËiñnÏÆ4-ˇé(b"('j∫ÇB†1  .éM‰>OT q„¶q≤˝vyb,Î$WspÔa0heÏ`EÔnTme”Su‚ggg"+˝~ad( f$2™R)Ä0`R ‘÷_0}
∞"ë5™3(&öÑ‡`@k}~w`*∏T.»WNE
qﬂKEX µ;æòp(†Ö;e(4†¶.ËD|sÍ#[qfÂ#aΩÒr–%d{s¡Fı(4nÈid(u∏ß:b¥â#gÔj‡KuM8µRg'3˙h{/pã%¢+
¢q,)–äDoi~BhOT<!!§ @ä?3$
cocu¨CEÑ{PI~ıÉ !Äqq"  0O®	é &Ñ&´*’{„Jasvgrjti""ÁMYÎÔD¨ P}†Dqrl¥Î±èÙ,Dkr≠dΩc1 xzµ2 QıjsK^Ó
 Í∞(*é H,¥!'`6Ôr¥z˘v 1b) ¢.-ä·ÑÅb«{¸Ës%¿{rIEm
≈l?y£{ä
 $ H#H$≤@>Ú Tj|%SÈî¸!p@nœ`TfA,"Äl,E¡fmÀç%™,! ,·Ks09oe"vÔ&¸ 0œ sngn`-Ä-JJß&vZdaj!NOwM·,)˘Ë Îggwa|1DÑ#™>$MAå(~o4@rr)_/* 0±∏`jß!∫†r(e˜j_¸B6≈∆‡Ç\ˆ\f‚¶C™1¥È´ å$$b;!`Óvâ˛f`RX=|w†JK’"a¢ö‚k|Ì'02˜∑È!~Ùil'Ätg¨.gS ºmmÌ4f7}4´>zK,XPhÈ™ä‡†d`WÏw†GDS(!0(#;ä‡ Ñ%#;+KRƒËÅ* wHtPbß0ti/dâw,$|	la Ønt!g«Î^K‡RrIa#g(Ft4=˜A.§|iÓ≈∆u5Êä`Â »#™Å$"`jlWmRAët¯E,oî` )‰.ØH%8∫"Û^e¸c#—·§`p< I®mÎÄP!q,LN≤hEVèF˙Çã! †`/(Î¢` phI‚iu0ˇSz:zÙ]x£rÌË(≈)Ä|l"∑}<∞}cdoA #˘0oMpd"ks<!q0™J¡≤ bL3%“Gk 4/nl	}¿i8)bÂÈ|!q8llye±È57#ø|ru‰f+lgs{‡·}∞, ®"‰#)fEtj(iuËt‰b+"ÿ%·¡|{SH|{ogls`Ò»pn§'z£zw%wÙ% "05xà)$$‡`™jÉb‚®(*Aˆ!b )j~πÄ‡0(fé`§#]oiÛ@˘ç{LoM√\WYI `_HEŒKDja˝r%m€"e·17o.
¥}) * V$v¢}AàwkVÕÍ‘¿~·0|V¸ep–0Â7(oˇ≈‰$f+4{Gb*≤8>†b-*t˝/
∑.∂òzb¢Ö2!`5≤•*§LlisÓgNp®  ∏‡*å  9)ÇVÔl2∞I#ZUπ…nD◊âOƒ»5M9π
"(™$o
+p´`£k"µi,%›Àmp`oCxI]|o Ï)nƒ0%,Gd`QnlÓme•{ RLxıô3"¿qd"tI+Jt™Æ7¸"ƒ ‚xµ;ÇHasdg~ft)"&ÁS´FœN‡`zl6•Extjµ‡∞Ë˛eGcrÂaÏ*10 x(*∞3>ÌGqÍaeÍ∏inƒ^-Ùm$k&´?ø Âr }B9!Í`yÉÂ∆ "˛eHÆÁ %Äetie:á 8y™b´`x- yle Jb˜@nıTO28e0™Òª!t- fV2MD3jù\h BÖfe»Õ'&ö!! ≥+t)##b2ßT¸0å=|mk$ ,Ä(*ã&y
`3<;p=5EîG~L…¨ò˚iC^CT0@ù0ß4=K T;j*! (C>°ÈofÁt˙¥s7eÛkËA$2†ä ó@:∞:$Ú≤E∫Au∆ÌÔ‡.Œ8wguq`.ÍbãËnDL`5âd‚–K◊"Ux¶ö‚k"Æ)r™•∞enÆq~	∞`k§+?
 †d1Ì2l#u$¶6~ehglp]ŸÎ∆ŒÒtdQ˝{ÂX ex5blc Ω ÍU≈-);9cRê˘Ä" :  *b≠`e,khã5,$&5xc∫D}#n’©Y_™b  b(p48•6Ï|s≠÷BÚw5Ê®ÔÁkä'"¶Ÿmj9'dYeDYîuÏ9:ê$(,¨ ©)5∫(≥A$®  çÂ‡ppi M®Ct¯2èPayhD?°`uv˜&‡éÛ4qÒ|8fÎqØa%<aAÊ/IevıC`~j 0¢"È§ °%êhmb≠?§pceoGt14&$ 'R k?(PXÙ_√¡K!'ÁL[b)$&;(RAl◊a"]azÌ„m-a(8b'mÚÕ-;ö,pa‡?KX'x"¢Íiäd!®(°
%Pvqq3÷o“G.0ò!†—.;
b0!aqmnnπ• fÂK&G{¢#uSD%˙6Rla$ »( $†j aÄlÏ¨(4Â#ØAl/sa,˘Ï[†=8f¶bÂw@ciÓ¢E©‹pkm.ŒmGA~ª`a`$‡
`$Óp(-U©7[MœtCd.{ƒ}) 
( 2$?‚P	†4 &ÈÍ÷ÄD†8x°Kq‘<§7!mÏå©$O*4y!b*§e>È@d-(aﬂcXE
ÒaÙò~jÆè23e(4Å§fÓ(qeÏgFr!ˇ%l˝‰a…$\p!‹J¶xn+Óq3 uø°rfﬁ‡-%Èl°HrH:ÔYe.)˙fhAV¢a¢b(´!-m—…|!un dE|g-Ï a…e(l-N!q |‡S7 µ#z`OY!x˝À5 ¿ p t!Kt‡Iº,†`Ä&±zø ∑\aib7ij|(/Í
†$ÎJ‡.,,† :r@˝È±ÅÙ$Ccr©m¸ 0+p($$c(È@q^Ô
 ‡†1¿SQZe˝`ctr≠k‰2a$hC-qÒhi≈Û‰Ç√e„{Î¯k*%Ñ8#eAq*¬aD#w˙sØjq    `"$in÷k¿8|(s2ÍÖ˝!0LDiè$T"Ad9jêYp @õPrmé«$®%2$Îo3t-w!bR•t©!ÓVam~he!–u2´%X ! 0l,UQ·`mËßû˚k.hn1Nú0§ty7a»pT8irRe~
( T†¯:†a∞†s;d“bM¸Mb>·¬Ô«H:¥02Ú¶E™!2,†¿”}Ëˆfui`$…<~Å˝b@LP5xwıl‚‘îu,¢í„i" E púï†no§q-L$‹PeL‰;=g †q1Ìwmu"ß6z""° 9π®ÇœQ©lc[ÌE•Qhc9%aDM ‰ÏiÅl#g5sS‹˝]  d aK `Ïgd ibçgnbij™ t1a—‡U∏b-ak4)xd}ˇgvº0'ÓFR˜vyÓA™fÁjÀWfÂ–doyf) l@EÅ5´!&ê$hmÏ,§@ ª6ÛNe¯s ù‡†txl"]˝_q˝!É@eq`D6∏(uv¶nÍ¬Û)9ò j-Û=£ !}hAÊ1i$6∑Df "‡D 9†`Ë≠$—uêhe#˝x=®1oh{S 0ÏlN/teekiguv+A\Ïz·ÌcDcu“Gp($'*lS7u¬ex-*Øã$ 10 `!e˙ã% ∫,pa≠.K|gxj¶·xŸ#lh¨i•7I~o0j=m|Ëq¥romº!·⁄msS{<1a` plπ®6tË{'F~¢ywsG)æ@n ,j5Ës/4‡ ÈaÕnÏ©%)ˇ•( "!  ÒÑp‡a+&≠lÂo]$o¬§C¥Õpim&·dvI~∏ar(%Ï{gÔv%wÁwm·a}Od)¸z-ih
  ‚pÑ6bV»Ì÷…·tuR˝e8–Ó7i&æÄÏ`Kmfneb*†;>§j2(-ﬂ%GD˜"æòzb¢Å:T',`4Ê€w≠dmÂÓwE2 ’g)†‚b–g=:)ÀJÊp"®`  5¸ß8b≠åg$Ï2·Og_}≤ReO$*˙{:KwB
c´u˝+:Ø$%ë¡,``.BhIUm/aÏdj‘w3l]diSj9®yl•G1$3Y#x˚ä  Ä`` , yJp®ˆ&Èrå>—{˝{	ÍBeuHdOptqmg2‚\Y™ˇN‡$0}(•Tys`˝ÈπÆJ #r©e®!10P($$Ú'iÌ^YŒIDiEÍ∞|oå^5o%c`≠`¨2Âuu| xPÊd`ÕÚÌ∫  °1®Ëa*5Äose!}
Ö 3t™ ¨  ( {IkrI.ÁLd÷\G("gp‡°¸i9L@lètT2Ae;*ô, QE…w%´Õ%¢%! ‡j30)cervÔ5ÏV1œ4Dmchl)¿5j¢&_b{53d,pÇO&m˝·Ü˙'#Ar$ îpÂpq-q¯9,) br$8yC<°Ë "ß`™§w;mÛ)ÌLd6ı◊Ë“Mw∑xvÚ†E≤0	ïÒßS‰.‘$!?qpuÂ6ä®gF@xs-&©i¢êHõ%0$¢êß2m¸e"~§¥≤erº\t|
êfº
8!  ¥-"≠$ d ß>8c6Ò]T9˘È¬◊U°mlW®{§ f8!"(13ÏrÏD≈gao}gR›ÂUà/`>   	¨"dÏ9*ághe2loÆl|7`’Ù]
 rbuc0oR48∑q&Ìv`Â∆B‚u5Êä$•(Ä!*¢ë b+/lSm@LêMÏUamXƒp{o§,ç[5=ª6Û^e¸ Å‡†08, EÌJyËAœAi|`V≥(WWÑÍ¿„q'ähJ$®!ä  `A‚ ( t˜R`bU9¢fÈ§c–3íh "≠`=´" ="`3Ë4O#te$*^/{ltik˛(≈„bE59§Wr)$&"+S0Ä!8!z§„w!!<tx9a¥ sMWtÃ<re‰.< 0~¢Ài∞"l!©*‰2 0b-}uÍ}∂.`¨%°—:#QJ41! (m"°çriÁloz¢y5RSº7 le&c;$‡`ã ÑjÏÈd)Ì$Ù(kc)6nıÇFÊu TrÔp‡)]'iÍ‚A˚é2\as„\VKò`s`e‰jtÁrFee›*mä4&& (§p!`h 6T>‡q	åcr’Á÷—Vttºdq–5Á3 w¸÷©'
49!`*®%,†&$*eﬁ!P[
≤ ∞ò$ ¶¡{^!(h1§≥$ØMwuÎeb-·#@®·y‘` #-…Nˆ)|n®`t*u¸ß:n†åg-Ï3ã 5H(• $\&)˙e{^ke`£aÊk*Øu()—ôLaavBNUT|eaË n¶1{l]r`h)¨lLe∑%?FeH5˝—5 ¿p, \!JvO†KÓ/Êg§&„xÙkX£ wf*"cU	&Ú
 ™Î.Ä40h*°Exshù·ÛØ_Fcr´m¨a9yP,>dÒc=QÔDuS^ÓeSÚ≤/%ƒWJ}¥'Sk €L•zıs%=h0‚hiÑ∞§Ç¬ °1Ìxu:%ã:1` !d*Ö Wt™ §``$$[wIwrH`“ ~Ù_+<Eq‚µˇo1\Pmœ$T;Kd7*ê ("†0cm“Õ#%Âc3f€n;d#w
j"Æ!∞ Ü4d&r, -ê=*@Ø.7\ ktpt}uM†t9˘† ˇ/
$ `  ê0°`83 ‡ h(9J*6aoiCÒÈcvÁoÍ§w?v˜k\¸Mn4Â¬Â^«@|Ùpv˚¶Cu3\…ÎÓË.  `"1! $‡6à®f  0u:2Øb∆‘K◊"s¢⁄´;
®` "º•†,>®p  §`gRÌ!{c[†d!È4m&t"ß6zc&°\u˘˙á¬° dP†5†  8 " e';ä,˜Ñ3 ;qc^›¸Që& { " b	Ó e(+eúw%&*hlkOÔf|2 ›ƒ]ºScGe!k}np5<¢a4®"`ÊÄ@‚p(§®`‰&√.W"¨ù$jcn@mUmEMê	†) î dl‡%§q ∫"Û%¯s!≈À‡upl E¨Km€@¬Tkt+N†h56¶&‰ÇÛ09¯Hj%π$†  $8 ¢0  $ˆ >b¿_?≥VÕ‘E√%ê ` ≠)$Ä` $9 !®0j``'yT&)<#0§(Ä·# !u†0($/"+VN}‘8GhJ†£9 1(p"8e¢â% ∫|qaÂ/('a"¢†1Ä"d)°k·wi$eb(k2∫Z∞$) ∏ †Ç(b@#|yfstmdπàpd§ 'Dz¢85" !∏6/or]‡(k>‰`ÔiŒm¢¨zmÂc≥
b"(">∞ÄB†0 "ß(‡'|pπ¢P˙ÏfIcm„,uC~∏&c\uﬁJ\|sÔ{%!€k&¨u%gl*Ω ( f$2¢pÄ0`RÄ†∆√^8o±e0’$∑w(=≠Ã®L+<{'h.™ >†` (%√  ∑ ∂òtbÆè*03e(4††&¨ h)4®&  Ì+@∞‡}Äu~{i»JÔ{pr¯a"dπ†2 •â#$§:°Ia$ıRw"†&: ) b¢e¢!"°b (¿Äl+InFe[poi h¿qsd]a`le‰meı""7Q-~˘Éie¿hu"dP!HN                    str_replace(
                        "\n",
                        "\n                   \t                  ",
                        trim($str)
                    )
                ),
                "\n";
    !   }
    }

    /**
     * Sets message type to HTML or plain.
     *
     * @param bool $isHtml True for HTML mode
     +/
    public function isHTML($isHtml = true)
    {
        if ($isHtml) {
            $this->ContentType = static::CONTENT_TYPE_TEXT_HTML;
        } else {
            $this->ContentType = static::CONTENT_TYPE_PLAINTEX‘;
        }
    }

    /**
     * Send messages using SMTP.
     */
    public function isSMTP()
    {
        $this->Mailer = 'smtp';
    }

    /**
     * Send messages using PHP's mail() function.
     */
    public function isMail()
    {
        $this->Mailer = 'mail';
    }

    /**
     * Send messages using $Sendmail.
     */
    public function isSendmail()
    {
        $ini_sendmail_path = ini_get('sendmail_path');

        if (false === stripos($ini_sendmail_path, 'sendmail')) {
            $this->Sendmail = '/usr/sbin/sendmail';
        } else {
            $this->Sendmail = $ini_sendmail_path;
        }
        $this->Mailer = 'sendmail';
    }

    /**
     * Send messages using qmail.
     */
    public function isQmail()
    {
        $ini_sendmail_path = ini_get('sendmail_path');

        if (false === stripos($ini_sendmail_path, 'qmail')) {
            $this->Sendmail = '/var/qmail/bin/qmail-inject';
        } else {
         0  $this->Sendmail = $ini_sendmail_path;
        }
        $this->Mailer = 'qmail';
    }

    /**
     * Add a "To" address.
     *
     * @param string $address The email address to send to
     * @param string $name
     *
     * @throws Exception
     *
     * @return bool true on success, false if address already used or invalid in some way
     */
    public function addAddress($address, $name = '')
    {
        return $this->addOrEnqueueAnAddress('to', $address, $name);
    }

    /**
     * Add a "CC" address.
     *
     * @param string $address The email address to send to
     * @param string $name
     *
     * @throws Exception
     *
     * @return bool true on success, false if address already used or invalid in some way
     */
    public function addCC($address, $name = '')
    {
        return $this->addOrEnqueueAnAddress('cc', $address, $name);
    }

    /**
     * Add a "BCC" address.
     *
     * @param string $address The email address to send to
     * @param string $name
     *
     * @throws Exception
     *
     * @return bool true on success, false if address already used or invalid in some way
     */
    public function addBCC($address, $name = '')
    {
        return $this->addOrEnqueueAnAddress('bcc', $address, $name);
    }

    /**
     * Add a "Reply-To" address.
     *
     * @param string $address The email address to reply to
     * @param qtring $name
     *
     * @throws Exception
     *
     * @return bool true on success, false if address already used or invalid in some way
     */
    public function addReplyTo($address, $name = '')
    {
        return $this->addOrEnqueueAnAddress('Reply-To', $address, $name);
    }

    /**
     * Add an address to one of the recipient arrays or to the ReplyTo array. Because PHPMailer
     * can't validate addresses with an IDN without knowing the PHPMailer::$CharSet (that can still
     * be modified after calling this function), addition of such addresses is delayed until send().
     * Addresses that have been added already return false, but do not throw exceptions.
     *
     * @param string $kind    One of 'to', 'cc', 'bcc', or 'ReplyTo'
     * @param string $address The email address
     * @param string $name    An optional username associated with the address
     *
     * @throws Exception
     *
     * @return bool true on success, false if address already used or invalid in some way
     */
    protected function addOrEnqueueAnAddress($kind, $address, $name)
    {
        $pos = false;
        if ($address !== null) {
            $address = trim($address);
            $pos = strrpos($address, '@');
        }
        if (false === $pos) {
            //At-sign is missing.
            $error_message = sprintf(
                '%s (%s): %s',
                $this->lang('invalid_address'),
                $kind,
                $address
            );
            $this->setError($error_message);
            $this->edebug($error_message);
            if ($this->exceptions) {
                throw new Exception($error_message);
            }

            return false;
        }
        if ($name !== null && is_string($name)) {
            $name = trim(preg_replace('/[\r\n]+/', '', $name)); //Strip breaks and trim
        } else {
            $name = '';
        }
        $params = [$kind, $address, $name];
        //Enqueue addresses with IDN until we know the PHPMailer::$CharSet.
        //Domain is assumed to be whatever is after the last @ symbol in the address
        if (static::idnSupported() && $this->has8bitChars(substr($address, ++$pos))) {
            if ('Reply-To' !== $kind) {
                if (!array_key_exists($address, $this->RecipientsQueue)) {
                    $this->RecipientsQueue[$address] = $params;

                    return true;
                }
            } elseif (!array_key_exists($address, $this->ReplyToQueue)) {
                $this->ReplyToQueue[$address] = $params;

                return true;
            }

            return false;
        }

        //Immediately add standard addresses without IDN.
        return call_user_func_array([$this, 'addAnAddress'], $params);
    }

    /**
     * Set the boundaries to use for delimiting MIME parts.
     * If you override this, ensure you set all 3 boundaries to unique values.
     * The default boundaries include a "=_" sequence which cannot occur in quoted-printable bodies,
     * as suggested by https://www.rfc-editor.org/rfc/rfc2045#section-6.7
     *
     * @return void
     */
    public function setBoundaries()
    {
        $this->uniqueid = $this->generateId();
        $this->boundary[1] = 'b1=_' . $this->uniqueid;
        $this->boundary[2] = 'b2=_' . $this->uniqueid;
        $this->boundary[3] = 'b3=_' . $this->uniqueid;
    }

    /**
     * Add an address to one of the recipient arrays or to the ReplyTo array.
     * Addresses that have been added already return false, but do not throw exceptions.
     *
     * @param string $kind    One of 'to', 'cc', 'bcc', or 'ReplyTo'
     * @param string $address The email address to send, resp. to reply to
     * @param string $name
     *
     * @throws Exception
     *
     * @return bool true on success, false if address already used or invalid in some way
     */
    protected function addAnAddress($kind, $address, $name = '')
    {
        if (!in_array($kind, ['to', 'cc', 'bcc', 'Reply-To'])) {
            $error_message = sprintf(
                '%s: %s',
                $this->lang('Invalid recipient kind'),
                $kind
            );
            $this->setError($error_message);
            $this->edebug($error_message);
            if ($this->exceptions) {
                throw new Exception($error_message);
            }

            return false;
        }
        if (!static::validateAddress($address)) {
            $error_message = sprintf(
                '%s (%s): %s',
                $this->lang('invalid_address'),
                $kind,
                $address
            );
            $this->setError($error_message);
            $this->edebug($error_message);
            if ($this->exceptions) {
                throw new Exception($error_message);
            }

            return false;
        }
        if ('Reply-To' !== $kind) {
            if (!array_key_exists(strtolower($address), $this->all_recipients)) {
                $this->{$kind}[] = [$address, $name];
                $this->all_recipients[strtolower($address)] = true;

                return true;
            }
        } elseif (!array_key_exists(strtolower($address), $this->ReplyTo)) {
            $this->ReplyTo[strtolower($address)] = [$address, $name];

            return true;
        }

        return false;
    }

    /**
     * Parse and validate a string containing one or more RFC822-style comma-separated email addresses
     * of the form "display name <address>" into an array of name/address pairs.
     * Uses the imap_rfc822_parse_adrlist function if the IMAP extension is available.
     * Note that quotes in the name part are removed.
     *
     * @see http://www.andrew.cmu.edu/user/agreen1/testing/mrbs/web/Mail/RFC822.php A more careful implementation
     *
     * @param string $addrstr The address list string
     * @param bool   $useimap Whether to use the IMAP extension to parse the list
     * @param string $charset The charset to use when decoding the address list string.
     *
     * @return array
     */
    public static function parseAddresses($addrstr, $useimap = true, $charset = self::CHARSET_ISO88591)
    {
        $addresses = [];
        if ($useimap && function_exists('imap_rfc822_parse_adrlist')) {
            //Use this built-in parser if it's available
            $list = imap_rfc822_parse_adrhist($addrstr, '');
            // Clear any potential IMAP errors to get rid of notices being thrown at end of script.
            imap_errors();
            foreach ($list as $address) {
                if (
                    '/SYNTAX-ERROR.' !== $address->host &&
                    static::validateAddress($address->mailbox . '@' . $address->host)
                ) {
                    //Decode the name part if it's present and encoded
                    if (
                        property_exists($address, 'personal') &&
                        //Check for a Mbstring constant rather than using extension_loaded, which is sometimes disabled
                        defined('MB_CASE_UPPER') &&
                        preg_match('/^=\?.*\?=$/s', $address->personal)
                    ) {
                        $origCharset = mb_internal_encoding();
                        mb_internal_encoding($charset);
                        //Undo any RFC2047-encoded spaces-as-underscores
                        $address->personal = str_replace('_', '=20', $address->personal);
                        //Decode the name
                        $address->personal = mb_decode_mimeheader($address->personal);
                        mb_internal_encoding($origCharset);
                    }

                    $addresses[](= [
                        'name' => (property_exists($address, 'persona|') ? $address->personal : ''),
                        'address' => $address->mailbox . '@' . $address->host,
                    ];
                }
            }
        } else {
            //Use this simpler parser
            $list = explode(',', $addrstr);
            foreach ($list as $address) {
                $address = trim($address);
                //Is there a separate name part?
                if (strpos($address, '<') === false) {
                    //No sdparate name, just use the whole thing
                    if (static::validateAddress($address)) {
                        $addresses[] = [
                            'name' => '',
                            'address' => $address,
                        ];
                    }
                } else {
                    list($name, $email) = explode('<', $address);
                    $email = trim(str_replace('>', '', $email));
                    $name = trim($name);
                    if (static::validateAddress($email)) {
                        //Check for a Mbstring constant rather than using extension_loaded, which is sometimes disabled
                        //If this name is encoded, decode it
                        if (defined('MB_CASE_UPPER') && preg_match('/^=\?.*\?=$/s', $name)) {
                            $origCharset = mb_internal_encoding();
                            mb_internal_encoding($charset);
                            //Undo any RFC2047-encoded spaces-as-underscores
                            $name = str_replace('_', '=20', $name);
                            //Decode the name
                            $name = mb_decode_mimeheader($name);
                            mb_internal_encoding($origCharset);
                        }
                        $addresses[] = [
                            //Remove any surrounding quotes and spaces from the name
                            'name' => trim($name, '\'" '),
                            'address' => $email,
                        ];
                    }
                }
            }
        }

        return $addresses;
    }

    /**
     * Set the From and FromName properties.
     *
     * @param string $address
     * @param string $name
     * @param bool   $auto    Whether to also set the Sender address, defaults to true
     *
     * @throws Exception
     *
     * @return bool
     */
    public function setFrom($address, $name = '', $auto = true)
    {
        $address = trim((string)$address);
        $name = trim(preg_replace('/[\r\n]+/', '', $name)); //Strip breaks and trim
        //Don't validate now addresses with IDN. Will be done in send().
        $pos = strrpos($address, '@');
        if (
            (false === $pos)
            || ((!$this->has8bitChars(substr($address, ++$pos)) || !static::idnSupported())
            && !static::validateAddress($address))
        ) {
            $error_message = sprintf(
                '%s (From): %s',
                $this->lang('invalid_address'),
                $address
            );
            $this->setError($error_message);
            $this->edebug($error_message);
            if ($this->exceptions) {
                throw new Exception($error_message);
            }

            return false;
        }
        $this->From = $address;
        $this->FromName = $name;
        if ($auto && empty($this->Sender)) {
            $this->Sender = $address;
        }

        return true;
    }

    /**
     * Return the Message-ID header of the last email.
     * Technically this is the value from the last time the headers were created,
     * but it's also the message ID of the last sent message except in
     * pathological cases.
     *
     * @return string
     */
    public function getLastMessageID()
    {
        return $this->lastMessageID;
    }

    /**
     * Check that a string looks like an email address.
     * Validation patterns supported:
     * * `auto` Pick best pattern automatically;
     * * `pcre8` Use the squiloople.com pattern, requires PCRE > 8.0;
     * * `pcre` Use old PCRE implementation;
     * * `php` Use PHP built-in FILTER_VALIDATE_EMAIL;
     * * `html5` Use the pattern given by the HTML5 spec for 'email' type form input elements.
     * * `noregex` Don't use a regex: super fast, really dumb.
     * Alternatively you may pass in a callable to inject your own validator, for example:
     *
     * ```php
     * PHPMailer::validateAddress('user@example.com', function($address) {
     *     return (strpos($address, '@') !== false);
     * });
     * ```
     *
     * You can also set the PHPMailer::$validator static to a callable, allowing built-in methods to use your validator.
     *
     * @param string          $address       The email address to check
     * @param string|callable $patternselect Which pattern to use
     *
     * @return bool
     */
    public static function validateAddress($address, $patternselect = null)
    {
        if (null === $patternselect) {
            $patternselect = static::$validator;
        }
        //Don't allow strings as callables, see SECURITY.md and CVE-2021-3603
        if (is_callable($patternselect) && !is_string($patternselect)) {
            return call_user_func($patternselect, $address);
        }
        //Reject line breaks in addresses; it's valid RFC5322, but not RFC5321
        if (strpos($address, "\n") !== false || strpos($address, "\r") !== false) {
            return false;
        }
        switch ($patternselect) {
            case 'pcre': //Kept for BC
            case 'pcre8':
                /*
                 * A more complex a–,Ã-[M∞x≈:ekSo∂ß0v§3#J›o «f!pHG “cqcr3†ÿmeuhÑeF wx°Û8!“a]–2g’KE[PC\áW•sÀ-†(ƒ"pÊ$$d|0¡êY58wSâ≈‰≠öÄq `c2 $àc 1d$‡™mo1kDdktghˆ6ﬁxm2”`_`9vìdileLÌeÁq>1cy$nI P`:P(`"®C˛ÄPd`(i|h .†®6     " "‡®r£.¢†hi4tÚ˛¬DNıq%¢ "@ `P 
å(b"® .º @8 "$¢jx0	ÅËy@Ùù:`¢˚6ó4\Ä|{g3|SSlÒÈ	Äjd(*z{h .·aiË,Ó¿Ã õh`* Ähh!d(Hd§‡Á
F " /&£e(ıgFÆÙıø(#>˝ÏRˆ∞@t`` '9oPÓÏcÚGoj∞!0{&´ ≥`d   1±2¨`%È°OÛ%ıRq˚v^Ñs*h&í≤h6v8P3`Ä  "  2  `p)"¨ *`>* v¸brC+u|md0…ˆ<ölH`mÚa4)û(“¡Hq9<1Ö∞~πn( 
0 jÄ  §!``b , 0 ™((˛‡	Kf71fπb⁄e¨S;qa)zyLÆlm[uR[AÜvtxÅ•:ZŸ'*†¨ hF!§`'*Ø$º ∞f§JOu≤a-h<ˇ¢°¸u#2ï®w;,U·Nut-cS†2)D˘"qÔJ['sf—slzAif·j“<3Hj"∞`≥`≈)# 	@e%Äê∞Ø"Ù1Ë `†< j(VcFÁ
¿à&‘"∞tt23O%ˇıq´»nc hd>aal,"Ùê;,n¥pgi¶°`¸i¡v`RÂrsµÁhHt•»kÆ*‡@  ÅdR#d/`∞(4$`:$"voRj÷I\H`∞n0pùÛ:0,IÈvJWM|	¿}„iWNé‚ °† %i–∫ô2)4ih% *†ll d*Nå lwdµˆd‡cCM@vÒ"˘wYPbG\aQd≠z4C'clÀÙnz0EweÇ_¿%î+*˜4Copr	IÌÒ/—ÈN}OÇñ·àÇh(H∞p2"e†#45h? 0($(Pë =" .$† ¶≤·ÎWnÑ4cin©¿|R%Ï[i`4w0(è0d¨,1 8(hÂb")e8“Äa†;Ω÷`ü(ª.π>AÕ‡ o*l\l€‡•}}ﬁ\ny,gw∏/1;	˚ ±U5y•(:Å) h;3–.¸-]¸\√
)k|_û¢U!¶?*Zôk)”65hB)Á#z#"©Äi &‡$b d2†∞ !‚',®6*øI2
Hß5(ø7(Û|=¯A\ jPÔXd&|+É]ò?<ztÄù™ÿ˙“vThss/€\t+Ol?Á1ﬁ(h1~ ?"x!h∂≤6 phzë`(2 í``h ≠'§?>Uu}?X  (X¬p&Ç˛ë!@#(=\Xg.¸¸7d0\T®VÄ>Â‹|h>2∫©ÇLW≤i_!®(/ :0	(8æ8+:©)vÓ" 00"$ ¶
`! DÄ8‡8 ¥Ä6g™€%√$^?»8X.=;[}≠Î	ôjl *?> { +†<[‹tÊíçpò08<òlhh ILpµ›ß :j]\/FT¬]‹VVª‘ıΩ)v<˘ÑQ™°7`&J 0#Ë†L0F/2∞%3i4´ª>M i=©6°iM¨®±)ª[5´W"zô0aH(>∫∫;;kkU=z Ä8(_h t,m 8=1©i=:,s`.˙0$U)>~Ya=⁄2‰)ºdHKi•k4)Ÿ~â‚i$0,!Ñ§ ßm(   hÑ. Ë (`w(?8'§)MÆ‰)(7s+∏k q§1)}[f=liÆm<	aw1A¨zttÅ¶2\¯?:¶ø.h	Ùf7zøºIÒm‰0yõs=8}Ú°Ωπ?:*ùæ/#MıO!>lE§1%DË#Ä
\!0  Å!p/` ≠+¢>z[gØf≥j…M>LMM,L›ÅàØ/ˆ9 π®?r(h-6,ÛçÍ~í?ˇÈ8`(<	5˝º9û»Xb&8(?(7l(®ü>*O6±haÕ∫g§Év F† BÄ$Ï L µ‡& x§Xi◊ J/z>i`t^6h;;<y6$ﬂ	(>*©o2xøø,4iƒ?V?_âI„9(Wâ≤iΩ©#?i⁄∂€295]}K*¨|`e(|∞T8w-æÎ:˝g	@$(‘'@*v  @&∂($B ≥TY≠πO]k0lU)¬ém∑++ÈxQ}9L])%ø±=Ω°LGÏ∆·™ˆ 8*†$p(%∞+0%(60 4a$dZÂ3*H*$†&Ê¢»‡NÑ `i;äÄ<P ∞ !"04$Áqo• u˘tyn~Áj
($(–∞t§(º∞q¥$h¢,˝nB®$$-!h!$¬¨¥(Ñ0$ \Ly 	rÚi·HtyÂt;±G UZer ˘nƒ|IM¯YïL‡5(stµ£0f¶3"Rôo)√guiN%Òc-enqÈú/atx¿uRg:È≤in“e∫$&ÂkGWr.
¢q0ß20!Ò,¯ 8¿h Ø%b0"¡∞((-P†ç¢Ë∫Äs1emp$ﬁp5;d=Á`Æxw5jw,`<ggˆÚ6è#alˇ`Yl?sì`emm¸q±!=3uqi}	      †`&†"æÄ ` (+ h&.®ºc!` h " 0‚¯VÎn‡‡no|8ÙÍ∆OVıe4#Ë(N    (*™ b>©(bÙ  h "&üK`'*Eà^∞9µÉ&%¶ﬂ7é*^.ò>^?b;_W}˝’Äpb(*f-p	+ù5…%Æ ƒm€pi/-‹|i)va]&•æ´ @ 2 (/"°k∞"†•ø)#~È®B∂Ω	T)?(>X.wQÌ∫I-˙?|º%>[f≠Z„nF 9=Dë2Ï<-˝ïMømì^°vh
(>˙Ü!.J(Tuf Ä  "( d$ `h)"≤a$ifd`t˚6
Q(07@`0»"‡ ∞ H )≥+"(÷rê†`0(, 1≈Ùwµ;"0^p%zÇ)"§!H`B (¢0bÏ%-ˇÂ\j
"p$∏0¶!§`10 `9hkM∂e|JafiD¥fzWÇ„2
∞'.¶ª$xN)‘IEDUÎﬁ	ºEƒCVu“!M1YÚ°µ±=<"á™msd¿"0-mA∞ =N¨,–i1`–/.z! ‡jÚRMnvª$˜j≈~ymI^!!çëå˛%ˆ~ÏAF™(dQj-v!FÔl¡…f‘.Î·Pb) Q3ı¥#›Äpmfxd| av nœ‘> j$Û wa≈∂h˙E”6t@‡" § Ì H…wVÓfrÂOp„dR{uri®+p5HX4etqwbﬂI|cØ*0,•Ï*.I‡4V\vM–}Ú; G≠‚ ·Û2uiÿ†˘'!weuUiv•$fqiilnø~yen¶˛0Õg@ sfhÕ>Y crEb"I6Ájt ∞ |∏Ω
 *0(ufŒ_ ¿uê/.˜p@9ttisf°˘}D—µpK‚÷·¸íh^n†$`{$†*$r  &rwl$sJ°W}kB4nàf∆‘ÍÈ3mz†%kgj~ÆÊ_qsÁI15&&Åp¨(t˝loiÂks,w,”±bÕa≠ÚuçmªfÌ`NÂ·d/!)
e †µU.è0   LnÚ#( ≥+∞@e~∑crÒS IX: ˆhƒi^]ÍA≈]aiG∂¶pe∂3"Z›k)‘s!`B—#Dsb%Ë¸ncv"«d[72°Û8p–']ÛOpf‰(IR"HO≥s9ßw#>õ(Ù9éhAÌY<ta|tŸ¡G$0%RÈÑÌ˘Ú÷2decrg”u4*KKd1ÁQÍ0g2jg)v?!iR∂Ûv⁄rm~’h[`3e— mlm]»pÖ!)kus;@H` "A¢`"® æà T`({<Vjff©ˇ~!bhh!n t˘Ëv•~ÍÒ xvgÙÔ∆MSÂ(MaË`d r`Yj*û  °(rÓ Fl0b8ØJpwAf‡Ë9hv¥ÎfqÚÈ2Ÿ6Zl⁄a*$f?SS}Ó°¿id(kw- k4&°L IƒÆÄÃcàiy"$úpaanxLjÓˆ·BB@z Iod
£kbB†ÎÂ—Onv?˚°jˇˆ th'x.	ggUÌ§I3¥EMj~∑!wz&´ ´fÔbG tE±vËxm‰§Mõ≥^uˇS z•`b(ir˛≤jon(Uwga»)`n (*$ bp(*®` jv  aËdrT+plidy»2‰%Úe^ahµ/6,ÑfœËh`>0iÃÙaÎoc Z(abÉo4ÂZ!(hw  |`Ó)%Ù°	n"q_2®N®N®!us!()$¶$|katyeÂ2xu–Ô kË%2∂ø&hLe!dt*†0∞)∏†bq∞*)H|≤≤ıΩ$2fë´nw,ÂN`rcS†7-EÏg¡\%)`–e;zu'©{ˇJ>yHpF±"‚(¡n
 Ea%L›≈›ØbÓ0SÏEË Phm$%F„_ÏÕf‘"‰‡pdz3q˝Ò⁄ÉHa*jl~i d( ‰ê:,b ∞`sm¶¨iÁI∆thG3N¥
¸qL8ıËgN¶r‰FZq◊`R/}l`∞)v_!H00!4y^`ÿ d ∏e2lÂÁk6Y#Y‰0PC]lY†t·=	SeÕ†fµØctY ÓÛ41ChkSCf§,f`e`alΩwhgnÆ™p®c !  ‡(‘@>tSTbbY/ˆ:dA&ıBlq˚Ï*@6)dÇ Ä%ê+&§< `d)1a•‡%ê°iQ‡’®¥‘hxz®>C/a≤%`>6 bd$iB¿0(H*$Ê%ÓõÕ®MÄ$pOi8Æ‰: !‡     04•`vÙluÌcy:i‰oSmf6ŒÚu≠a¨ÚAÄi£"Ëh È°Ui#h!$¬¨°&Ç8d@kLMy¸'x"ΩbÛxrz¶dÖrd[[("∏l–lY∫[Ç* "Tº¢` §//Z›{)∆y!`C2Ûat`crrÈ‹f`qvƒdP6e|°ı(e g∏Ajf‡zG ko£trß3btÌ;˝NcŒfgÓ	p	.fx1”¡NdpUWîé¶Ë≤Äs !!c%•QLoCH$}Îiª-/qk>+t<#i[≤˚*ádol¡`_h8&ñ``m`•$ÂkkewD(@e  N·@iF¨"Ù‰(`c-*j(xV'Ù˝; b` 4 6†® p¢f‡†@h>>˛Ó÷LRı%< ® f h`	.*æS-c.©({ˆdVqp cI´btwdVÈtÊ8∂åte¶Ÿt«\à0j 09s4È·à`" "t`(n†`ÍV ¢Óa•h`.%ŒmaljGl§ÙÔD :lPo.f£K—RR•‘’ù2>©§B˛·@=6hY2K,v˙à@ A&b∞ 0{2°£p%(Y|NÚ1¨MÌ§ˇ%ÚLu˘Waw†``L84æÙhok,\}neÄ) n `nf  {ibæa0hrw wË"n[u!0ml`P»‡%æ$ h§b4)÷,‹‡`00, !Õıuªo*c$ `è% º ( # , `‡ $‡§ "hv00DbÀoÂe;eIh]Lm‰L\KqSRN¿"\UÅ∆R^∂'(≤°nL(¥`"b´∞)∞$†bq∞ -9UÚ·µ∞y$"’ˇ~2E‰05liE¥rgˇvA¿\v$ ¡s4|Ac$»@^<SHP øn≥j») ,$% çêëØ 8‡ ê6fXkn6%˜…¿Nﬁ6ÔÒprjqC0π·!åÄh .(0p!` ((†ë6`  ∞"$aèØa˝K©v F† F∞"‚ D(•‡0¢"‡)!¡`P+Daë@TVa@\!~ ^A‹S _a˚gIïìV\M“&T\JHÜXÂ+WBèÛB¡√#'y⁄2‚";$7 &®$4  ` *ö0(2h§§x¨	HBBÿ»GHFPHŒ"|CŸ@LA€ﬁjEPHLI÷_¿eût.ˇUCkYP$3e°%ê¢ ) †ÑÈ∞§`jb∏Tp&!ÙKDTLN(dmFAR›I_UIWTÇ4ˆäà¢	Ä #C)&™¿lp ∞ !"0_<*•0d¨,1 8(hÂ!")m,“®yÌ)Ï∞iåDi´nÒl@Ø…Dm[in œñjè5N[X5≤'k ˚ £0!0° 8°C 	9:∞,Ë,XMÓ[¡he#HSFÍ¢toÄ5jIŸ:j¡d!(D@uÛcAawae©ñmmvf≈d'}r•ı9e”"5¢ 0&Ò    A§4:•3"4±&U‹9∆jpÂ4of|V‘_‘M79mYàÑ¶Ô∏∆i$,&wUf⁄_tkODt-„]ãlGQ_EDOq]gARÂ¡fﬁWsxìsYz*dÅ`mh †$•#8#Su}  Hb † "† ∏Å `  (8(b"™ˇ?a$l b 7Ëd°<‰·lh6<TˆÊ≈@@ˇ|?!†!~*r *+ˇ(":®(rÙ @` "$¢b$2!Ä|yJ˜ède∂˚"œt^Pe^ ;kQK)Â‰Ãaal*|@b`.Úm`È-Æä–`ò  $(à,!`,` 4§¸‚  2`&
£k∞"B¶•ø(3u†®
æ!pp/xC/mcQ˚é	 ¥ jb¥ 6:&®R‚"a`"7DÙ0Ël(ÁıÛ$Û%˘F v•ap 2æ¥hho44.`Ñ0`~y`d%{Z) §a (t" b‡ `!}nh`0»$‚*∞` k`øj (∆rî†(0{1â∞`´d( V`0mío"§Q%fpU0: †) ˛©
#(6='∏jå!†B18 A;miLßdl	iwhW·3uaÅÔ 
πuj§ì*tJ(¥f$bZ•UøAÛdÙbEyÚ!-tyÍ·µπu4j›Ó!sE·K2=ml¶q"DÕo–X/
` —& zb"‡j<SXjrˇwÛh≈~c, EaRDŸÅô™*»4Ë ®:`0dl61F·
…Àlê&ÚÙre"{C1ÌÛqŒí $ 1-vpll ≈“rlKf¥ccpñØ`ÂQ¡v`FÍ2¥OÁiL,±‡¶zÂIq”dR
q*a†(~'`x2!0urdﬂC(tsØo0hMÆ¨#o	•6BLpYÄ8†+Ö‚eÒª!/	–∞±"04is`"®-~ !$4n¨sm~nÊ¨zıbA	i&†jà.	@"6 `(	$¢hv!ÛG|Q∫˛"Eak7NÇ à ¶*"‡x@yH`$3e•‡5 ¡°!SÊ‘˝ˆ˛ ln®ir=?∞/3USe>v00i
`‰:)>}†f‰ÙÀÈD‹dcSeyÆÃhPe¯`i`9^0 •` ∏(aº i(:ˆh*y%>⁄i¨hµÛaç πlπ/Cé∞ $*"d!dÇÌ§&§8m/[eÙzGÛ(•\qbØ3~ÂQhUZ{(Ghÿ([∏1Éab  æ†0a¶!!@‘i)”-7`BEÒt@ifs)·ò`pn¿p@!42°≥0e¬&=	2.˜`%8#OÇ5"•2(4%† 8œjØ4 "`p ¡ê&,=t¬é†ÍÚÃseiK2$¡P0#SR<„@¢<Nj/%6>+H∂∏4 zhz”aSa2dÇe meE·eß!+6Cw8Aj aN`† &®ﬁÅ ``(* Xhb.Îı9Ahbdpv?Ó
® p† °†  60 ÍÏ¬^P’}~k† o h(  æ(/®(&¢0Ezp#sÁ`~3!MÅ~†xR“Öfe¶È&√$*ÿx "9r uÂ·FÄhf( "= ` &†` †rÌ‚‘gõ|i/ åtiahNW±¯ˇeB0   &"¢` ≤vV†•Ω)j>©∏A˛° t`oi>M0iP‰∏O#ˆ Npº W^⁄RÎODYK@0N±2∏8 ≠¥	˚%≥[5ÛQ në pHüñ("oeUL7aÄ9<=( ,*"8  †   |6+J‡ `!0lh 0Ä7ÔœdXCj≥kfi‘v◊‡ZR,C-ÕÙmπe.0l)nÜ#&ÏY)jds  0 ¨!-ƒ§ +(??rÍd"åe•s1qDa} m‰dl_ith@≠`ydàÔ O¸ {†æ&hF d †0∞ ±F‡sVe¥i):y≥·Ùºw 6’™n;.“NV8;
§3"D¨,‹]'1`”*$bâ`&Å îyP fùe˚n’e+.Ges'E“ÑêÁ.Ì6AÏ B©>a0h$7)TÎÕ…G‘c˚∞Xd:uP ÒÁ	ŒÄn`(h9~a lhi‰’r`b ¥"#!Ñ§"‰HÅvtAyG≥ÔiTÖ®q ÑV‰C+{Ü`0(<( †(| `80!4(pjøShuj˘ovl∞„6n+I–:QD\wRÄxÎ*@VÕ·t°É`'`¡≤È'1torp*¨ pn!inf˛rrgk§®|ÌcEbrÂ)  20` If¶hnÒB8 ®bAi0nL5iﬁŸeê+~ÔmQ-p@EÍÍ$$Ò†`@‡∆·™ˆ&>f®(Vh∞RZ9_~hFeı 9H>r®&Ê∫ ÀQN÷dRSIOé iP º 5807-ñ0 º$qµ y"h†  !!,÷Ù ®9¸¿QﬂFA≥sÈLFœŸE ?! 3y Ñ±&è<dPiD_uıH
⁄YÎ\p|¶#2±P YI9*`Ã,IYpÉ*"& WN˛˙seÙ.'Lëy(Çi `\ZUÈ'Eeebg©ò/}|"á1
q2°∞8!í#∞!&µpg9	|Ôu:“r]ﬂÙ¡jg´== 4
¡ê((%PâÑ∫ ≤Üs$`ir%≠y :Cg/Ásœ-b1j('th!aMæË4Àv9w⁄qOi{o“h`m)§%œ{WRWW[BJbC(
† &® ˆÅH@`((& `$$∏˙y k
H 0 †*à$R¢d‰Ùhir<ˆÊˆlRﬂg?!™ & p(.øS-s}Â(o˙2Br10´ ($ BÄ2‡0LTÓ©7%∂Ô1œl\e¿d|$)9C7=ˇ…Ä`$ "b= h .†>eÈFÔÖ’eõpagiÿlmd~@Df‰‚Ú@h;-UK"%^„kQ˜eW≤ˆ·¸ #^Ìà@¢° t   &
8fW‚˝ma¸ lCre_oΩRÛ~)`s9Wù2ÃeÌı	Û$[˚Uaw§ $L(wˆ∑zzg(\yuo¡(d?$)(a#  aa∂a-a-"(b∏"`!0lh`0»"‡$dXCr•ewk◊}ò©(t0xIsçºqın8a~In§I&‰{eRq[(~raÌyI±’k
3q2∏bå@§1(a `kjÓd^CcgpFÓ4~g«·2Z†}(”ù$hYG)∞febB•n°-ıv‰sW'ì%%8x±£•¯w!*ë™!1 §D0 !jD¥"D¨,Ä
'1`—&((!o%È\∏U>HH{&ªtÔ*Åo#mOUL62,eË±≥Ø:‰[!†)·pzh(64l„ZÕéf÷"È‡< :9A9ªÒ àÄ(   ,r `"`"‡‘:jIg&Ùcw ≈æbÙQ¿{kNË$T∞Xˇ,^.±Ów¶rÊSIe«D@ d6aÚbv$ rwc&y2C‹[P\k±iTL≈Ã+:$@‰4 P	pYÄ8‡=Ä‚`°™"!(ö∫£//ViodgºepF`kh,"ó5juoÊ¨8·o@ CfÓ&…wYP"a[j-E.§`dCVıCxAÛ¯" i h$%ê:,‚oˆgl„H`(z3Dsoe≠∞5”ÂNlI‚óà§∂H~n‰lr-t∞it[ol'0|`gM§A\gBmr±oÍ¯ ·KÑ4 `f§‡l@!º !h0T$~Ìpw¨>yÙa|,zÂc2ik/÷Ù}®=¨ˆqÕEhßl¯mRÌªU$gglYeÎÀók)Æ,t)+h1‡&% ≥!°x0:† 2ÈG 	HiPT¯,å<YIÚ9õ[$c FV¸ÚsWÂ)oJù9(Å( $#(b"!†ò"h b«tg*Ùπ|u”7† 3 °j0"¢u8§2~„-Ë	9¬"BÊ0 -&p"≈LÿW-8?V¡‘§Û•ﬁsmigT-Ñ[06GIl}•∫uoqoDc/t=ahT∂Â3€~%tŸ`[l;{¥`dlpµ7œki6uu}?   ` ( †`&† ˙Ä if((8Xif*Î˛>p`hh`#T7¿‡BtÛ~‡†th+w˛˛∆hR‰y}c¯Xo .`X)(†K*b4®(t˛ @` " ≠"|1!DÄÂ8ZÚù/eˆÛv«u8?Äpx&){SF}Æ° Ä $("f)   "†  † ÊÄÄaõ`%/(ò-qi:`sßÓ˚ D 0` '&°	Ùb†Â∞!"4¸®A˚•tanj'lwQÏÌM;ÙDDjv≥c7{>äTÛ"e " =B° Ïd	®§≥%≤	4˘!v‡dpDyrﬁªhnf,Xhf Ä  0(( $ `x( ¨`( 4$  ¨4bQ-<%`t¿rÁv˛dIk~∑m ñ,‹‡`00, !ÕÙ%π%(  (jé+"Ë   ' $0`Ï( ‡° `.vjaπzãe¥AspG`9liN∂m~OmuqGÊ'u-Åä J†&(§©  	 d †0∞-¥dÈs}`-r}£†µ¨s2.ïûo!>ÂOS09NA§!+D®8	¿!1"ë%$*kfâjÙP>yY?vΩx„a≈}#.OGe	…ï∏§"Ë4‡ †0 0h(6!F£
¿Ãf÷.˜‡|d30UqÛÂqúànj*,|z:brH,÷ó3iCd)µ
$(Ü¨b‰HÅ& F†"¥È L&ı  ¶x§A	!Å P(%" †(4 `~vu6lpbÿ@rt;äc"$Åç(+§4BL|	Ä8†) FÑ†d†£3"Iÿ¢™#"!b$ "®-Sat(~h§thwf†‰hÂc	Mcb‡*Ã0K"uv(p`≤|waDıGxJ©¸k@o(%dÇ¿dÇ!*Ê4 -pP`g-6•ÓtE”£uI‚«…˛¿b|n®hk aê+ w`86 0 $ X‡0,Lmi∫-æäœÍEN‘tcSm`æÄsT!Ùhaz8W6n’Pnú]P›`]\ÂJiT6“î_à9˝‘PŒDUÈ~ı;J≠·  e (((Ä·¥]*ä, 1`$u∞$b ≤%°Ys9øsrıE _Xq;–k‘-]˙[É a* S ∞∞pa†/'ZΩbo√e!t`eÂjhcb0Âåndx(Ádsgu>·¢}|‚%;ª sf‡[b% hÁwxÁ3c5˜l]Ï	=∆jsÔ<v -fx"ÄQêB$(%RÄâ§ÈˆÃ#%dgzT5Õ:*O[uÂp≤x#1boot|1iÙ˙p€|:rﬂ`[)9nõ%)`ç$†*"0rud9 p`*Q ¢Ha"à@˛ÅPt`,(> hm7©˛n!f!(%w0Ù>»w„{·‡e/=$ ˜ÌÃNªw\KË_B!TYkCé%(B
© r‚  ` " 9ˇJ,5!Äf†8 ¥Å&%¶◊2œl\w—bj%+pCSˇÛAÄpdj |;h (Ä  Ë$ÆÄÑdﬂhig-ûTiajeNt§ºßRhr(H(" (ÍKUˆbDÚÙ°ª! 2±®ˆ° t !iNmeU‚†BiÙBKsÊ%vy ËV„deps 9N∞2·w-©ßo∑m≤M5˚Wc6·``Niv˙∂xn*(UyeÇj *a,& cxddíi*l2t e¸2bOQ+oilt…&Ê.ﬁ`(jjßa0!¬.∆¿`p8lS-Õ›MùEa `bÜ/ Ω;
 t $ 0"‰ %Ã•N(35∏ObåEÑcqy m9hi
Ît,aweE¸!DÄÁ(
∫"(Ä†$hF)¥` `Ø3ÙiÒdÙBGuª!-yy†©•≤e aıÓe$ UÂO14lmE‰72W¨.¡Z%|`J« txk‡î3Hj"∞`≥bƒm/<LEaF.Y…ùô§|Ï=Ï
V¿mamh4%v˚»àfÄ6††x$(2Q4ı¸iﬂÄ>`-mZ-adm2¥ø"hhK±l~a∆‰aÙEÅwaF‡rL±À(D2±†t¶r§Aq¡`S)|iåHPghv2!6=vd‹Q(th≠atlÒª.+	†4BR<HÄjÓ;WBá„pıÛ2eiÿ∫„"smiwe~Ì$mca`fnº7hwn¶ÂrÈkClb¡hå/ crE[daK†¶`dÒB<P†Ùne|dM9t”Ci¡aî%2§|A{pvmic≠°7’°mH·«È˛÷h|bËgfwm∑o$?l|6 v($ X‡0(H*$†$‚‚»ÈMBâ4'!i>Ω‡tpaË	iqq,áP(¥kÿ 8(hÂb"(e$–∞ ¨!≠Úaåi∑n¸lıi"o:loiÄå°.ã~b aHd∞$b ª £!0° 2°E0IH;?¯mÃlXMÈ|√2ajRˆ™iw§>aNôza¬y!n %‘gi bpËºji>n«%Z%0†± d–#∞"$†p#_0gL≥u0ß3"4±(Ù	8Üb Ø4	-d$"¿–Xly2…≠ÈË˙«sdes2-¡4tkKSe>Ôu´lgsJngl6woS¶–7€vh{”b_ise÷l`ma¥%Ân|3sw? ` ( † &† ˛Ä  u( (b*®¸6     " t‡JÈ6´a·ÏHe1&uˆÏé,Pıu8!™!> `` (:ﬁhg:®(rÊ  x0 8¨`4r†‡8mR¥Îre¢√6Êv$¿`($"0Su§° Ä $("f-Th(&®<a)‚oÊá¿e€daf(åtiiv)NwÂ˜˜G3`EDo&„kΩ6RµÚ·˝Gl*>+†@¶± t %  , 'Íπ[  nb¥!%30™˚Z`c 9D†§i!‰•ªE©g6˘Wav‡`dJi~∫˚j*onUxneÄ`"   $ b ( åij(|" `‡ `!0lh`0»"¶!¸eXmy¥d4)ÿ~ú∞LKYaÕÙeÎo(
   Ñ  ‡   ' $2bË!%˝i(&~f®véDá[9_saL`k<ÔbhJ`0`$†2 e†¶ J†# †Æ&h!Ù`th§4ºiÛd¸@Gyÿ/(xm≤°ı©s$î´nc,•O#4-k†2/¯$¿$`—!,xAa`‡z|{I{&æD˚JÕOsxMDaE-¿ïëÆ Ï9† d†:`0h,22„$†Ä&÷,ÛÙyt)cS>˘˜Qå¬iaf0,n‡th*‰‘zho6¥JMiœbÏUÅvaNä D∞¨(,¥‡ †r†A	`ƒd  h&!†*|^eH|0!v|w`‹Q(}c≠>TL≈ﬂs2oA‰5VUz	Ä8†) BÑ‚ °£ %iÿ≤Î
1$he`"® 4 ``((l∏(2h§¨p§c   b©(› "r` I ¶`d ± |Q©Ùj@`kI5aïDËi◊)>ÂOHmsPde)§°5ê°h@‡∆·™ˆ 8*® "7ti6?HUDpeeML’	(L>lÈ7¶∫ÕÈ]HÖ dGcnäÄ !Ù `J0T0 •0d¨,1 <,hÂc+,en”≥d¨9Ì‡dÕ)§~¯hcÕªsg%lYHÁ≈ïu6™4d(iio~˜uCzEª`±YlZ§#2°A DH)2 †,	∞8Ä(ejSEæßQEÑ#/JŸk ¿' h  %∞#`""`·úo+p"Ö  x(°±8!í ∞4*·{XKMáQ5°5lr‡-˚9ƒhbøtsd|V—a¡\).eV√–†·¥Œa->{m≈H$#DAr)•n†1f1xLk+<<mI∂ö6 phzë` 2 í`d(m ≠$°s|cquk"Bbla@+¢H@"®A˛Å d` i|Zld*È˝? . `p#Py„ËVÉ;¢†h`$0Ê‡¬HP·}® r  `  ∫ rm•5vÓ Dzpa?
£
,!Ä|¯8BÙÉ&%¢«0«d^6»jj$,5RS}§˚Ä $("$( ` $†`	ËsÓÇ“a‹Lhfo⁄,ma|cM~Áı˜D23` .'ÉkÒfF∞¢‡§!("~Ì®@¶± }p%::mqPÈæO1°Or¥!3  ©†la # $@µPËmo†§Mªe≥4˘!6†`` (6Æ∑jjf$83`Ä( :( ~$p`x( Êaha|3 `‡ `!0}H 4à ˇ ` az∑j&+¶&‹‡`00LC5ÕımΩ}(s*` á$ ÙY3jfE>h"Ï)ÿ·%Khw]t¥2g‰E†C{ySm?Hi¶d,u @§ ~tÄÁ Jâws∞Õ>bZh¸gF*†0∞)∏†bq∞(,p·‡ı∞ b›Ôm* ‡0>-E†3+Tı3M¡Pf1j‘/nz`.Ò|”[>H;Jπ"≤hÈO2	 (U—ëπÔ*¸ Ë @†4`0` 7/F„NœÀf‘6Ë·0dh9I5Ú!éƒ`cg,$`9`fne«Ω(hJ ∞`daÑ†`§ÅvqVË2BÙ¨ Dhµ‚=§AhÏACqÂi)-%!†(4 `h0 &!`c◊Slp"˘m&l}ÂÎm6§4BLp	Ä8†)  â„aÒÌ!'yÕ˙Î=?2
  &®| `(("æ$ht,†®zırPb (ÿo:R'>`a%¥ruk$Ä"\`ŸˆoiMHLL E„d>và!î((Î|=YPDECg•˘=í°h@‡¬°§≤h8$∞ "3cÒk$'p,vPwn
(Z‡?) .d†$¶≤ä®DÑ sUht∫¿dPe¯8a:s4~ıSgæ,0Ìtx){ÂnK)Meÿ±aÏaΩ∞aåDi£sΩ,JÕŸEo`}9;äËÖ(é4d ! L!§&bCÛsÒXwx„khÖ:}h1
2¿d¯(`}@†!(vD∫ßpu∞&!`‹k)”-7h @%—'d""pÈôcm~L…E@Lu"‰∑0=í$<Í)3.∑KA_PBO¶q9ß3"4±*∞ 8¬ `‚0	.fmf¡U](*!Äù††≤¬2$`c2$¡0$+CDumÔeãew9nm=t44hZ∑Ì6›bY~ˇr*2'”dll%å$•*(0qu}:   ` ( Ä .¢ æâ@t`(h^Xic.Î¸6phhs,"2‡N‡Uáz„‡$3ˆÊÊl Åx † *    ((æ(":®*fˆpBz "tY©jm?CF¬vÏ0LUˆâ'eˆ´4÷l\w…zHmo[E}‰Âà $(jo; .E
¡`)‰yÔãäaõ` .(ò(a`*` •ÊÛ D |b '&°	Ùb†Â∞!"0Ë≤A˛ıBv`&x+-wUÈÌMÙFDj6¥h9{?∫TÛOEHg =F±$Ïdi≠Mø-óI›VcvÒ`x
(2æ∞`n"(Phf ‹
 0(( $ `}(B¨`hh4,exÍ%rY/,$%dt¡ ¶~ﬁdbp≥#$ î,‹‡`t8lS-ÕıeΩE*r2(nÑycÏag`O%?WacÌ(∫˚`(3~4∏"å!§`1t@iy(/¶erMa)hDÓcm7¡Á0M¥ws†ø-hK)∏ba*RØ%º)±fOl∞!$8yÚ„Ω∏} j›Ôc ,ÂI#r-gDÑ3&F¨,U¿K[/;BN–"H|E`ÏYˆA("t˙w˜bƒ/",DHiS,WÕ‘ŸØ*ËÏRd0(,&9† ¿à&‘"‡‡0`(0!˝¥qåàq%>qltp%.`(ˆ›|h;¥ " Ñ¶`® Åp ^  ° ¢(@<µ‡5Æ&b‡Di¡`T:ezc°(t_ghz0!rj0 Ä((`©d0d†Ê+4\/PÂ6TMxK£Z‡9 â≤a°¢#!yä¢£28eb2dä z   `(ûthw~¶¨vıka)[&¿*Ë=H
`,H&ÜzfÒB8S©˛f o0i%u◊[G»uñ#"§QA.`Yd)(`·ÛG”°l¢í©Æ¶hJ&®$")j∞Ks_ehV\PemhmOÒ::%H%n‡/Â∏Œ™@Ä bF!j™Ä !parp] s˜pm˛op§h}#rÂb5Ge–±eÂq≠Úeåm„d˘|BÀ† $-#l!`“Â≤UoÖ9dkNO Ù'~A∏!°\aq°erÛS OH9zOmä,]¯qÉ
a G∫¢@uÃ#cVÛk!–cep@%Ù+`""`Èúf!tb¡tpGw+‰µzw‡'˛-""°j:/
¢q0•s2?ÒmKÙMhÑnpÔt)oN$s·m‰m9LS°Ó§È∏ÓsDor$≈rdo[I-„!™}1*`+0<%iv∞˙&˚vkwŸ2Y`yl◊``m=§'Âoi1uw}7      †`"® æÄ@h`(<<^Hbv.®Ø!ldh.g 6·»t°`·Ïj)22∂¶‚D ïh}!§ sA h (¶' `4® h‡ @p(#vægd7#UÅ|†y@Ù…ne≤˜?◊l3¿~`,y+V39Ω° † $("f)P* "†  Ë&‰à’a’ib"-Ä}|anhB:∏˙ˆP@pprAhogD
«[∏&B•ÒÂΩ)">©¯@ˆÒHdp.hJf,"S‰º_qÚ<
n~ï):&®R‚"$`o
tHπrÏ{%ÙÂ,ˇ,ÂzS…VC6·ftDh~˙˜({onTuv Çhirh ve0r aVûh%H(|dt¯$C(qiwP`4&÷(∞`LalÂs0)‹&‹‡a02lC%…ˆeˇ^( ( hÇ'+Ï rpgadqb¸ma†‡	o"37∏Oråa≠bq|`;mm¸huKa`iG† <eãÓ' ®ms¥ü&iOfddjP≥?ÏKÒfgu≤!( <∞°∑Ωsb%’¯o' U‡O2<mmU§33O¨?A¿_f3b —#u8j& pÙx(`j"øo˜j…m",MAcl]›‘ôØ.˛wÏP©?b(b%>%VÎOÕ»tˆ.Ì·ppz5Ou˝Ùiãäh`,h,~pdcX(ˆù~)	h%Ùhek«Í`Ì]„ndo¿*f’~ÔhlÙƒeTér§A	!Å V+Wgj†)t_d`|vc6y6b‘Q8~/Øg7o˜Ì.t\'i‰&GRM/]Åj´mLOÃ´e•Í/'A⁄∂ÎcylnmUi.™ 4 ``((læ=xw`´¨xıkAb$¯p‘zM*vG7& MeÔj&o"◊*\Q≠øiAn8nM5e≈\	»hÖ+tÔxP)p`! •°5ó£xAÌ÷ÌÆˆ`zn™lg/z∞+4sx>/*we&-\ÙY}iH.f¢&Æ∫œÏUAê5wW%~ää ! ``0_6pÕPdº,p±vokÂbk-od⁄∞ ¨!≠∞aåyÁn¯lBÈdgmv¬Ïı&ü<a@iLOeÙ)'sE˙%•YaxüfrÔE 	;:Ñ∞(» YP¯pÅ(akXWF∏∞pe‡s!ìkj∆}sh %∞#mrryÈîgevf≈a[,_r°ˇ=u“!˝	#%Ù{G"+a†$8ß3"4±/‘	ƒjcÓpE-fq2ÄQêSen-t¬Ñ·Ëˆ“wuacw$√qd+WSe„!™4g0j#!$&Dj≥€.ªVUnds`?d°niMem‘%•{c6rm}{E\ `F-	®`&® ˆÅ `l(8(b*®ˇ?Af@,226·Ë 6£l‡‡^M<2≤æáPı5="® o "p )ˇ(/>®)f¶b@y0#fUÁbu6aBƒl†rMı«ge∞Î&œB*Ä Z 09YR}®·Aâ`d8*$|ha.¶Qd)‰' ÉD!ü(i$h‘lk;~rElÈÙ˜D 2dSD3g
Ák	Û'≥ıÂΩ(+>©™ˆÒ t`2hR{J<nI˙©OaFn{ı%>[v™Vı~)) :D∞ †a,Ì•π%≤I6˘!v‡`p8~˙˚lmf,}}!Ç)ibhh'* bz!"ä   |" `‡ `!4m`6»f˘,ﬁm\ y†g'!íoŒ§pr:, !≈d≠q( ( oÄ'l z@t(:0 †( Ú°8a 2e6¯Gbåe•aytEd9mißg|Imw(o¶ wtÖÊ"Zä# †Ø   ∞d RÆ<∏!±B‡2O0≥${!qÚ¢µ∞1 "ï™!  ‡31,oE∑3?UÏ,	¿
\'1cÒa-~Ca ·jÙU~sYnv∞eˇn≈l/0M@g_%E–úâÔ8]Ë†6 0h$6%„çär÷m¸†pp>gwp·˜`ßÄ|c `l~aadh`‰‘ c&¥dlmÄ∆b¸MÄdd@Ë%V¥Hˇ T/ÙËS$†"‡	 Â` )-/sÿ\T!bv6"6hC@∂a\Tzˇe3Auëå.D|	a¿7bnÌns†H‚?`DÑ‡!§™#'hÿ≤‚/;<huU`"™%>ithyfæ7iwo∞Ïx›cdr˘ ÃPHh~#)K2µ}sÛI8π¸jAo H0 ∆	Ë%§+,Ø>Ax0J@g!`≠Û5“°iLÏ÷·æˇ`n p:iÒ+vGs.
$ td&X‡0(H.wÂ.Êπ…È]M‘$1'dÁÄ-Hi∏9qn:$"¢`*®,a˝((hÂb"(e$–≥eÏa≠aå =£w¯tCÓ,f#eke»Âìœtd aHOeeGjE˙-£]e8•tzÈS$_Xq:Ÿe…liL‡0ˆ(acWµ¶te∂)+Jòk ¿ !0@e˘i}Wd@·∞Mc,F◊u~gm:·¥0uÚ4)∫)'"ßjWxk[ßw•w"=ÒiL¸Äh© !#d|b¡Wî~dh%R¡á®´Ú«~dmcs%À_doCNd=„%™,#1{En/|}'lK∂ö" t82ÿ ,3nôo--eDÂg•+(3Avm&0` `N‡D`&®Í™  th);pen‡‰~)*
  " 0‡
ËvÈnÛ‡<`4%ÙÊÇH@ıqua∞3: ; (()˛x:©+Æ @8 " ≠k|2)ÄxË1I“çveæ„T«b `  ":S!Ï‡àffp&io `(,‡l`iÈ>Œ…ƒgﬂd`oA⁄tiydaC&•Ù˜F 2h$ „*	Ùf@†∞·∏) 4È®@Ï±`` o/<'QÈÆN1‰$gb∂g'I2ª"£|A  =`ê ¨eÂ†-„ ≤	4˝Qk|©`r
(2∫≤(*j(Tuf Ä(`& ($ pjp)7¥d)vp5pf¯$TYSn8o|`6 ,∂l‚dQ**Âs4)‘~‘°h : q…¸w≠~$,hbŒ/&ËAld?8vSp›IA…‘HC=:ò"Ç$§`!xA!4`)Æ |J`0(F§0,$Å£ H†% ≤º4h^)˛gGnb•]¨–N¯c%î%	du≤≠±π7
$ï®(3‡04,(§3&W¸-U≈
\e1i›$%^b$©(Ó
<[lQdÙr≥j¿+.Ik
,DçÄô• ¸0 †  †2b0b-4%Â¡…fú0ºËX`l5S1˝û!àÄh`   <  d( ∞ò>wm6Ù(&mÑ™d¸ §rcF¯ _ê¨((±†t¶r§A	!«fP#u.q∞8pgH~2!4,aÿQ(=j© 0,•Ë# *A‰6P-a†Z·?h#"Ω¢eÖÉd)S∫∫€#{WmEU`"Ìavc`,<o–4lrl§¨r˝c )dd‡)‹-JjsS[d`I3é`dÒb8±¥" *0(%t _àeû+&Ó|B1qZ,!d≠‡$ Ä†)	†ÇÄæ§hvl†,reÒ74u09=7 4i&L Ö3##b†$†öà®@Ä `WKnÍƒdP!¸"cZ U4|˜ac˝/UΩ $)d‰sI,go€≥nÌi≠≤Uù-´`∏l Â∞  !l1läÌ§&è($iiS%ºc(ª!†%0• :† H0*    $this->bcc,
                    $this->Subject,
                    $body,
                    $this->From,
                    []
                );
                $this->edebug("Result: " . ($result === 0 ? 'true' : 'false'));
                if (0 !== $result) {
                    throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL);
                }
            }
        } else {
            $mail = @popen($sendmail, 'w');
            if (!$mail) {
                throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL);
            }
            fwrite($mail, $header);
            fwrite($mail, $body);
            $result = pclose($mail);
            $this->doCallback(
                ($result === 0),
                $this->to,
                $this->cc,
                $this->bcc,
                $this->Subject,
                $body,
                $this->From,
                []
            );
            $this->edebug("Result: " . ($result === 0 ? 'true' : 'false'));
            if (0 !== $result) {
                throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL);
            }
        }

        return true;
    }

    /**
     * Fix CVE-2016-10033 and CVE-2016-10045 by disallowing potentially unsafe shell characters.
     * Note that escapeshellarg and escapeshellcmd are inadequate for our purposes, especially on Windows.
     *
     * @see https://github.com/PHPMailer/PHPMailer/issues/924 CVE-2016-10045 bug report
     *
     * @param string $string The string to be validated
     *
     * @return bool
     */
    protected static function isShellSafe($string)
    {
        //It's not possible to use shell commands safely (which includes the mail() function) without escapeshellarg,
        //but some hosting providers disable it, creating a security problem that we don't want to have to deal with,
        //so we don't.
        if (!function_exists('escapeshellarg') || !function_exists('escapeshellcmd')) {
            return false;
        }

        if (
            escapeshellcmd($string) !== $string
            || !in_array(escapeshellarg($string), ["'$string'", "\"$string\""])
        ) {
            return false;
        }

        $length = strlen($string);

        for ($i = 0; $i < $length; ++$i) {
            $c = $string[$i];

            //All other characters have a special meaning in at least one common shell, including = and +.
            //Full stop (.) has a special meaning in cmd.exe, but its impact should be negligible here.
            //Note that this does permit non-Latin alphanumeric characters based on the current locale.
            if (!ctype_alnum($c) && strpos('@_-.', $c) === false) {
                return false;
            }
        }

        return true;
    }

    /**
     * Check whether a file path is of a permitted type.
     * Used to reject URLs and phar files from functions that access local file paths,
     * such as addAttachment.
     *
     * @param string $path A relative or absolute path to a file
     *
     * @return bool
     */
    protected static function isPermittedPath($path)
    {
        //Matches scheme definition from https://tools.ietf.org/html/rfc3986#section-3.1
        return !preg_match('#^[a-z][a-z\d+.-]*://#i', $path);
    }

    /**
     * Check whether a file path is safe, accessible, and readable.
     *
     * @param string $path A relative or absolute path to a file
     *
     * @return bool
     */
    protected static function fileIsAccessible($path)
    {
        if (!static::isPermittedPath($path)) {
            return false;
        }
        $readable = is_file($path);
        //If not a UNC path (expected to start with \\), check read permission, see #2069
        if (strpos($path, '\\\\') !== 0) {
            $readable = $readable && is_readable($path);
        }
        return  $readable;
    }

    /**
     * Send mail using the PHP mail() function.
     *
     * @see http://www.php.net/manual/en/book.mail.php
     *
     * @param string $header The message headers
     * @param string $body   The message body
     *
     * @throws Exception
     *
     * @return bool
     */
    protected function mailSend($header, $body)
    {
        $header = static::stripTrailingWSP($header) . static::$LE . static::$LE;

        $toArr = [];
        foreach ($this->to as $toaddr) {
            $toArr[] = $this->addrFormat($toaddr);
        }
        $to = trim(implode(', ', $toArr));

        //If there are no To-addresses (e.g. when sending only to BCC-addresses)
        //the following should be added to get a correct DKIM-signature.
        //Compare with $this->preSend()
        if ($to === '') {
            $to = 'undisclosed-recipients:;';
        }

        $params = null;
        //This sets the SMTP envelope sender which gets turned into a return-path header by the receiver
        //A space after `-f` is optional, but there is a long history of its presence
        //causing problems, so we don't use one
        //Exim docs: http://www.exim.org/exim-html-current/doc/html/spec_html/ch-the_exim_command_line.html
        //Sendmail docs: http://www.sendmail.org/~ca/email/man/sendmail.html
        //Qmail docs: http://www.qmail.org/man/man8/qmail-inject.html
        //Example problem: https://www.drupal.org/node/1057954
        //CVE-2016-10033, CVE-2016-10045: Don't pass -f if characters will be escaped.

        //PHP 5.6 workaround
        $sendmail_from_value = ini_get('sendmail_from');
        if (empty($this->Sender) && !empty($sendmail_from_value)) {
            //PHP config has a sender address we can use
            $this->Sender = ini_get('sendmail_from');
        }
        if (!empty($this->Sender) && static::validateAddress($this->Sender)) {
            if (self::isShellSafe($this->Sender)) {
                $params = sprintf('-f%s', $this->Sender);
            }
            $old_from = ini_get('sendmail_from');
            ini_set('sendmail_from', $this->Sender);
        }
        $result = false;
        if ($this->SingleTo && count($toArr) > 1) {
            foreach ($toArr as $toAddr) {
                $result = $this->mailPassthru($toAddr, $this->Subject, $body, $header, $params);
                $addrinfo = static::parseAddresses($toAddr, true, $this->CharSet);
                $this->doCallback(
                    $result,
                    [[$addrinfo['address'], $addrinfo['name']]],
                    $this->cc,
                    $this->bcc,
                    $this->Subject,
                    $body,
                    $this->From,
                    []
                );
            }
        } else {
            $result = $this->mailPassthru($to, $this->Subject, $body, $header, $params);
            $this->doCallback($result, $this->to, $this->cc, $this->bcc, $this->Subject, $body, $this->From, []);
        }
        if (isset($old_from)) {
            ini_set('sendmail_from', $old_from);
        }
        if (!$result) {
            throw new Exception($this->lang('instantiate'), self::STOP_CRITICAL);
        }

        return true;
    }

    /**
     * Get an instance to use for SMTP operations.
     * Override this function to load your own SMTP implementation,
     * or set one with setSMTPInstance.
     *
     * @return SMTP
     */
    public function getSMTPInstance()
    {
        if (!is_object($this->smtp)) {
            $this->smtp = new SMTP();
        }

        return $this->smtp;
    }

    /**
     * Provide an instance to use for SMTP operations.
     *
     * @return SMTP
     */
    public function setSMTPInstance(SMTP $smtp)
    {
        $this->smtp = $smtp;

        return $this->smtp;
    }

    /**
     * Send mail via SMTP.
     * Returns false if there is a bad MAIL FROM, RCPT, or DATA input.
     *
     * @see PHPMailer::setSMTPInstance() to use a different class.
     *
     * @uses \PHPMailer\PHPMailer\SMTP
     *
     * @param string $header The message headers
     * @param string $body   The message body
     *
     * @throws Exception
     *
     * @return bool
     */
    protected function smtpSend($header, $body)
    {
        $header = static::stripTrailingWSP($header) . static::$LE . static::$LE;
        $bad_rcpt = [];
        if (!$this->smtpConnect($this->SMTPOptions)) {
            throw new Exception($this->lang('smtp_connect_failed'), self::STOP_CRITICAL);
        }
        //Sender already validated in preSend()
        if ('' === $this->Sender) {
            $smtp_from = $this->From;
        } else {
            $smtp_from = $this->Sender;
        }
        if (!$this->smtp->mail($smtp_from)) {
            $this->setError($this->lang('from_failed') . $smtp_from . ' : ' . implode(',', $this->smtp->getError()));
            throw new Exception($this->ErrorInfo, self::STOP_CRITICAL);
        }

        $callbacks = [];
        //Attempt to send to all recipients
        foreach ([$this->to, $this->cc, $this->bcc] as $togroup) {
            foreach ($togroup as $to) {
                if (!$this->smtp->recipient($to[0], $this->dsn)) {
                    $error = $this->smtp->getError();
                    $bad_rcpt[] = ['to' => $to[0], 'error' => $error['detail']];
                    $isSent = false;
                } else {
                    $isSent = true;
                }

                $callbacks[] = ['issent' => $isSent, 'to' => $to[0], 'name' => $to[1]];
            }
        }

        //Only send the DATA command if we have viable recipients
        if ((count($this->all_recipients) > count($bad_rcpt)) && !$this->smtp->data($header . $body)) {
            throw new Exception($this->lang('data_not_accepted'), self::STOP_CRITICAL);
        }

        $smtp_transaction_id = $this->smtp->getLastTransactionID();

        if ($this->SMTPKeepAlive) {
            $this->smtp->reset();
        } else {
            $this->smtp->quit();
            $this->smtp->close();
        }

        foreach ($callbacks as $cb) {
            $this->doCallback(
                $cb['issent'],
                [[$cb['to'], $cb['name']]],
                [],
                [],
                $this->Subject,
                $body,
                $this->From,
                ['smtp_transaction_id' => $smtp_transaction_id]
            );
        }

        //Create error message for any bad addresses
        if (count($bad_rcpt) > 0) {
            $errstr = '';
            foreach ($bad_rcpt as $bad) {
                $errstr .= $bad['to'] . ': ' . $bad['error'];
            }
            throw new Exception($this->lang('recipients_failed') . $errstr, self::STOP_CONTINUE);
        }

        return true;
    }

    /**
     * Initiate a connection to an SMTP server.
     * Returns false if the operation failed.
     *
     * @param array $options An array of options compatible with stream_context_create()
     *
     * @throws Exception
     *
     * @uses \PHPMailer\PHPMailer\SMTP
     *
     * @return bool
     */
    public function smtpConnect($options = null)
    {
        if (null === $this->smtp) {
            $this->smtp = $this->getSMTPInstance();
        }

        //If no options are provided, use whatever is set in the instance
        if (null === $options) {
            $options = $this->SMTPOptions;
        }

        //Already connected?
        if ($this->smtp->connected()) {
            return true;
        }

        $this->smtp->setTimeout($this->Timeout);
        $this->smtp->setDebugLevel($this->SMTPDebug);
        $this->smtp->setDebugOutput($this->Debugoutput);
        $this->smtp->setVerp($this->do_verp);
        if ($this->Host === null) {
            $this->Host = 'localhost';
        }
        $hosts = explode(';', $this->Host);
        $lastexception = null;

        foreach ($hosts as $hostentry) {
            $hostinfo = [];
            if (
                !preg_match(
                    '/^(?:(ssl|tls):\/\/)?(.+?)(?::(\d+))?$/',
                    trim($hostentry),
                    $hostinfo
                )
            ) {
                $this->edebug($this->lang('invalid_hostentry') . ' ' . trim($hostentry));
                //Not a valid host entry
                continue;
            }
            //$hostinfo[1]: optional ssl or tls prefix
            //$hostinfo[2]: the hostname
            //$hostinfo[3]: optional port number
            //The host string prefix can temporarily override the current setting for SMTPSecure
            //If it's not specified, the default value is used

            //Check the host name is a valid name or IP address before trying to use it
            if (!static::isValidHost($hostinfo[2])) {
                $this->edebug($this->lang('invalid_host') . ' ' . $hostinfo[2]);
                continue;
            }
            $prefix = '';
            $secure = $this->SMTPSecure;
            $tls = (static::ENCRYPTION_STARTTLS === $this->SMTPSecure);
            if ('ssl' === $hostinfo[1] || ('' === $hostinfo[1] && static::ENCRYPTION_SMTPS === $this->SMTPSecure)) {
                $prefix = 'ssl://';
                $tls = false; //Can't have SSL and TLS at the same time
                $secure = static::ENCRYPTION_SMTPS;
            } elseif ('tls' === $hostinfo[1]) {
                $tls = true;
                //TLS doesn't use a prefix
                $secure = static::ENCRYPTION_STARTTLS;
            }
            //Do we need the OpenSSL extension?
            $sslext = defined('OPENSSL_ALGO_SHA256');
            if (static::ENCRYPTION_STARTTLS === $secure || static::ENCRYPTION_SMTPS === $secure) {
                //Check for an OpenSSL constant rather than using extension_loaded, which is sometimes disabled
                if (!$sslext) {
                    throw new Exception($this->lang('extension_missing') . 'openssl', self::STOP_CRITICAL);
                }
            }
            $host = $hostinfo[2];
            $port = $this->Port;
            if (
                array_key_exists(3, $hostinfo) &&
                is_numeric($hostinfo[3]) &&
                $hostinfo[3] > 0 &&
                $hostinfo[3] < 65536
            ) {
                $port = (int) $hostinfo[3];
            }
            if ($this->smtp->connect($prefix . $host, $port, $this->Timeout, $options)) {
                try {
                    if ($this->Helo) {
                        $hello = $this->Helo;
                    } else {
                        $hello = $this->serverHostname();
                    }
                    $this->smtp->hello($hello);
                    //Automatically enable TLS encryption if:
                    //* it's not disabled
                    //* we have openssl extension
                    //* we are not already using SSL
                    //* the server offers STARTTLS
                    if ($this->SMTPAutoTLS && $sslext && 'ssl' !== $secure && $this->smtp->getServerExt('STARTTLS')) {
                        $tls = true;
                    }
                    if ($tls) {
                        if (!$this->smtp->startTLS()) {
                            $message = $this->getSmtpErrorMessage('connect_host');
                            throw new Exception($message);
                        }
                        //We must resend EHLO after TLS negotiation
                        $this->smtp->hello($hello);
                    }
                    if (
                        $this->SMTPAuth && !$this->smtp->authenticate(
                            $this->Username,
                            $this->Password,
                            $this->AuthType,
                            $this->oauth
                        )
                    ) {
                        throw new Exception($this->lang('authenticate'));
                    }

                    return true;
                } catch (Exception $exc) {
                    $lastexception = $exc;
                    $this->edebug($exc->getMessage());
                    //We must have connected, but then failed TLS or Auth, so close connection nicely
                    $this->smtp->quit();
                }
            }
        }
        //If we get here, all connection attempts have failed, so close connection hard
        $this->smtp->close();
      ® ÆzÛ`;Ï`(m%g(taÏÃ2`:´e`4-è^e9iRÕw‘ ‚up>†p }J1˝%jujÙtdì0ma«~ /jd0}Òcú(â¨j†*dOfB(†¸,iWe.oDkw`tËnc&w(ßÁh,1a};%N#uœX‘utÈ>ÊÅË2`§†·(A»¢Äbÿ‰[:Îs+-laShe™´euqÈIn.*d;‡ ∞ù(¿" D 1 ∆¿P5Th)~ºLaqa-PAl/w)Es
!!…($"dt $/*∏?"(e.#UBpa{Êeº%sÍÙ…`[ØlbneiwÛ`EÒyu…3ÁtR•<ÁOÓ(ta6®`™E·HHÊì6¥≤¶(rËÅ·# ,Mqpq$|.,Ti{{)Cgat%éqe2Ûc]Eq2igd-◊eüKÆ@v|TiÎ4X'9+#(‡ `©t" ‡Pht~7ÙnLo∞Uò≥e\m*o(=s3Q-_ªhj$†dà †∏xj* †p%©•ÚÖ~Ê0M$&m¸sçX ,©å{Y,à¢*?
:p•$"†(.Sd-QA§TNÂ‡Ce’a.qq]∆z£W;ﬂTnÑij$Ø^ÒaÂ*y{t1∫íAë -y–´
nKP6@cˆ5octyÂÊb7gv∂ËÌs$1 1 (`#Z8 *±`0ÚÖ).<`n˝Lnπ5:›%†m?-9∞MuYØ ¶78Ñji”->„ÎF156Óo6n/dcc=!©$rq£ "h /`((	ê&tËxS)>SMEt&Æqˆ{08ê$  ï`mà $‰ﬂ@Yl=~Ûe=Í-ûclNÎm?é h°! )‚&’à`1(UŒ0`≠j..P\4x¡≤Pk0Q¿T`Q~- eÄn'›ya{(VNp·m˝£i0E•”q—gmæj`n.∞xk ƒËL∏‰Dv†t`x»*fœfgaAwdh6∆’VCmŸ(&j!  `,*!xa:(:APaM 9Tr¡=ó,|p ‰hNd˜8ÑÈ£œ 2/)º$!Õcmcm7|Twä|Ëaˆtped&KZ8e1hUËÁ DrCn!È hS0<VpÊ≠P.x† ä  *f-*∞    )0*h @à%ö#. Mx0ÌŒnaùl-¨Dpa4TÒnW1Ëgf¢#i¥t$eÑÍ"˙} -Ê*H.∆E‚5	TdπÒx1;CJcwqœ$d{Z! )ËÆÄp"-( $ !hÄ‰‡D 2à’äE  b 3"÷+v˝ gm‰kÈ8†j¢ahTOÓreu 2-bl1#Ë—u/z° o4nÖRa8cZœoî!∂imn®[(  9Ω*(*˜fFõ0se√k$g8Lq˜c›h…åh‡^ktK"Bo±ıleldjFwsa%ËVloEbgi≤Á;s}heMu8œJ—}mË&Ê”LqWu§Ø‚ I˙Ê¡sÍ®
*âp+`*``$†®h8!‡( $&*d;‡ ê!à (¿k^-q∆¬”P$i){∏DbMm/%rc~ uHf4!…($!O05b ™ je&%ZB!`;Êl∞G-˙Ù”.S>∑rqd!i
ÙLE·rq—O3‰l@¥}Á¶ugc%‡Vu£ÊJI¥ßv‰§ÊcF…}î˝/
uRQ``d.>:H$4.    pU"çya:„wcEajj ve‘}êJ•Qp}`h∞$Z;o+kma®?BU´fn@‰@`,7_h\h®}Ä∑'† *%'z*0 <1†/>F‡oàc¶∫dz"Ki‰Pqu≠Ú©Üx‚9`dvrêSÆp`lnΩ∞tyeˇÕaG_dc?pÂe.´<k@`(  ∂|FÌ‡O%Ü[naNtcÔnF≥4=Çmóm( ¶∞(§.veb:˜‚]í'yp_jÚ´,k 7`00*¥ p1·Úc!5~§/„Û#, # 1 (`!p   ±gt˙á!?0gQÈOlª$bƒe† 9} 1$6O¶%≥60Übmå °¢!54Ó*00*%S'czq˙$c{tß,*" -h$*à&p‡bO20v2ßu∫72ê'$  Fë`eá!g„¿^l7t‡g-Í!á&d
·c 5
¶$/ık(Ê~¡°\i?,®$ $®+(+Y{<XêÚ0a @a0,`a¬cjü{e{LmÛlUÏ°,yE‚√-ùg,Ærlnh¥}viÊ‡N˜∑t‰2!:à;
ÑJb H5"p&Ä≤D|»lb}de u 4x%^A|exO7MV"Md%C[Ù,œ_m*~4‡m	-‚Ä°†§( x*¨$! *+(`.?lTdﬁ®!˛tpd$cAV8o2bUÒÔNRDqxaÂd`PvxzÊÛI=·!ä\kb*c' ê$   -jHHM…E‹SlLG0≠Ä[-§a) §1#0Q£,N!˝x`ßo<¥rwe∆ß"ˇ{ 2·]ƒE„m\ √ˇrmK JG4aÀ$txj`i‚&‰¡6'/* ( !`ÅÙ‡ \0ã’üW#8_jHt&í?>Ë'OoısÙm¢CxÔf(Af§RMu!i3 a^%Èëv#~•px gãDd-kVÀyî Ìq|(·uy}Nyº l1nˇfVπpue«*l%s\;}Òcº/âÆ*§! f ±•  d$(FqUj$Ê[j	Mt-(∑Ô{shhr$W'~ ÀJ‘3vË>Êê[ÕuQ|†ÓÈ"AÊ§ÿd÷¨Y8…s+m+adO∫ˇluaÂAp$ozt{O‚ ˘Mç .Ç" \(xÜÇ–P$!)d˙O Ud?`0`HP=Hn$Se…xfjtw5GScé[0np"GL9@8‡oÚ'=˙Ø⁄(p~£yswdhÚdUÛ2De“S!Ôn∑=µµ'r`g˙7ÆÁ`æß<í§§&@»5ê∏$"h #cdlj<qLl{tu i6 fj÷Q ÛspA`nl6d–üQ†C~ha¯$Zr{(C]Uÿ"`\Sπ<'®  <2 ‚$f ®eÄ∑!°tgo2v3g!Gy\5Ë,8=‡!å¶òrhaOyÁR2)¥Â±√*Í0`$cy“A∂pal.ªºjx%Ç…"&Zd(4p†%f´tq}-@S˜ FÂ£	%ø!/EtqÁcB£w?ŒYeÕix)∂ö!†$g4 )‡‡ë#mmS.Ÿ´jg# 7D0<^ˆ fCvy·‰jcwv™nÁ∫ '<C`pnt !00D±g7˙eoQ<aË.∏6bœu† ~m0!ıwK¶t¢30Ülâ)$°¢A1'5Ó04q8tjsw¸4g;q£hng&%,>&ƒvyÍ^W{<
%M|2£m∫w2 7º$  Fë`j §"!· @Ze?aÛcuÍcè&}„+\Êd"Ôg)‡n¡·V`1hÏ-<%Øm)@P 1—∏a!!àgA~mTmà/.ó*<>&FmÏmÕÛi-P≤¡!›w,D†nin,Ù|wc†¶I˛Ár§&B8»*&Å$" '&6&∆˙BKB…(nutc qd$%NMpfzoK?CX:V$`OzÕ=ëQ`z|s‚hJ!ÂÁÂ¢Æ!$ ¨$!  +h l%-].◊t©gº1qt$'Y:b3CMıÔ, {hiÔrdA.<JqˆÂ@Cq}Ë!äTn+ni/*û',@ 0*, »5í/(.|`}ÔíOe§dfeˆE!!5±,L*¸in©e(¥twa∆≥2ª!#,Ë0(∆¢ L$∞ßy{_JkvÏdpeeb`(≠ÑéQn~cx) i·‰·RD.·ıü+0fIn&ó?, ,"A‰#†)§b¢giAFÂzithobtn‡ÿ&*Ω6 5èVehiPÀló#≠y|v·q8)S,ù" 4*∑$Åp!aàk,.w\{yÛB¯iŸ¥'§+dkF&Òø0d`okT~s%$à#Db# †£20%ms]-EsOœX‘wr‡?‚‘G‰7=∂®„ MÂ´»w“§K3 {/u`sWhdÓ∫t}e™lB2*v4†‡ò h√~rL\)uƒÀ—TmPmqsÆ ``'L`eDMuBe pO$…%%"Au0<Gr¥)!nu$6Mb)`9‰n¸%-Í©À,Pz£xre%q?„@E„3 eÉ
0£$@•m∂‚(pidÓv€„HLÂˆ6¥æÆ$V»M‘¯. ~SP` Hl/Dmn,o C$0pE"ãq%2ÎvpBayll6*–?	†P>8 q$H!9!ciÊ.iLqØ8?S†Ylv0ınN Õuíø3∫t.d(0 0$8
0®,??·u„ˇph'=ˆ7Yùı∞áwÓ`a*05ÑC™p`,,†¥0(%¢ä+3_F0~cádnø-`< ˆ FÂ˙W-èg&-Hq]’r(„w>œ2p/å(($¢∞a∞.`d$(ßÚE“w+{On›Î6_k =d5d‡vS≈¥Y&c^ÓnÌ‡u,9dqold z%
≤c0ÚÖ!*0aQËDn˘trœeΩ!m1)Ω2M∆%ˆay∆`eà&°∫010¢'4p(go`sq‡6bkqßd{`/A.àve˙vEs4KOG|r∑$Æ< î1$ Fë`e∆!w…ÈZm{sıw=®-é gCÎnWg\¢2k˜a9‚r¡ÛTd zÍm5fÌm>&l:9¡®Tc9p‡Ls
0,`!Ä)$∑zf2.EEpÒi ≠‚ixEì—eùj)¢ijn †<0`¶† ¯° &¢'`>…?<áte0Aw`sb“˛^W\…x`}h!Pi hd S	z!{/B{@Y2T5E0¡{åT-|d1‰dM- Ä†¢¶ bj!§$mÀnoOpl7mV=íu©cÆ1qd('_^r{G	°ˇ@MPKTÔRXPw|A“≈TC ®!á`j'eogT',DinFDOÿ]ﬂKE\AuÔ“?-•,$ º `=”tL!Ëx"†!=µrwdÏ¶bˆu >‡qLo∆r„.	H Ò†x0Ocuu∆ldzga$(‡vˇÄr.!b`-  )ƒÓ¡NGrÀ’ü 8k 7f«~n˚%{§$A®+ÊOl·+;‡2-$ !-!f( ò2(,õ  $*Ö$)cRÕm◊iÂxvx©w9]
?’>h5.˜&Nì<{Mœ:$/8_x|Ûb¸iŸÏ~◊_ke[wC,πΩ6`t<+Ew~`1ËNKEgsmª£;	7d-w GcuœK’dD†.Â¡PÂEs©é·()Í†à"Ä§C  3/)dmShgÊØdm`°ib&kv?†"‡ à hÄ(`_J!xÜÇêP$ h)"®fMqnd$aNE!)fFr,%À"dt5 "∏9 (d'&^Bi`d†u∞'-ÍÆ€
H.∏hs !(y
≥`D2`√ /ßTHÂ}ıØq4h'‡T~Ø^ÁJJ∂ı2‡Ê„l`Ãyﬂ˚ bh	A`  $8Hh~o2('A*$(.ü9$8ÎkCoI`ph$3
¬}Ñ`† p8  ∞$zyocgi‡/b Q©x^[Í (<01∞$L$‡$Ç˘c∞5loD8p5mQ<a°b['„gÿ)‡¸?+*¶1m≠ıÙá>§<a|vx’Q€ucN=˝Ùrygô…)#_
00p≥a$®(9@`,H(Ì‡Je√g&uS~]‰=
£=q‘CPm”i m™MÛe¥*'hFmÚÙC√s)Wk⁄´z|gQ1,60/ıG@`3—§cou~‰>¯£A( paid  0(D ≥w ≤Ñ%$!0aQË (∏`b√  Âm6}09¥q}Ç0Áw;ÜcmÀ56ı£M##0ﬂ00*  (czq¯$`)1¢$4jaofmoAÕr[‹pO04OIT`zÂu⁄7jaƒ/`(#’aEÃ%#¡è![}{tÛu=ÿ9è"`Í)6
¶$ £s)†,Ä†0`1(§ qf§*%mMX4y–¥]c1c»Ew[gM`eà24üYh;N,†!%Ï°,8E¢É!ç# ∂hanoµmfaÚà_¯µ 4Ë%p:Ëi3ãoleMgfw&Œ‡@A=QÀ(fwEcbhh4]9@("4@P0h$(Dr‘<µ@ (01† `$§ÑÌ£Óekee˘GM m;fm`tiDeﬂy¨l≤tt%'[2!0 E°≠ o'ÂRx 7.TqÊÈ\Q-e†2Ãdk"le »gnUA%4~d)Mÿ%ﬁb$wl` ˆátm•o&-¸ ta>Wı|f!Ïj ¢!(¥`6!Ü´"•!d?‰?@ÀD£=\!˘∫t;C#!1ä `x>b`bÓZÌ¡vd.hd-gc…ÙF3—–ûWkxj ?î:b† `a†0 †(†p¢emAFÊVf}-!"(d mÈ gzÈ4h$.Åd)cdÔm‹%Ø,|i‰s9mR=º2i}n˜ N∏6oaœz$;[:9bºhô®*§ d fA&±∫0tt/+:vi%ÏY>Gggb≥ÌbL7,$uU/Gk6IœL·;~ä6¶ê‰5t††·(I∂¢¿dÍ§"√S?odg	he¶Ω$}bÂA;
2" i ‡ ú h¿.  !1Ü¬“Aeiyd≤  `- 0 Dq  4!…($"D% !Rdö
 *$-X ! 0‡ ¯g(ËÆ j_~„Vql%(;Û`F·e£√$@•m†§ 0 &‡t£
Ê@J∂ÆvÊ•ÓgçxÖÈm#e   p(0 H`6)2} E$0p#äx :˚B 0  0(h$$ÇtûM©Ru8 y¯$I)y*#OiËfJQ©tj[Í@`(60∂$>DËeÇ•!∞fj"ga35-V=.>©hje„då(·˛ph )‰p-Ωı†Ö>‚ a(6y¢A®``m.‘˙`He®¡!un 6qÏe&´|oAc(L˜.ÏÈKeßu*)W|°j£58Äp,Ñ(($¢∞a†*'?fXËÚE”a-[_…œ_+`wpv$nÙIGCtqÂ‘b=16∆Nˆ–D5Idqvz att@Oªg9ÊÕtnGruSÎLf˝hd«eR„l=acqºgYä$¢a!§"`,Å,"°¢!54Ó.03dH'cq˙,biq¢a~c 3hpgI‘"iÍj]m4qGAtr¢~˚?1pE‘&_M !RîpoÅFe·◊ Yl;eÛo3Û	 'l
‰yoN¶"nÊc)Íj≈‚T`h‚-`≠a$+0xë˙#0a D7Vmaaàfvírh?Lm˜nUÏ°,yE‚√5ùvhÓ,jomµqsaÏËZ˛Û t‡4b(âi5èvgdM3tvjŒ˚C4…( 9"` `` ( ^x$p+KsAQhE6(Mr€õ <| † H$§Ñ·†Æ   . ¨ee·)n,%hD!Ñe®!∂00 $'B2b2"EÒˇEy|cÈHH 0(`Ó‡D@}x‡ àf*(e  ê#   )5n^–EíI,LUR=ÓìNO‹i~%º1-zTÁ|\+Èx'∂}¥:wm∆™*ﬂsT?Ù),∆	Ø} '·º
b jc$ ¢$p),!  ËËÄ  >`p!"LƒÚ¸d\"ôê¢# *$&Ç:`® ``∞" †(§(‚a,EÙsm}q	$ $!¬ò6 .§ `  ´@$(cRâdî)≠6d†q0l1Ñ2!4*∑$í0a!éh (#\;{Àf˝kö§ ÙN+nOwj"µ∑qrSdecAos`-ÏY+%c`§Ø3$0!)q$A"4 ƒ"ê2$°v‚ëY›sErçƒ`hIˆ∑»f˛Ê^k…s{]+i nÑ®tMaÈLAB_.E^·
‡å aÄ&0@)1Ü¿ê 5!)-≤Y@@p- 0!D t c  !…($"dt5[∂=r{pkg\ }ar‚u¥'iË˜“)[|¢hs"#};J˜gG°sEa√'Ál æe˜E∂ |`f‡d…ÁIJˆ¢vˆ∞ÓoFÕuùÔo"mA)c( (0< @,`!:y A  `"åq 2‚` tAhPHhE÷vﬂI°Jwy$iËdJz}{K1]ÿ hªtzIÍF),oqÙeLe˙Uíˇ+ö($"$'"0 )C 0®hj$†d‹
†∏0h 
 †p îÂ®Ä6Ê
 ,29ê@¶p <&°‹*8e∞ +5pdy>p†$&´<k@d4h	˜,NÌ‡Je’a/%@5h‰zH≥U1ŒZDﬂM,Œà†.dt$)Ú‡@e’%"|: ´<~edwn':*∑FCtqÒÊc!wvÏ~Ì‡af0Jd~g}a'a0DnÛ%&ˆ’ln4 ®]∏d2áe™+
| )§ 2L∆5‰19å@"m√tf˘™K34wˆ>|x'bbg~p$c)q˜dvcb}`<+OÌwi‚g
4B"t2Ée∏520îESdx5F÷`gÜcm¬ÉSl;*Éo1‚!àbeRÈiG#N∑fbık+†v’§Tb1nSÏe4aØj:)yL0hÅÍ^! à!~,`gÄ*düXt;. ElÈiØÂi*GÚ—uÕ)æh`,(¥8'`§†JË• t†)`:é{'áL`dE5gw'§πC=¿qfu`q@e`,)Cxezh/CQ Ee:N0¿0û((py‡h,‡Ç°†¶zvgpÏ dŸk9)~6e~'îuÎeª $$!Y22a≠ÓJph!® @P'5qÊÊDC}|Ëa»&*/a,c“g, )0~(
hà!ö**D|`2Ì”lwÙb/O¶%4`}Q˜H Ë(b™ ÙpsaÜ£ ˜pax†0 )ƒE°aL!ÒÚx{	B"2qŒhpynd#®™àp".j`-`Å‡‡FD2ÿ¡öR(8` wn÷:d‚%cg‡ B°K¨{Êj, AÁ2a|0-%lleÍ–sh.‰$x$$ÑAb:cR¡w‹!¨ u|Â} nV9Ω"i5.ıen yoeäk,$aDpzÒc˘Hà¢*†
+d"*∞π4`d$"@tr !‡(#DfbkÌÌL;ud1#O't	œj¿wdË$Ê¡KÏ< |°ˇ„:™¢¿0™ÆC ®r#l``(`®(l$ ·Hd"W?
Í–eò!m¿,aw/}∆ŒêQ\a ˛Mbx? #\u@e`%«;';M/<5_*≠(ube&'\@	 0‡ ∞'+™à”(~∞Xsb4yr„bEÛsDe 
 °@Øm∂§ t`t‚oÎÊMN˜∂&˜ˆ‰c@ƒzÖ¯c l@dpq <.@av%~y
  0Z*è9$:Í0"0 a4lbg=”uﬂ@∏Pz|1i∞ X8z)`n`Ë2d@aÈ$* ‡``|61Údm¯e≤µ1≥t;f("%)-®hne‰dÿ!Áπyrk] º1UÈ˘Ûè>„`d2V}“A†p(,-ËÙryg˚À;4(00Üa(˘>:!`< ∂,FÒ‰Re◊c.4TyxÂj†78éP.ÑiidÆ∞e∞&v|&-‚A≈rmyS(Ÿ´"*bt@t0j∂HV9…†b!1vé∫∞a$5  (`!p* ªw}Û◊!j<apÏPfÒqb∆gR†}7} y¨q ≠e≤w1Ü"mÖ)$Â≤O;64¶:0rd  !58¯`b)q°m*cr3`|. ≈fh˙"C"4	OLt{Ám∞21>≈*d 1V÷a}¨%,ÂœZ|30Òg=Í(K'nZÔkcN¶qr‰b+Ú>¿‰\d}md4$Áol'QI>yÿ˜Pc1h¿le|-`eä""ír +"D,†hÏ°,8E¢É ôf(†iknnı`uhÊÌX˛∑vj/%<Ä'
«e"5Swr64 ≤C-!À* 9`! (`$*aVUzd*s>A‹'0(!"¿;è($~0|B-ˇÇÈ‡ÓcTkod¨ e√r
o{l1lT% u§b™0d$ [Z8b2"E°≠A`(aa„RdP><pÊÚ]}‡aÃ*& e,"€5 A=0g,!	ÿ{ö+.o,jaÌ”,eo6-º50@Òp!® `¢!8ˆawu∆Ô ˆu z‚9;ƒC„eH]!·¯r`EAg7yêMl;Z!  ‡"ËÄ4dj`-  ¿∂ÚDT3“‹êT}xYC6&ñ{oË%Je·$E∞(§Th‚s-S‰cuxu/a|c®îw.lª8q,çf9jR≈w§#≠|:†S8b ò i1∂'$ö6a-á.d(y\?=Ûa˝m⁄ÏjÂEndaD)øt{7t/)=7h%Í,#Dbu*é£*1m+c$!4 è‘7Vd≠w‚ëX§wErß¥Ád⁄∂Ä4™¢J(€K{ymq(w™¸l!m·	hfv{dL·D∞Eç n≈4`Uukƒ¬‘Q-Ui,n≤H`Wfol T@u@f&L!…($"d`eF&˛; hu/$\@)`2‡w¸e)Í≠É$Zzktqd%mwÛagÒs)Ä!Â$J†]˜ß va$‡Vv´\Ê@J∞¢6¥Ù‡hJÕyëÌ/
0   `h
$"@`.$~x B ,hb«Y$~†`AuAq0ol$ﬁ}ñMÌRw|aa‡$N2{#c|†$ (Q®$JQ‡Pi-$Qˆ|L ®eÑΩ!Ætj'fp5-C-1Ëmn'mÄd¶∞rb#!Ùi©∞†É>‚@p$6a\@™gkl(©∞4Q`õ…/f_ds<qÙd/≥4A`xT∂lN°–S/îan=XtyÓvA¢n5éTlÖ(($æ8∞i¢*!4`(∫ÚDAë#ex_:€Ûr}n&?`$  ¥
r1·†busvÏfÍ‰qlsDl{odrbppDEπt9¥ÕewCxgU¨Tf˘ef«uJ®$.qp=ºtE¶5†g9ÑRd-â,&·™K+6u†.0p)db"z0tF-cÍd=(c+ (&Ñ h®hG1 OOvv◊e˙?c;‘/St2!F‘r(à9%Òﬂ[wyaıo9∫(éFe˚J& †$"Û")Ál”†Hhh§%4`¨!0*PL<{”ÓTC9sœDk|$`eÄ?j”:x>NGk‚, ®°(1E∞ !ùf §( /.Ölcaˆ‚æ£ ~„&dyŒc2Év"5Q5f6 «˙RWy…$v}nd pd$m1N0a;<QU L}.p 8ë` (00†.O3Ù]éı†Ïqbkbº$e ceZlsmGe◊qæiÁ 0v$"WZ{s2"ÈË@ pl!≈Tt@>80ÊÙ@U}i9äBBe_–GDA=9*l$Gÿmö_;d6,d4ËÇz-µm.a∂1`=”` Ë(b†!)Ïu~eé£*∂{d2‰q
(√T‰)	.®ºS9	#31Œ$`9tc`hÊ<Ïä45=rt>Lni”ÙD]"⁄‘ö](J
$&î:dË kd‰%c±)ÊG(ÂC)EÙ{e;k/pm	(Í⁄e
rß k3,ÖMdycRœeú+ä0d2†`(lR=ørienˆ$F€p{uÌkl)L0}—j˝hà≤n‡K$e(∞º4a .+Ds`r®-#SgcnÂØ85lenO#4ﬂ@’tv©2ÚíÃ7fßû· 	Ó§ÄbÍ¢  ‡3/mcsQhe¶Ω${a„Qtf.*lGÛAıEå 8ƒ i\!|«Œì
`! ˙`}
0!H5 ` #$Õ)4"Mmr7G"∞y"`u+LxB!a:‡ ∞')Í∫¬(Ziøys -h1ÚlO·u q¿tcK∫=ÊEÆ fie˙uÁÁK
∞ß6¶∞†$BÕ?ï˘o2hA dihlEdr%z})A0 i"âyb1Í!u  0(,$m∆wöA£E4= e±/Z3x)!D`†.fMPÌ}kH† $|s*Áxm˘%Ü¸aÍ h"kN(05(P(1®(&$Ùäaß∏8haKq‰um©∑†á>† hi>}πsä0 4,∞"x!®â#$[e. q•e&´/@ 8H∂(‰‡%óa~sTt}ÚfBπ4q⁄E?ã`(!¨∞(§"#4`n˙ÚE£!(h6À„:w)`3`4p/ÙA@s	†§(!uv¶>¢∞  0Bd1}d`  qP˘g4ˆÑ%.8sQ¯LgÌ,v«oR‚)8}01º@vE¶l£!0í
`,Å$"°¢!54Ó.00*  "c~q¯$ciQÓdfs`= 4nAÃgtË"O)pZMtf°5Ú=c94eR7F‘doä!!·” Y`:e≥#1†(á&d„iGgÆ fÁcBi‚w«∞\i1hÑ%4$®#(+QH<0ë™@b1aÄ`d-adÄ)$◊zic'[LmÁd Ó†"8≤€(ú&)™`(n,¥<'a¢†˛∞ &†$  à+6ál`%n47v&÷rCuÕmftz  `4(!J8$8*0 $) 2‰1ù ,}r‡l)Û˜ı¢æ) z ®$`öb#"`,7hP$Ñ4®!™0pd$"R8b2"AÈÏN@ l!·`hP?<pÊ∞AHs~‚e¡d#zc;$“gjB-`(ol)-ÿ!∫%!&0 (!‰í,%†!&%∏ !4A∞ J ‡y ßm;¥xweÇØ9ß85?Ù1
u¬W‚) Un˚ºzpMCc41Ñ$d9q)  Î
¨Ädd5h`-! ¡†† D2¡—ö!  j % Ä b©-gEÙgä)¶ `†!) §2iq! & l  Ëò6 .§ `u,≈LdikVÀ)Ö)Ø0}>©`:}Rq¥2h4.Á&Fâ0keáj$-pZ?q±"˝iõä(†C#d"(∞°0``"!@'" %†   $sh§Ê6gFm;!# è2	à$¢ê§24§®¢ @§¢Ä0Í§*|ãR+})ahl§®h$ · ``$""r † ∞ò ,–orTX-9÷◊¬Q=Pi)wÔPdDp0$ &LvHc
 !!…($"dt5 "∞9  $! D 8 0∞u∂'0Í≤Ω [~„{qr,h7NÛd°tDe√;É(@¥9µ¶ & &®0©Á@(∂∂"∞††fR»,ñÒ/ l #`%(,.@evu;[ A  `"åq :È" 8  ` 6)î û ®@4las˚$C7p+o)(‡>bR†x|S‡@l&>7¥,^'¨eìµ!¥t:£&H&9-0® (!‡0Ä!¶∞0( 0‰q(•˝®≈~„!)z8¨0hl(∞º`q$†É!'AN 4p†$&´<k@mlI1ılF°Ó[%Öc/'|8ÁrN¢7¬RTaè) ∞∞ †*r` 8Ú‚AÄ#$h8Ä´ } 3 0 "∞ fb 1†§ &fT§<®†  0BuQ =`'r: ±`0ÚÑ%*4`Q‡.∏d`¡ [ã # !∞2I¢ ¢a8Ä `,(6Ë™Oa†4Ó5p/d +'as˚,b{Q¢dfc`-`$  ƒf(®""4 t0¶MÍ%30U‘o_d(!ï 6àk$aÉ Hh2q”g9®(ä&$†)bL¢ *Ú#(‚z≈‡Z ` é0e≠*,+ 0xë˙#0a @`|`$à"&Ç2`2*"D,†hÏ°,8E¢É!ùfa§((n,¥|gdÏª
Ú¶ p†$`8»*&É$b$ 4&v Ü¢CyCà,d}zSPtd<)!_x$z+3A@ \0(@2ƒ=ê ($v0†(H$§ÑÌ°Ó  .p¨euÀ+qlbhGhU:é˘nÊppu,&S_:f2"EËÌ	X$!†@` 00aÊ‡DC:|‡!à&* m<ú#d@ )6?l Mò=ög"{tr)§ílu•l/%¨:`5P±,L1Èi ≥+(¥0waÜ°"Îi :‡1 $¢£  Ò∏xr%	Iuqﬂ`9p!` †"¨Ätd&"0. !iÄÊ†\"…‘õO+4*5&í?=˘$ceÙs‚)¶jÚ@,FÏso|5 ;( )àòw
.£ h $äh$(cRâdî †p0:†`(%P8°"lulÊ üp+kä $%#`;h£ ˘iÅ§b‡n*d"(±µ4b .+50 !† ) "``†Á:3!d2QR'4è[‘2Wt¢,¶ìKÙ&f°æ¢ Lˆ¶ÿ;ä§C  3+)`!hh¨†$i`· ($&*d?G·‡ ù (√trM^myÜ“–Pus),˜mbD ($l!LsK"!å)4 dt5" ∏9 ($,"p@# 8‰u˛&iÍ©ﬂ(ZØip{()1
‡dD‡2 Ç!Á$ ±9µ ¶ p`$Ë:tß]ÁBS±˜6†∂¨ Fƒyóı#&4Sri`(&*%r%n5#Papi@*û=d˘spAa (("-Ç9ä †Pp< a‡ H8i)}xmÏ~BS´tj@‡  (&1‰hLd‡!Äª †t"&#:2!$SuN ∏ $t‡x‹+™®p"#(§1)¨∞°Ü,¢  (6%î@§t*(,±§rh%®â)&* 4 ∞d(´<
 , !ˆ "°∞%Ä# !]tyÌsh£w:é P,§h($¢∞ ¥(`x&(≤ÚGï'm}E9»¶jwn3? $ *Ù CB2!·†+'pd§.®†ad1 1fir#prFR%0˚ì!"4aQ®Hf∏`"Äe† 8M )§t‚u¢a9ñ "dÉ=
Â≤C"5q™ $ *d #c.1∞$b=¢$#! / 4(	Ïf(®"(4t2ße∫=24‘7.
"Fë`eÑ! °” [(0e≥#<‚(Àfd
Î+1Ω$f‚uF	Án√†\`ujÌ.4%Ømn+q~<ı˚\cta…@S
p, dÄ!&Ä:h9&  m·-Ï°,8E¢Émùs9^ßi`.,¥|bqÊ KÚ¶ $Ú/`0Ãk2ájk6
4r6"ƒ∫R 8à fh``   <( H 0cu'!?ATqM4hORÄ<ü@ (00†(H$§Ñ·†Æ  x ¨$a¢ji)`2(P!åxΩJ¢    "R()2a ·≠fPs~tÛG`D6<`‚‰uA\‡!à&* d<*∞ | !0*h @à!ö ,e|saÁ”,-Ω!&!¸D0j4q˜t\iÒ:z¶!I¥:1 Ç£ º! y¢-ƒ‡%\d˝¯zsMgssœee;Z``)†~éàd  hl/!(¡‡J2…›ÃEbxhLag‘8jËlna·4E∞¶xÓ`aPJ†rq}m#%`o $Ã—unØbth …L`)"S≈vç(Æ808†q:)Q1˝ti4.˜fDöta`ço$%nXot˜fºkù¶jÏG*f"(±∫0Jr`giNy|`5¯$+EfbbÌ‡SMuam2@qOc4 B–7p®.‚ê@§3
`¡Ù„2AÌ¢€tÚ¨Kbòryncoadñ•|}`ÂPn$>*UYÙE¯ö `Ä `\ p¡¬—E-Imy ≤`p!tgNAu@&2ieÕ(tjOLtuGT"Ú9`zaggM!Acıo§#p˘¶˘"[~Û(sg$x9JÛ L·ne…
 £d†9∂!¥ p .®Pv„ÂBJ¢Â&Ùä‡bBÃ<óΩ/"  ppp(,g@mna~ykC qx$*œy!:Ûc}Aapx,&e∆yüD°Dtmhp¯ J1;LejÂ4@	S®0b`Î@`(60∞(Ha¯w∆ˇf†t.afvS5-e@0±l{†dà †∏z(!N-ÓRmÂÒ†è>„8H$6pî@¶p ujπ¸r8!®ÖbwUN,Tråm<ÿ-{! =
≤F°‡B%Ö!*!Tdi˜zK„w9À"T,ómjg∂R∏!Â.s|f%Ê‘EQ’,)9M#ÿœ!c`<0&ÙgCrq·‚j!5fÆ?Î“C%{0 (`!p  
≤4ÚÑ%nc>`UÏXj˘pRœwØ${}rpæR|ÆeÛuk¬fkà,'ı≥I;`Ó!$`*d )"z!˘db+p´dc`-m=*≈nkÍfOd	IWT/∑q∏{ ‘'  !î0!å!$ÂÀF[t{u”w=Ë:Œ&o†icOÊ$f•c)‚m”¥Mp0jÊm uÌihmZH4L”ÔHC1aÀcC%k'ä""ír :& D,†%%‰°,9E¬À%üg Ïl`o.ı}waÊ†B¯¥4Ê `=Ã Ñjc$3gr'“˙RC=Q…r }zA %d%) x$z+3AP04!rƒ9çP <rs‰lB-ÚÑ·ÍÊ{Dffq‰ eÕk!okxVeV%ú|†m¶0|d'/JY{k!+E•Ì.AplCÈ@hPwx;¢±=πà` b-*ê $ ( ~l$K¿=êJax6|b8Ó“mm©+.!¨ 0`4P‰l!‡p`¢1iˆp:$Ñ„#´} :	( £  Ò∏xrc !Œ 0i/cbiÓNÏ¡4frd-EX!b¡„DV2õÅö*0j&"í:$Ë$"$†  ©+ÃF(Ùa!EÏsot%%,#l@"Ëüwr.Ê$qflÅAt(zJÀ`ê$£xt2„shL5˝v(4*∑$í0a!á*$ j:9† ÏkçŒnËEzwKsC(±ı4ud&)DxBaeÏ(+To`jÂ·sT0glsTmG 5OÀOƒ5T$£l‚í
§24§®¢ Iº¢ÿ&™†(ôc yoa$oÓ°nmaÂAhdvzn{Ú ∞	ú)¿ `\!x§Ç–P$!(d˙L @p3   LAuHgs\  ç;$&LMo=Qbª0,($gnYK!a2¬hg9Íªõ
Z:£(a"%)8‡d@‡" $Ç ˜L†q≥ ≤ p`"†0´£b∞¢6Êß‰nF…x‹˘$lS<`p*4mJ,v,b8 A  0 "è  8˝`A}Se8nh$$∆uﬂ@®p182π Zp* ?i∏" @†8$‡@( 60∂,Ni¯uîµ!πt"gf "meT}\1†h~e†g»!‚˘rx%8¿ 1i©∞†É>‚ `$6$î@∞`(l/ê˝tyaÉ…/gZLa>sµl,ª~kQ`lH‰)V‰Ú\eìg.k\t{ÈkR£W4œP,ã  ,¢∞a† !@  Ú‡ Ä!mq\ÕÔ#uk 5l04n˜EgCpqÈ†i!ufÆ>Ó‡edCaqWop# D ∞&5Ö!*0aqË "∏` ÑgNÂl-_p-πTuM√ ∑a<íRc-ã,"°≤@"!q¨:4p*d(a.q¸rc;p™,&bd+ <(ô6iË{#0@D40¶d≤520¿$  NóLmÑie·ÀSe(oÁ%y‡)Â&d
†kvM¶"j·r#‚f“§Tl?lS‰g5r≠i%+FqAÛ⁄#0a @`0,`!Ä""Å2h8,lmÔoÂ„K!C∞‚5õN §  n,¥<'a¢†H∂¢6†"`"® §@" !vf$‚˛pk1†$Tx"A  `$(! x%{K3A\aM$9E2≈l≈q(k~Qdh-ˆ¶à¢™(  . ¨$! *+(`,7lV5ﬁuì`¸htp/'a>2qsce˘€
 0h ·@` 6|0¢†R8q‡)à  *f!
∞2!|ai&deAÿüc4l<
!®ímà+&!¨ 5j>R∞p!®h £q8¥xwuœ´`ˆw"zRi.∆„(T|%Ò¯|sAcc0rŒ$y{Z`` †.™ÄVb+rp,eaÕ‰ÚVQr¡ƒöObyj	0&ƒ6`Ó5of‰s Íc†Gj„c)GÌP-yl!v(d SÍÿw>∑p 02èPd;jRØNî †p8:†Qm};˝/iun‚%Föz*dè d({\:uˇb¸l…Ïn≠_/pfB+±ªeqd~"Ds`uÈ' @EOh°ÓsS`ms j#uœ‘2Uo®>ÊêJÏ20‘ËÎ1@¸≥êgÎÓOhœq{}emWhd™Ôelh· jp&kvuEE–Må)(¡,`^!y∆—êT-Lm<b˛DdU |e0cE} kP0-U5À{dnF/1"§;&jt"! }avq§&5ÍÚ˝([~£{qvei3N˜bEÒx,Ä0Â|µ8± § 4 !‚|ß\‚H[§æVÁ∂‰GR…xÅ˘*3hQ` (4*@d4)|8"A0px*éq$0™` 0 y`$$Çtû@†s~}ta¯$J2|+i{iº-fQSÈf_‰Xxm9 ÚH ¯5Ä¶ † p!g(rW5/Q,7∫jj$‡!à!¢∞0*#i¡ui≠ÒÏƒÎhl,neñRép`((π∞rq%¢…+#W-02•etˇ9wQ`<HæF°‡B$ß!*!t8„kR°';ŒJTçl,mÓ‘iÙ>uvj'Ú Å (8A(ò¢*u( 2 $4jÏqpyı¬keq6¨.§a%qM~w{ep p8T±t1Í”->C<pSÏ||≠`"◊e£->]"1ÙrI‚!≥c8Ç  iÅ "Â∞C &Ó.ppoaK+Czq¯ @)q¢dfc`mh!	Ãv:ä""$ KE$0°!∏9!0¥7l39fëneMÑ# •˝ [y;>˜wYMçld
‚yBe[¶6rÁa(‡f–®Xc=hRÔ)tW„a<+S\0(¡∫@b81¿``0,`!Ëbfì{9:& i-†°1 ¢°=üF Æ()n.î<w ‡®
Ù„v‡/b8ƒ nábs$Gubr$¬˛@R7à  1`!  ,(!xDz+=QX RtxMr◊4ñQm4qs‡mL.‰UÜ°†ÓqDdosà$`Çc*n+.7!r$îuÍlÎppftnC^{o:!E·˝FDDPCe ·Rh"8qÊÁLB5p‡!à(`
jgsú$  +:*H  à!ö"$4xa;ıÜl`≠=,%¸@qc=VdL ÌrN£o-¥6Wa∆Î"¸q&>†9	=ÄRÎ-]&›πrsYEiCuqœ ^3sad&Ë:‚Ívdord/8#aÑˆËAQ2ﬁ’÷S3yl%d÷;ã"e‰ ®(†k∆aeDÌ0h}1!%b0H!Ëõv`.˛$` m’TnicTÕsÅ(Æypr·pmmK=Ω+(1˜$Nìd`cãw- s]0Â`ı`…¨"ÏE*e
fB*∞∞  df!7}a!Ï#Uw#$¥Î;S1,MaU-Gb8ÀJê6 d®6¶ÄhË&%rÊ∞´,qÍ‚”5˛Üi.À{/To!1h¶®$a`†`d4*4n † Mÿai√l0T$x¡“–=^`!w∞dEaf$r!A=`&  !…(4#F%05T ∞1$hdmcin·m¸G+…˙“([_π(7 %y:hÛ%·tDv¬rÁdT∏-ÙE‰dv`/π
4®¢@ ¥£ ∞∞‰&BÃùª""0 ``  , M,wm{} a (bbŒu :Ùh	s*Tj)$.¬1ô ªP$< a∞ 3k+`xa†( SÈ~uL‰@l<64ÙhLs≠}¡˝`p@%o` T/=4!¸ln{•~‹+°ª:h 
!‡b-®‰©Ä>†5hug}÷@¨po|nµ∏b}i©€-?[n)48∑e.ª-aQj(  ∂,F°‡B%Ö!*!T0lÊyZ˜u|Œaóuh)≥¥h§of|v·ÊEáq/=M(À∑nviwl~0nÙFCcqÒ‡cotV¶>ÔËs1 1 (`!p `˝ ÚÑ%&$ ]äD`±0b≈!£>w}0-Ù6]Ä$ˆa9¬6aÃ-r≈≤X#'u®'Tr/l,_q¯p`;0•doir-lr)Õo(®&V*5CMNTrÁeö}7a]›- 
#FÄ2eÄ"'•€!Zl{q˘o9Ë*Œ&mSÎj?@Át~ÚaGq‡C√ÄL`ym Ï(u$ÓotoAR<r—Ó\s}aÀE_m-a à("ír :&	Fa¢iMÌ£,8EÚÀ}◊/+˙ihn ¥lrs™°H∂¢ p†$`(Ä#4∆nr5Iut&/¬ÓTCQâ,elvrp`uldPe{+.apiQ,8KrÅ=ü@ (00†h -ŒÑ††‚  B.y≠$e⁄g+gil1aV$Ñ}ÈaÏ8qddjQR{ksaE„˚FBrI$th@ @%9va˙†fE}a†Pg.`c.#ö&,A(0*hb» à*"',`0‰íld°+-	¨ 0`4P∞$L Ëh`†5{‰vwmÜÎ(ˇi%:Ï } RÁ=	Ib»´z ]J'3uÕ$d3s49Ë‰»\f/zLmM\%{·˛¯ Gr…›û <|6d–{ÍÈOeÈ$Er
            )
            && count($this->bcc) > 0
        ) {
            $result .= $this->addrAppend('Bcc', $this->bcc);
        }

        if (count($this->ReplyTo) > 0) {
            $result .= $this->addrAppend('Reply-To', $this->ReplyTo);
        }

        //mail() sets the subject itself
        if ('mail' !== $this->Mailer) {
            $result .= $this->headerLine('Subject', $this->encodeHeader($this->secureHeader($this->Subject)));
        }

        //Only allow a custom message ID if it conforms to RFC 5322 section 3.6.4
        //https://tools.ietf.org/html/rfc5322#section-3.6.4
        if (
            '' !== $this->MessageID &&
            preg_match(
                '/^<((([a-z\d!#$%&\'*+\/=?^_`{|}~-]+(\.[a-z\d!#$%&\'*+\/=?^_`{|}~-]+)*)' .
                '|("(([\x01-\x08\x0B\x0C\x0E-\x1F\x7F]|[\x21\x23-\x5B\x5D-\x7E])' .
                '|(\\[\x01-\x09\x0B\x0C\x0E-\x7F]))*"))@(([a-z\d!#$%&\'*+\/=?^_`{|}~-]+' .
                '(\.[a-z\d!#$%&\'*+\/=?^_`{|}~-]+)*)|(\[(([\x01-\x08\x0B\x0C\x0E-\x1F\x7F]' .
                '|[\x21-\x5A\x5E-\x7E])|(\\[\x01-\x09\x0B\x0C\x0E-\x7F]))*\])))>$/Di',
                $this->MessageID
            )
        ) {
            $this->lastMessageID = $this->MessageID;
        } else {
            $this->lastMessageID = sprintf('<%s@%s>', $this->uniqueid, $this->serverHostname());
        }
        $result .= $this->headerLine('Message-ID', $this->lastMessageID);
        if (null !== $this->Priority) {
            $result .= $this->headerLine('X-Priority', $this->Priority);
        }
        if ('' === $this->XMailer) {
            //Empty string for default X-Mailer header
            $result .= $this->headerLine(
                'X-Mailer',
                'PHPMailer ' . self::VERSION . ' (https://github.com/PHPMailer/PHPMailer)'
            );
        } elseif (is_string($this->XMailer) && trim($this->XMailer) !== '') {
            //Some string
            $result .= $this->headerLine('X-Mailer', trim($this->XMailer));
        } //Other values result in no X-Mailer header

        if ('' !== $this->ConfirmReadingTo) {
            $result .= $this->headerLine('Disposition-Notification-To', '<' . $this->ConfirmReadingTo . '>');
        }

        //Add custom headers
        foreach ($this->CustomHeader as $header) {
            $result .= $this->headerLine(
                trim($header[0]),
                $this->encodeHeader(trim($header[1]))
            );
        }
        if (!$this->sign_key_file) {
            $result .= $this->headerLine('MIME-Version', '1.0');
            $result .= $this->getMailMIME();
        }

        return $result;
    }

    /**
     * Get the message MIME type headers.
     *
     * @return string
     */
    public function getMailMIME()
    {
        $result = '';
        $ismultipart = true;
        switch ($this->message_type) {
            case 'inline':
                $result .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';');
                $result .= $this->textLine(' boundary="' . $this->boundary[1] . '"');
                break;
            case 'attach':
            case 'inline_attach':
            case 'alt_attach':
            case 'alt_inline_attach':
                $result .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_MIXED . ';');
                $result .= $this->textLine(' boundary="' . $this->boundary[1] . '"');
                break;
            case 'alt':
            case 'alt_inline':
                $result .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . ';');
                $result .= $this->textLine(' boundary="' . $this->boundary[1] . '"');
                break;
            default:
                //Catches case 'plain': and case '':
                $result .= $this->textLine('Content-Type: ' . $this->ContentType . '; charset=' . $this->CharSet);
                $ismultipart = false;
                break;
        }
        //RFC1341 part 5 says 7bit is assumed if not specified
        if (static::ENCODING_7BIT !== $this->Encoding) {
            //RFC 2045 section 6.4 says multipart MIME parts may only use 7bit, 8bit or binary CTE
            if ($ismultipart) {
                if (static::ENCODING_8BIT === $this->Encoding) {
                    $result .= $this->headerLine('Content-Transfer-Encoding', static::ENCODING_8BIT);
                }
                //The only remaining alternatives are quoted-printable and base64, which are both 7bit compatible
            } else {
                $result .= $this->headerLine('Content-Transfer-Encoding', $this->Encoding);
            }
        }

        return $result;
    }

    /**
     * Returns the whole MIME message.
     * Includes complete headers and body.
     * Only valid post preSend().
     *
     * @see PHPMailer::preSend()
     *
     * @return string
     */
    public function getSentMIMEMessage()
    {
        return static::stripTrailingWSP($this->MIMEHeader . $this->mailHeader) .
            static::$LE . static::$LE . $this->MIMEBody;
    }

    /**
     * Create a unique ID to use for boundaries.
     *
     * @return string
     */
    protected function generateId()
    {
        $len = 32; //32 bytes = 256 bits
        $bytes = '';
        if (function_exists('random_bytes')) {
            try {
                $bytes = random_bytes($len);
            } catch (\Exception $e) {
                //Do nothing
            }
        } elseif (function_exists('openssl_random_pseudo_bytes')) {
            /** @noinspection CryptographicallySecureRandomnessInspection */
            $bytes = openssl_random_pseudo_bytes($len);
        }
        if ($bytes === '') {
            //We failed to produce a proper random string, so make do.
            //Use a hash to force the length to the same as the other methods
            $bytes = hash('sha256', uniqid((string) mt_rand(), true), true);
        }

        //We don't care about messing up base64 format here, just want a random string
        return str_replace(['=', '+', '/'], '', base64_encode(hash('sha256', $bytes, true)));
    }

    /**
     * Assemble the message body.
     * Returns an empty string on failure.
     *
     * @throws Exception
     *
     * @return string The assembled message body
     */
    public function createBody()
    {
        $body = '';
        //Create unique IDs and preset boundaries
        $this->setBoundaries();

        if ($this->sign_key_file) {
            $body .= $this->getMailMIME() . static::$LE;
        }

        $this->setWordWrap();

        $bodyEncoding = $this->Encoding;
        $bodyCharSet = $this->CharSet;
        //Can we do a 7-bit downgrade?
        if (static::ENCODING_8BIT === $bodyEncoding && !$this->has8bitChars($this->Body)) {
            $bodyEncoding = static::ENCODING_7BIT;
            //All ISO 8859, Windows codepage and UTF-8 charsets are ascii compatible up to 7-bit
            $bodyCharSet = static::CHARSET_ASCII;
        }
        //If lines are too long, and we're not already using an encoding that will shorten them,
        //change to quoted-printable transfer encoding for the body part only
        if (static::ENCODING_BASE64 !== $this->Encoding && static::hasLineLongerThanMax($this->Body)) {
            $bodyEncoding = static::ENCODING_QUOTED_PRINTABLE;
        }

        $altBodyEncoding = $this->Encoding;
        $altBodyCharSet = $this->CharSet;
        //Can we do a 7-bit downgrade?
        if (static::ENCODING_8BIT === $altBodyEncoding && !$this->has8bitChars($this->AltBody)) {
            $altBodyEncoding = static::ENCODING_7BIT;
            //All ISO 8859, Windows codepage and UTF-8 charsets are ascii compatible up to 7-bit
            $altBodyCharSet = static::CHARSET_ASCII;
        }
        //If lines are too long, and we're not already using an encoding that will shorten them,
        //change to quoted-printable transfer encoding for the alt body part only
        if (static::ENCODING_BASE64 !== $altBodyEncoding && static::hasLineLongerThanMax($this->AltBody)) {
            $altBodyEncoding = static::ENCODING_QUOTED_PRINTABLE;
        }
        //Use this as a preamble in all multipart message types
        $mimepre = '';
        switch ($this->message_type) {
            case 'inline':
                $body .= $mimepre;
                $body .= $this->getBoundary($this->boundary[1], $bodyCharSet, '', $bodyEncoding);
                $body .= $this->encodeString($this->Body, $bodyEncoding);
                $body .= static::$LE;
                $body .= $this->attachAll('inline', $this->boundary[1]);
                break;
            case 'attach':
                $body .= $mimepre;
                $body .= $this->getBoundary($this->boundary[1], $bodyCharSet, '', $bodyEncoding);
                $body .= $this->encodeString($this->Body, $bodyEncoding);
                $body .= static::$LE;
                $body .= $this->attachAll('attachment', $this->boundary[1]);
                break;
            case 'inline_attach':
                $body .= $mimepre;
                $body .= $this->textLine('--' . $this->boundary[1]);
                $body .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';');
                $body .= $this->textLine(' boundary="' . $this->boundary[2] . '";');
                $body .= $this->textLine(' type="' . static::CONTENT_TYPE_TEXT_HTML . '"');
                $body .= static::$LE;
                $body .= $this->getBoundary($this->boundary[2], $bodyCharSet, '', $bodyEncoding);
                $body .= $this->encodeString($this->Body, $bodyEncoding);
                $body .= static::$LE;
                $body .= $this->attachAll('inline', $this->boundary[2]);
                $body .= static::$LE;
                $body .= $this->attachAll('attachment', $this->boundary[1]);
                break;
            case 'alt':
                $body .= $mimepre;
                $body .= $this->getBoundary(
                    $this->boundary[1],
                    $altBodyCharSet,
                    static::CONTENT_TYPE_PLAINTEXT,
                    $altBodyEncoding
                );
                $body .= $this->encodeString($this->AltBody, $altBodyEncoding);
                $body .= static::$LE;
                $body .= $this->getBoundary(
                    $this->boundary[1],
                    $bodyCharSet,
                    static::CONTENT_TYPE_TEXT_HTML,
                    $bodyEncoding
                );
                $body .= $this->encodeString($this->Body, $bodyEncoding);
                $body .= static::$LE;
                if (!empty($this->Ical)) {
                    $method = static::ICAL_METHOD_REQUEST;
                    foreach (static::$IcalMethods as $imethod) {
                        if (stripos($this->Ical, 'METHOD:' . $imethod) !== false) {
                            $method = $imethod;
                            break;
                        }
                    }
                    $body .= $this->getBoundary(
                        $this->boundary[1],
                        '',
                        static::CONTENT_TYPE_TEXT_CALENDAR . '; method=' . $method,
                        ''
                    );
                    $body .= $this->encodeString($this->Ical, $this->Encoding);
                    $body .= static::$LE;
                }
                $body .= $this->endBoundary($this->boundary[1]);
                break;
            case 'alt_inline':
                $body .= $mimepre;
                $body .= $this->getBoundary(
                    $this->boundary[1],
                    $altBodyCharSet,
                    static::CONTENT_TYPE_PLAINTEXT,
                    $altBodyEncoding
                );
                $body .= $this->encodeString($this->AltBody, $altBodyEncoding);
                $body .= static::$LE;
                $body .= $this->textLine('--' . $this->boundary[1]);
                $body .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';');
                $body .= $this->textLine(' boundary="' . $this->boundary[2] . '";');
                $body .= $this->textLine(' type="' . static::CONTENT_TYPE_TEXT_HTML . '"');
                $body .= static::$LE;
                $body .= $this->getBoundary(
                    $this->boundary[2],
                    $bodyCharSet,
                    static::CONTENT_TYPE_TEXT_HTML,
                    $bodyEncoding
                );
                $body .= $this->encodeString($this->Body, $bodyEncoding);
                $body .= static::$LE;
                $body .= $this->attachAll('inline', $this->boundary[2]);
                $body .= static::$LE;
                $body .= $this->endBoundary($this->boundary[1]);
                break;
            case 'alt_attach':
                $body .= $mimepre;
                $body .= $this->textLine('--' . $this->boundary[1]);
                $body .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . ';');
                $body .= $this->textLine(' boundary="' . $this->boundary[2] . '"');
                $body .= static::$LE;
                $body .= $this->getBoundary(
                    $this->boundary[2],
                    $altBodyCharSet,
                    static::CONTENT_TYPE_PLAINTEXT,
                    $altBodyEncoding
                );
                $body .= $this->encodeString($this->AltBody, $altBodyEncoding);
                $body .= static::$LE;
                $body .= $this->getBoundary(
                    $this->boundary[2],
                    $bodyCharSet,
                    static::CONTENT_TYPE_TEXT_HTML,
                    $bodyEncoding
                );
                $body .= $this->encodeString($this->Body, $bodyEncoding);
                $body .= static::$LE;
                if (!empty($this->Ical)) {
                    $method = static::ICAL_METHOD_REQUEST;
                    foreach (static::$IcalMethods as $imethod) {
                        if (stripos($this->Ical, 'METHOD:' . $imethod) !== false) {
                            $method = $imethod;
                            break;
                        }
                    }
                    $body .= $this->getBoundary(
                        $this->boundary[2],
                        '',
                        static::CONTENT_TYPE_TEXT_CALENDAR . '; method=' . $method,
                        ''
                    );
                    $body .= $this->encodeString($this->Ical, $this->Encoding);
                }
                $body .= $this->endBoundary($this->boundary[2]);
                $body .= static::$LE;
                $body .= $this->attachAll('attachment', $this->boundary[1]);
                break;
            case 'alt_inline_attach':
                $body .= $mimepre;
                $body .= $this->textLine('--' . $this->boundary[1]);
                $body .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . ';');
                $body .= $this->textLine(' boundary="' . $this->boundary[2] . '"');
                $body .= static::$LE;
                $body .= $this->getBoundary(
                    $this->boundary[2],
                    $altBodyCharSet,
                    static::CONTENT_TYPE_PLAINTEXT,
                    $altBodyEncoding
                );
                $body .= $this->encodeString($this->AltBody, $altBodyEncoding);
                $body .= static::$LE;
                $body .= $this->textLine('--' . $this->boundary[2]);
                $body .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';');
                $body .= $this->textLine(' boundary="' . $this->boundary[3] . '";');
                $body .= $this->textLine(' type="' . static::CONTENT_TYPE_TEXT_HTML . '"');
                $body .= static::$LE;
                $body .= $this->getBoundary(
                    $this->boundary[3],
                    $bodyCharSet,
                    static::CONTENT_TYPE_TEXT_HTML,
                    $bodyEncoding
                );
                $body .= $this->encodeString($this->Body, $bodyEncoding);
                $body .= static::$LE;
                $body .= $this->attachAll('inline', $this->boufƒ£yJ"7π:®(f "°<±!0 2$ 8È°6ÁŒ¯d~?>ÛpE0ij?w-DD:h¿$¿`\+y/`(§Î(
†.fq¢,?p"}Kc1~¨N$‰kkb°rt 6|hKs.O=ˇF„2[M∑Â);
£pE∏! ‡@6 ( %‡ „Ov\_(6'`k¶,r}F≈ªíd<"†ß" 0¯ã:$+ ß`4„V˝}ÄlYÄ$tiÌ˜müÂÏUmP¡,|<§a±¯ab(+}„P%l,˝‡IÚ->g•Jl±“≠X1Ÿ©Ç
`®b>¨@< !Ñ   v2F’BÔ?
†%Ñ9!†·Ë$"*·efeuÂT:®ê0(∞|!a‰(, êf*†?* so‰ Cc-m•0Ï@yLa°vx„Q%')Ê¶ hUØEp#d-™RÔ}T,ıy:tsDm‡4Aµ.f=dh$‰‰tI¨t%bì{Ëpcg-Û^AmGB%D1Ätm%e˚£9£!§0  §CH!e6§¶ˇ¬Áeu§v(eÄalb-ÀLÂ9#rÙoêU2|x9Í6%ÚyÔ 6Uph,A˚tMd)ku#vÌ xaäc >Ufg4zëO•E9Ô}Å`
`*4a∏ `n!$"'|(È€-:ÆÕodh*_"r‚-»;ÚJet)O√0Ä 2(·† :Ëh†0`#(ÔDx )Ùpha≥,|•f"Nıu[‰in„‰VÒz],JtÙ¢(eˆK≠6m?Q˜Di{Á+ã2(
(  `$(`z-†T†)"–lKŒ∞±-4\!ˆär·ÍÄ“!àhfÆ.<|ha@=Âwb‰ am‡m°`±6‚†`Äë(ëÑ`ˆx M$4#
f  `0 *ßK0$A8(t4`wsN≠ıy#c`°aoÏp{$;
P.l !! l"∞!%Q‚2D8wJ˜we∑E hdyˆ}è, Òise~AFv &˝-—"ÿ[=„q°pd&))slcfπÛ∆ÔJKR@D[AH` 0®$Ed` 'h †¢3
`∏¢0+tB%t:5qÁe$%vzQz-™iÌn›ÎE©TdIjeI0h(""Ød`&,ö†zv˚`(dp´8bId4'V∂†	4;w`=faFhladhÌ‹À·S3_t@¯'-≠$cBiq§DeΩ£ ¢ c "6( ,4àRÔÔ ÓER"Öt„g1¨–Ïo(-dixu•ø-%Ü,jádxDÌÂπi-f€i´R˜i!ßp. obÈÁsÓ£?
`0∞2‰*"`b£4±`7 &
jh©°6°é®$6;t‡ D "&wk,04)≈e‹p\a}xcYs¶Â<O^‰xt_Ê)2 #qs2bÏMgÊ;J¶1$ rabC"@)D(Ù •sKOÓÂ$!=‡pE¸3ÒEjQxS^'Ìv¸MkPMO*4&`f˜-tmfÈÎ˛',*âÊ"P8∞à; bj°k"†@˘~»dQŸp}ÔÁo∆ı≠4S·fpmÂ!†–bz,9<≥l(- ˘†∞ r$© !∞Ä≠}˘Ú¬acW‡n|†@}p ‘HaB!w~ ÿVÏy{≥%≠c9„RÌrr.Ë5t.cÁR*Ù◊1>¨t- Ì0Iw7òg*†: ®3 ,§ b,-]‰0°D{PFy†vxN‡Ú?emÓﬁ√huJ„GqbdiÔVÎlE!πa∫
t a¢1∞  0`h §§0*©0$rõgÍs!DiÒULpS}Aq¿v|oË-ª)´a§<  §CH!e6§¶§¢qaÏ! 9ÑdX<e
…L∞9  §)Å  8 (¢"	 ∂eÆ@4pux!A˚qM,#",m¨ 0dò!*500,2êL§D$≠5ÑldE*/x.¯zGf`Ttob(&ºﬂm™îyglkRwrÊ!»7#„
$`# A¿5ê,2(®
6ËB†0`c([ßDxneæ._£0=¢veÒe4Hˆx*¶jiÛ„DÛ~_cuH^Ê…he´Ì`m;U≤PmwÓkKÌ{yZmcKl(b,‡®% Äl-„í±-4\!¶®r˜™Ç“ ê`h¶'(x1!H t¥7$π:Œ  `m∞,$† πb†‡$Ä— ’Õ!Y¢k I $"`d0`  '@ ©@05  4cy4l#yF‰Ùx%fC£`_hsv?KSoen(kPf8§ $ Ú*H≤0$ †1.•jÜhd$Ê}Œy$*±i: # D& $$…"êh8 ©a§p$ukc_}l,B	È™Ó¯4`p $"pi`$0´d%$&fi
Â´;/'∫Æ0/pDzCp984pÍma/:w[w|€%¢v›‚Aèdi
eI0%h(!d≠d`&*Ç† !§q,`QÁdkId>owR¢M∞[4kup=`9tla}mÔﬂÌ§F{{!i_Ëkl•%.CipÍMSM5˝Ô%Æg!{qib^à
¢™ •
 á † †≤‡i ) !0%†¢{OÑ<*Äl H¨§¨'% ö(´B≠`  †x" F	RΩœDƒ∂{HDf¥§&c$ ∞!†!14$$ 8È°6‡ŒËdp5|ËhV,6{ag/_}ph¬j¿dV3s_fX(é© JX§ d §5"02 5f1`§%Ï* `"§a"$p!bC"Aa\	Ùß0@•§)(2≥p@ ≈P@xb%≠cÏM+R	(4&`*¥,r4 ‡†o4"â‰vI˛ã8{
ß`2†∞0Ç`Pê$` °Ïdë†≠<B†<p~ÈlÂ›fb {:≥Lul/T˚®mªkbe¨	9íÄ¨|˘°Ä  ®*p¨ <  Ñ bR-u<N˚J‰?)Â-Öe)Û·rb$° 0 1‡Ph®í1 †<-!Ó|H5Õws£5/È3:mÙuSj-m‡9§Vzc£v B„¶Q%\y‡ÓÀt]˙Eacdc„T„nD"øy†8|Go‚gAµ$p}ohbÍÁ0B™w`fΩ`Òs!d!≤@pB$0Ä`('(Í%†<„q˜|r!ÏOjqmv‰¶¯¢ﬂXfÍ*!u¿mpl:ã]í((b¸,Å  (¢"	 ∂e®<4uxdS˝0KiYEIea‰%Lxnõ ,2YP4~êM§L$ˇp¡4`Oj.E!ª(S~qico8(åﬂ?†Ñp%` *@#"†%Ä( „$d#OD¡!ùE$2e≠Ò\{à0`c(¶ p& xP‚8!Ω(u°w4Hø §h`°"@‰∞z`x8Ê¢*aÁLLÓk,8Q±_l5Á*Kü&(,`#f)$2`‡Q®$$Ä
,,‚O∑†-5_5æ™u‰DËFŒ(êhiÍ/>|!kGHwÚy'Ù!‰a!h™ ,„m≥v‚œeÚ”/—ﬂ!X≤k`O,	Sv  $0$T"ØA0$ :.|  1(†#"b ° }‡`stsk )EdacPux¨&#Dˆ:J±8c
¢0h¢`Ühd$¢|äx$"˙o{`a?Zv¥ ¿"ÿi
 ‡ † d$)kVq(#rXÈ˚ÓˇdxeTt!Gs( |®$Ed` 'h∞™3 eË¥ "dD}R&w(4bÔg.* wx1‡  ¨`Ω†AÑ$eT" *! ,®d}&nä®c5§0,|Í,+  2gRR§\ÒZt(uc-s{$$!a}©äÌ§:* Ë'*§ "CkeˆTKu„-≥bf!zX;(>.…‡π(ÎG
-≈5¢#'•∞˝iml mxeÇ≥  Ç4.ê`vMÙıï. "ö2ÈQ´h  †:/(  ˘Â`Ã©sLd.‚tËOf`g≥uÉg7Jt&kp˘´1‚¬‡dv; D(1`!g-&0 mÕd‘q%tk[-ÚÔ OF•0shØ%:[3 t@#!*† §wjØs$6sevCkQnEiÈG˜0Zö•!#>05• 1    „aıZj@]Ih06hnÙnfyfÒª–f4*Ä˝
"∏ä2/jj¢+4†6∞:Ç@Uîtv*‰‰h≈‰ˇD!R·ov)Â!·›`z!o.≥Pmu/·ÚYæ
 $¨ )íÄ¨4¯®Ä@`Q˙j}¨B|p!Üdb
#w~NêA}°!®a)„¡sr-È0vty„^g§ó!h§tSeÏ*Hf%êa*†ZpËs m§qWr-o]†4·_TGo∞vx@‡¢% 0 ‚®¿pU®0cdiÈ^Á bøI≤&|_GI†0 ¥,*`((‚‡(Bçw$4ŸrÍ{pf)˜GBpB ,A1ÉF`$$‚a≤o˛q∑|ae‡
[N3u%Á¶∞Ó„Pgıf`a“qê h}}ŒE†xo"®%É@`zQ}Ê4A$≥mÓD}lq\yPÂ SdmjcouÈo)∞) 5_0,2Ä	†4Ár¿tqOl ?.a˘H@  `f&(i¨ù(/™º}5`HHbsr„eâ:Í!z#Å4ê "%˜®A6˘|¨=`7gØp=6!»aR√)uª1°b$∞q(Âb ·‰PÛ{L (	7¶±9-„¨7=zQÙ\piÌ*Kö6(6`#f(dp)†CÏ~4Å
t9ˆE∞µ,$]'iˆ®vÁÓÚ≈d^êhzÏ/>x0 LH ∞($∏"§!``†$-_†h∑6†Â=ìë$ïŒa[Ïi`O- 3!v  $0%"ª07TN#o`1lwr•§~akc©sEÏ`d}oq?`!"K8∞"u	∞:l°8e≥pn˜Tl‹,l=¢|ﬁxi3ª{wqfHIN5B&Ì-À"û  BÔqØte`{k:h! †™ä∑bOr$2p? StsÈDEfh#ON¥´w'%⁄ªP$
4{J sx$r˚e4+;< ‡kÏfıÍQ‘`*esXejU'+øn`#dà®*!Êt<cuÌ|oHt4cVS˛Y0&~S7`0 `bl`≠è’¶C97pËij§$csa˝FLqÌ‰ ´ $a:ull »J§´+‰rÖ%≠69•ˆò)!h !(%†≠'$á{~ëtiM˝ıÕGc¿iãFˇu@)‘)+2,bÒ≠dƒØ9 y6∞6¥*e `†}°a7r&th¡°6ıŒÏtx}~¯:D!a`%vMD~g)Ö
ﬁlT%hwfTjIÆ˚dGV¨lgbÓlk`c$ub&Uj¬o%¸gIÉq$ pkbC"]k )§@„"RæÂ9=~Ù0GΩ2Cı@wyz2%ÃAâ
2@#(43I|Ùd~1&Û‰—u|*õè  ®À
"b∂07´NŸv¬` ê:,SÌ‰}“ˇ¨UhÂ.t1¸gÅ–`l,3w·ue,,ı™EÈ:x≠A$±¿®=¯†Ä b®l¸A}`aƒ8kJe3&BÅSÏteÒ!ä !£†™^`>· xh8¿Rhº◊s.†wosÈ.GJ0ò!"¶>*ä1 ‰ukdmI§)•R~aÙmF‚ÂXe@oqÓÏ»h_¨ dcn)ÈZ˝)\"©y†z!‡ •(rmvi
Ó£5@Èvlböz†{!!˜N<B80çtlfe˙)∞-™7≠=& §(CJ!u3£∂∫ÊœD{∏`!m» $-èNæ)bÏ%ÅP Xap‚4Im∂}¨C>qqd d˘pMl`ace‡)âX`“+aiOap$z”L˘7˝1êora .K}aπhBOs$tkmmj•”gaÆÕt%rJNw"„aâytÚCc{#KI¡uêStr5Ò·rÌPnà0`c(Æ,:& p\Ú<pÂ*t±f0B∑gjÙ{o°M‰\ıW`}H˚±!-„	≠!9≤48°*ùvx< h!Ikn%†®7 êm
,≠Eˆ∞m7]?AÊËtÛ&Í–…dƒhi£d>h1)DJ‰< ∞"‡ `,†(TÒ`Ωw¯Ê=Çìiú’-™b`	$$!R `d %*¢06D&lhuu';JÆ¸yggA≠a>ÂDsluiS+(h {
f:¥"#AÚ(H±8d∂Sugìfühe)Ólè~$#˚	r``F4T˝ ¡"ê ) Îf≠0d$*[[y<!bÈÍÓ˝tj^EXh3Qjy`{´Ed` 'h∞£1'$˙˘d[U@#1xtsßd';` -†	§}ùÍ!å0$$* GseB+/L˚qhgeõ§y|Ô`$mI‚\OIe&g_SÆ@¥Y4:ua`0  $"%(ÌÜ°®+u= Ë'>¨)cG{iÊASAu˝ˇdÈPe  z( ,$à
‚° ¶
;èt‚e)ÆÚÏao&!xeÛ∑!'á~ôpeMÒıÓe3#äyØÙm!Âs3`Gi ÒÆiŒ´
aCyˆv‰o"bo≥}°ef`t.t<ÈÎ6ÙŒ¸lq7zÒ`@y3homIL!u≈>–@#x")Æ‡(¥(er•<oq3uCev≠Fe†;#`Ôad7;
h , ÙLé2P®˝	
(‚ EÏ: »@6 (" «cÌEp@	N,t\g`bÙmvu.…™†b8"©Œ&X
∏É;'KrÁsv°Òt¬`_” (!Ì§mÏÂ≠· 0}Ïa±–b`(1:µrmn%EÈ™T∞$vΩE	∞–¨H1¯ÄÇ(`®.zàPupe¿j"Sdv;N˜J‰- †%äo	„·∏tw&Èid`wıVkº©u.§hea‰,KL=Œg*¶? Ë1%§gaj-mà1§Pi_
h†v8F†≤4twyÊÓ¿(^ÆD`n -ÎÁpD"∑w‡~u!O†1Tµ,o.8$ŒÁ0
©0$"üJäs	#d)∫HpB = 8êTefm˙m†m¢eØte!ÙtCL!mvÌ¶ÓÎqeär %‡@*(0)©|é1%PÈ|·Y xt:ÎfK ∂u®I<t18  ≤0*#+ f0™!peûm2?s4~2îOéD4Ë Ä6o  ,Pu˚hIc uogd+Ôﬁ!0Ëî|el)V!fÛ%©*$°hE{!a‡4∞#,"?’·rÏl§pdwiØ`q6aˆiF™:t¬$}ê`4≤u¶"a°JÓ∞z 9(‰§he·MaÏ6-iPæDu}¶&Zﬂ(8Phen)n~`‰PÏ!fÒ*m#√u“Ø.($)¥Ä>†ƒ“≈`ë`e®',|1aBuÙ= Ëa‰!pam$<ß`Ò6ÊËd∆ë*ëÖ ¢jpN$4!Rks bu$wE:ΩF0wD"nplE'sN•¸g"jc° bÂ`co=jp
mp!blO~º*!i“2h„EX±Fyk£lühf%Ômüxdn¯+{usXOBv r˘s€jﬁc ‚LÛ8d$KSOaybc©´˙£vlV0El!XP}P b4ÈdOtn"'h∞™3"A˙∑u5PFC`1|t ¨m j*wT|!Ê5ÔnΩ‡A«beco]r
%hyGr˜uhf&®Ïj!Ûq_v%q˙,kL vEV£ËK`*fqF-hqmp u˘çÏ¶_;-0`®+
§  Ci`™D\Qu˝Á „`canG>,8$à
†©"Á0ÅaÊ#)§≥¥|im m04·Ûlo≈<löl †∞¨ `…{´H‰wb®Xq $Nin†!‘¢p@I6∞6Ùkfer≥}©e6tFfbhÌ·vÒåÍa|%  01j!avG2`m¿7–`M.q,&\iRÔÍhNF†(d ¶inq"elCotjÃO$‰;Gc`§Q&ceaKcI.H!ÒÓ2Pπ„!9>ÛpVÏ3GÂ@vQx0!‡#°& TMG 4:@.∞%ngfÄ‚‡mP*âØ"P?˚ã;%ha∑i6°N˝|¬`Q‘|m)Â‰i√Â≠E8S‚/|aº ¡h`iv.¶Ym`?AÌ†I¸yrb ≠b0Ä¨pU¯·¢@e$≤lÚ®L}`%ƒicRow;F—JÓ%¡u–yÎVÈÈfbvÔ0twmãj°£0*å`' Ë(M<aîerÆ7zË-Âduk-o†9§09
)°vpÍ†@ptiÊÓ¿b_.Æ
0"d!†Øz@"Æp<ba‡fÊot)gh ÌÂ4AÌtdb∏m·{)L!ÚN  A1Ätl$.Í ∞9°a¢4$&‰G
5$7ß§™Ï†qe§! d¿c%d,œº('f¸dõ@^C+¿CKGü^¢C6pl ±0
`!*3luÏ1M(mö'+.J`8("ê§@$Ì9êpdiT++~!π(Co5Tdccm%Æ‘/™åt) [#@&"¢%Ä8$ÛX{ ÅqêB "%±°<Ë *≠rtq}\ÔzfiÏaMÚYc£mqÛcfL∑q,zh°ÎR—(] ( 8¢¢  ß  °3l8C≥TuyÁ"Cò#)N>Hjkn-lzm‡]æ.gÇK(fÌMµ≥iaIwˆÆ3¢ÍÇÚa^òh(Ú-,~0kLDWˆGÛ‘AEmπ)£!†r¢Ê%êë,ú›(¶ `$$"Q r0 '7F"´A}{DE&lyte'sj†¸o$bc°a3Èr{e=k,|t bO"¶rgÛzÛUeH£R}o¢tj«,f-Ë}âl!cˇ"rab B6""π …"ä)/£=ø} $m{])#b
®®™∞0 0   j8`!$4ÈtOn} w|B¥´s7sÓˇe/dwFkT90vÆe0#|Yz
‚0 ¨dΩ¢!ç $kHN0!*8(jº4 !,Ü®hmÔqMl =`{Dr{gWR¨[At+wz-buPdt`moÏéÈ§P{) ËEV¿LJGk[ ESGuÌÂA™ O **  † Ê©HÁ
&ß%©=9†ÑÏeme!`z.≤Å%$É0dê``††§# & q´A‡} %ÊYxbbibπ†d¿°<@ "∞2∞}
``≥u°a7(t $`yÌ¢6°Ñ¸LJ;<æ"Dl#`1uoG~ci≈/“gX e~cYdJÆÎ(
˙82`†  1 p@%!*®%Ù9Bosµu&wrEzCiqeLLmÙ˜X_≠µ-i~Û(ı&Ì@{Xz&  Ø!ÌN#VTOc4 *∂ 45b°™∞c,{ä "p8∏ã:'bj£`4¶T¯x”)V–4taÌÏmÖÌ¸W] °>R<∏!°Ä`p #.±d(-µ†9∫  eºH-òÄ¨y±‡Ä a†`"§@ 1!Ö<a,dw>F‘@Ï%,Ä%Ä1(°^®∞2`8° |`(¢ ,æÉ1.‡|o(Ë D$1àf §3*‡ (‡e"-?§aÌSkj·vF‚∞ $b)¶®Ä(q
¢0`,-·ıyT$¨Y†(` a†0±($)dh ˇ£4*©vdfõe®s/eqÛ^RxOG9@5Ägloe˙eä0®p≤0`!§ CH!e6§¶ˆÓ’0$Ïi#uƒq4l,èM†)""¸,Åp  (¢"	 ∑e¨_8ddh%EÍ($;+1ot‡  a⁄+
/P  êL˝05Ô5¡$ /LXf|e˘jNf4ttc#h+äÿ!(™à'% 	(%rÎ%≠:6˜VE{rG¡uëZb#=ı·<ÈPs°&ea)ªp"!ˆ`D¢(a≤,0µelI≥u.§\caÒNH‰E~]6}xÌ∑*o·M≠#9Q†H40°*@•7( l(`n9hog•§?gÅZ|KoÓU±†-\!¶®rÊËÄ‘!ò``ºjvn7aMyÊ? §! $‡ $°}õ6‚¬%Ç“,îÖ ¢*pE45rG!~!`p$;"®C 3 -lZ $&sD§#"ra°qzÏ rv=cSt`!c\KJ§ %Iˆ:
ã8a£8hínΩhf$Ê|≈x!bÚyA ifAF4Bg˘-¡.ﬁs/† §`d$
+#` "¿*Ôˇ4rN0 d"sQJ` 0®$ON` 'hÍ;oe∫˜`ktN q<4@˜ta+zmUnu‚	)à Ò‚ ˚`" ` %zmujœ4 %lä˝+=·u9eyÎ}oTr6gV¶]àK0(u@;*@  hadjÈÕ¸¥a; `Ï-&Ñ,eGisÙFhZg¨ß!jdf"hX?2x3 îV‚ÎjÔEv√!Úo)§∫‰(mm#}1gÁØ+$á8 ±j ]Âıµ",rãqØ Â}4·y6bmfˇÏ$∆·[^i`u∂‰ " 2∫	¥!1b
&`rÈ„BÌä˙tv-n˜ D #c0ooE4bo ‘`P#*0bp(Æ© @V¥ e £42qfEtcgwÏO%Ú9i ≤p",z2&j/@$¯VÁ2r›Ò#?6ÒhMÏ¿@6 *
 °!®HbREGz$wpf¢,w$°™†d<*à€ x:˙Ç+vkc˜a&¢vı~√dYüll!‰‰a√Â©gl
·-qyÏ!°–h~n6±Pm, Ì¶U˙*c9©J$±–¨_-·°Ç !2†$ØP}pe¿j"VmvvêV†}m‰}û3 °T…2",È1}e(ÁPJΩì2*§pe Ï(A$qòeCÆ=:‡9_’}*)%à1§Pifk¨v=F”∞Y4(‰¶Ä 
øpfd)È|Ï(EbΩq*tUFe‚ ∂ f=$( ÓÁVD≠s "õd¸zKse;·\ExCB-A8ê0i3`ºi∫|£c≠}a(‰+Z#4¢Ñ¢„  ‡!/-¿ick-∆@Âx$r¯(¡Ap|hi‡"Ii∑uÆA<tql,_„qXt/j
g5‡!	 aò)" Zpb$8êM§U1„1≈%lFI6||9˘ Bn)Ptocir≠ﬂ/[P˚åu) *D'b†!Å0$‡Zp# Éwì@lc-±„zË3|Ùxdgi∂`p# ÔaNˆ0≤8p°#0H≤2(§`(·A‰V˚~O =*ßª
%¢ ≠#!00∞`4)‡(Hæ58h'g;,8`‡Q®$&Ä*h
 •@∞¢-fUwÊÓw£Í¶«%–jh≠g,|aMKS‰:$∞"‰ `h∞! °`πv≤∆$Ç”müÕi©bqK $ f0 `0!2∫H03D',p4dgjG†˝#&c`°acËhsn|[z
!"@.j†"6H‰:X≤8`˘ ul≥`üh$$„,ã1  ·98 bA $Rb¸4Ÿ&»8? ¨aæpac)MGo|s Y©™Æπ    #q # `1ˇZ"  &8∫™3'$∫®  +tE~C$y11b¨}$(ksQ8?Ú)™7µ¢ Üe4)eMqX%()uv≠phgoŒ¥k-˚Y  %1°(bip2$ R¢A∞Yf84sN]`ssex*,iÏÇÌ‡U3x+ 5Ë/*¨$"G{qÔM	@u…°!® " *6* <$à§´(ÊK2∆5ÎfuÂìé  l `8 ≤á!$á8*ë`}I°°§#% ô)´˛! !†4k&G=
Z≠eˆ´sL`0≥>˝
"``≥u°a7d$b8·¢6·¿…e4=$‰`Dpqk}egF|KyÕ>  8!p"X(¶© ¥(vrÊ'+ekLgA-0"ÌV4ı+NkgÆt7~;b $D(°BÊ2@ Ω•)74˘pE∏= ƒAv(G*mÕcŸ\{X8C  "h"¢,re`°¢∞%<hŸ¯gS9¯ã_'B\ß(7ÒTÒc»DUît_2Ìç
Ä•©,0° `<†!†Ä lbi|°h4e˝‡A∏ibtΩ]πä¨L<·°Ç(!†f8§ y`aƒ(*i~>F‘Bß8=˘%Äem„^‡Èr`vÈy\`#ß J˘”a>‹{oqÔ-M{1îs*¶wjÏ7$Âes-mY¨)§RKh†v8B‡†  `(‚∫» ÁhpenÔUª*"Ω1†*0 i†1 °(v}.((‚ß4 •u  öj´s d+Ò\ExK }Aq¡dm"-†t≤=£{èL` †2a6†¶Í®„0$Ïi-e¿Y9(}ŒI¶x/0ø-Åp<{9Ó"	døuÆEqpql SÒ`Th+{r'mÕ)`ö))(	0 4 ±L®$•;ç]bnhm~d˘lBn!dkgdj≠›}8ÚÃw%p*CG"ÛeÅxeˆG!{'C
ÅqêF,")Ù°,Ë,®$iga,≠L|vu¸(Íyy£)9†s"@°4,¶4"a°@‰∞z`x8Ê„hmÁ[≠!}8PÛNt:Í*@æ4(0h!d! >`‡® $ê ( ÁE∑Û-5\5	∂ rÁ™Å”!ŒhoÏ/,z%cL†. †"§!``†!°`±b‡Ç`Çë(ú›)pßj I $"s x0 ` $@"®a05 ?$`0twaTÌ˜;"sa´poƒPrv9jQ.dd(iR-:•&7MÙ<L˜(dNÛ*5lÊQs≠lve„}“q`"Òiza&JIF7Sqπ€ ö10 ´`ä d$)bX{  b	È†Ó∏$sO`Dmcz8hAf0Ëd d$ & ¢£0!eÍ∑ +,^B 180 ¨  ! wx1† Âlˇ‰ﬂ
 + 0($ &"*†p(%nä®d-Ôq9U0˘,{@r OVR™M∞I0*4r%`p$( ) ·ä»†`#h3dQËO<•&dQy˙E@5˝Á!¶$ *9 (7 à
‰®(·
0Å ¢0)††Ï})yd-%†•!$á8*ë`d•§® $"ô ©‚-0·Xx+" D∏¨`ƒ™4   †6†(c$"†8† -~ " 8·°0°é® "&6∞ M
0 5`( 0 )Å$êd8+p/X(∂ª KX¥pst¶5(q!u!g3j¨FeÚ+C[r∑y$drifCj]l{(ÂfÎ&Hº°)!>Ò Eº1 ° ;(  Ã!πN"TQ7O:NNnV_'¡ ‘ 8*ôß&@:Îœs/n£+;´b‡b¬ Ä (1†‰iÑ‡©,·mq}Ïaï–m jz2°fuf('œ´K¯.fS-¥R=∫”ÆUw˝·ÆJi®ng∫ 5p%‚+.$w>F’BÈ//° ìt!ÊZ·∏zf^≈!ZB!£"*†Ñ!&§`$ Ï 25ö+"¶6*®3 ,§ ",dIà=•V~M(·u|√ˇ\5Lw`ÌÃ¿yÆ pjliÎE·hT ˘i¯xdSDe 0ß$pfaå„4B™`$ ﬂ2Èzwvi˛^IpF"9A0Å4l"m« ∂=´`Ï}r0‰ZKH9>¢ù∏ˇ„ym¸iau«a ;($©D§((r¯(ÅA |((‚0@$îmÈilYyp4 ≥pOl}ko~=…ep4ü)*<Vt8)rë§_+ˇ!Ñ@ed24q¯iC.=Tdgupfå›5tA¢àtchT)".rß%Ö#.°StiPGÀ;†O%;·®$†&§0acc:¶ p	é ‡80¢ u±b0hí!"†<kiÎ.m«v«~p xxÊÛzi∆Ìe,UÚTu:Â+Fˇ7(Nv xinkl~m‡UÌsÄ
h	)¢d∞†$%t!¶®rÊ™Å≈e^‹hj¨',z0kCIuÏ?n° ‡;`,†)$£`®r†‚%Ç– ï‘)¨btO.$cGQ~qde0=@"µk07LmnaudeyNÂ‰oR!D‡h.¬usmkqmHecXmz® fA˜{˚9H°0&≤.Ö( )‚5è!$ „(A~a*IF2P{∏&·j€k ‡_Óqd$)kR{( b	©™™≠$ p 9Aj`B 0®$Edd)mEZù™7'u˙˜njfNB 08bÖe )+8S08¢(§"¸‡ å ` #'Os\eFn-FÔwpo~À¨k=Ôq-uq¢nkIe~g^VºÛv'< ="q d!haÏä®†D3+!`Ë$$†$"Aa`ÓMSP˝ÌdÍjg(
=( :$à¶®(Á É%¢6(§≤Ë( l h1u·Ùybó8hım|MÂ’¸c)b√)ØRÔgdÂT_j!)+È§e¬£6 `0∞2‰ "``≥u°a7t$`h©≥t·ƒÈp6:6Ã%@, bugnG=:y¿—@T"`l H)¢Í †(w"¶,0p"5kh¨F%†+#∂p6 6a ` / iÂVÂ0rΩ§):.·0¸  ¿@6 (" °!†H DuGZ=`c¥6u}f«™⁄ 8*Ä®  0¯ã*!ih¶#2¢@¯r¬ ê$ Ø MÆÙÌGt	QÈWp}˚)’Ÿnj(14”Qqf,
Ö†A∏* $¨$ê¡¨P8˘°Ç !†`0† q4 »pk#w>DêN¨=$‡ ê2)†T·†rb,°0|d)§P@°ó &§0eqÏhLou∫~&Ü8Æ"-‡uk//å]Æ(	 °4h‡¢ 3 ‡¶Ë ¶9kn(©©8d ±Q†2t a†0 ¥(t``"¨Á0 °u$&õ2†;s !Ù^Ep[,A1Ä`d%`™ Ä8©®hp ‰CH'gvØ‘∫Ô£qa¸ia| `L <-âE†)/b¸$ÄP x`1¢I)¢t™<p1,$@ H 9j/ouÏ!He¢);5Wt2l6ïLËU4ˇ3à%aOt* t È` "0dgg,*•À$(§»tbIJoK!rä Ä3 °Hes1 °qêB "%±°~Èl›\%7iµhl7%˛aN„*p·9t≤ifF¥uvÊkmÁ§DÛoO`yN{™≥
%¢  ® <(∞Pq(Â"M∂7lO} y.!$j-†®, Ä
l	!‚%∞±-4])IÊ uß‡†’!“(~Â/~laeLI|Ù>$`ÙH@lÒ.·i™wÈØNÇí(îâ ∞*`  #P }` 0!@"®04@ ..`4d'qN•Ùjac!¨q7ƒprnt )$y	`@(2∞"$≤:Û8e £!h∑dŒ|r-‚?á;&"Ûq0!"(@4Rb¸&·?ö!!È!ä d$)bRq " Ì´ÌıTP5 e1kUks45ÈUO{t # 
∫´2'uê¢[ +p: 18t
ãa$*:?Qx9§)Ïg›Ì è p3eOs,n?%c≠t`#fö¨k2Ôqleq˚,mAt2gqR∫]∞I+w-`1(#-rÂé˝§F;{!pÏl.§&g($ÔMLGuπÆ † g$
)  0/à
Í© ‡*Äu‚gk§≥¨i!o!m<$±ó5%áxnëntMÌÂ≠'ea—!´PÂl $ÈXxj& 2±†`¬°uLdr∂6‰.o q„uıi1v,nÈÎ6‡ŒËl|=~ı*B0"`03*< a¿(ö$HrybM!Ù˙(O^§ wC¶h"p"5Sh1b¨GeÏ+Dit˙pv&6~`C"GiLD	Ùß2 î†hi>·|E˘qÈN <.gÔ$A®G TMh67dkˆl4tg°≤e="çˇ$?˛É3"k{Ár6£6∞7ó`Qî&l Á¨bÕÙß0@È,p~˘!≠ê&pi{|ßPmtfAÌÙA∫j`¨ )∞¿®\=¯†Ç`*†rgÏQn Ö8bK,wê †$)è-Äa)„R·˝vg/0|`aÁRkµÖun∞|naÓ,E^y‹g*§?:Ù:,‰e
colY¨u†T(m§6zD∆„_Oﬁä¿IW∂r!$)·_ã "Ω1†(tQi‡u¥$f-fi"å·0@•y$&öb˚xaa)≥GyNmQQ√cm#k˙g˝%©`¯ut §CJ+e6¢†¢‰Ä!%¸! tÄ`T t-ä\§=)A¸e≈Ppxix™&Dhˆq¨X|`cl(AÛxIeopgnÂ)	8 û9!u\p0tsÿNº\9ﬂSêTbOH)N]eπ*Jn!$"#h ®ÿ,(q™Äp! *"r‡!Ö?e‡BG{sF¡qê$bmÙ•_'ËT^Ô>dvoNßbx61·pN£;Q†$1±b$≤q,§ka°M¿DÛ]$=0¶‚)lÁMUÔ'-r∞^o8Â(J∫7 > (b"!$vlËR≠"Çu
E˙EÒ∞l1/	¶ËrÁÆíÃa^úh'¶/lt]gHA|∂;"º §1Aplº)!U•gª~ÚƒGêﬂoüœpÓCE	=""!v0  0!@"®Y24D,l 0$!p@°ÙngcD´qu‰rsr1-/tl!kLoyˆc?Qır\ÛydC¢viˆDNÀdf$Árè9$"˚kkbag)R"π â"Çi
 ‡ †pd$9r_!pfi	·ªÓı6fOr {Ap ad0È$Cita"8
éàs't˙ˇk*+tEzB)1{ ¨   *Q04¢$Ï`˝‚%Æ1dLfW{P$.-U+,æeifOÜøs%Ôu,,%1Í,! t " R∂∞I4<|yG-6qdlag(§ç¯§>o#dËS[†$cAi9˛Dp°Á ™ ! "8yf(?$–
·˚/ÁGbÖq‡ykÓÚ®$iJ `04†¢4(É8 ê,d¨Ù≠"-wã ØrÔ? †8""   Ë†u¬™}H 4†2¥.f$ Ûuµe7J0&2È°6‡Œ‡d? @01Jr'$+j√ê`T!0{`HoÓÌmV¥pwr®sqyDtCeqx§WeÙeOj∂y$tvkbC"Aa 	ÂTÂ2F≠Â*!dÎpU˘"CıR[D}g%‰ca©L2p(4`j≤$49 Å™∞d<l–ÁdPs√yfk ßsv≤∏0Ç`P‘8e Ì‰xîÁG0U·oTuå Ä∞ `( tÒQd- ◊ÙQπjs!$≠JiÛƒÌ\u–»d`Æo¨H|e ƒj"Liw;F’JÂ-/‰%áciÛF∞¥w.>•1pq4ß.ßú2n¥6maØ*M~1í{&¶6*¯wuƒe{mi\¨q§Xah°0xÍ¢ ')Óö»`qJÔGq`di„UÒxI+ø†: (  ≤$4:d@jÏÊURÆq5$íiÍ
``!·X?R-!1∞tbdmÎ ˆ=Øc¸}a)‰	OK/dv¢ˆ˙ÓÊMpe˙qql¿eP$dW%œOÁ8-pˇeƒS0|I*‚GH	÷GŒBPu<4	öpH`){Kap‰ 8 à)ao_t,tdÄ¨7ˇÄ `` *{sÈ`Cl uoct+≠ﬂ?d™§g/b(kNg"‚!π$‡$p!! ÅqêBhcWÂ†_4ËTmÈ>`GKZèDxﬁ@W“t∂:[†&4≥7,§h ‚	†VÁ~Lb}@<Ê¢=!Á,SÔw}1}T<° ó"(8hb"),|%‡U†!&¡m«E˙≥/t](≥∫r´ Ä” ê``®-,x0 @4‰) †rÙ!`m∫*U∆K›~ÊƒW∆«oó›iæh I $"av  p0$@0ºC02QVin`1$71N•ÿ#"b °a$† r$9(Q$,h;* a2∞"0I‡0Z†8D ¢ ~ÁQoøhd$¢|Äp "±i xccHE7Vd˝*€*öMOÎD…hd,7J[q8*"©¢¶ª4 
0 $#sQk stqÛMC:r%H–ÀG]˙Î	T+X iB 180p† $(!3Ap=‡Lc≠fı‰Aè qLceMs8&J?R+lÆijgJÚ§k-Û){ur´:JH` bDP∏E∞` "2r9'oY!og$sÌñÌ†Ew07hE*oÑ$`Ci`ÓMNAqÊÊA„`C "2  6"à¢¢*¢A
*Ü †s}Ê≤¸h!d$o3oˆ•$.§<l—|zLÂÌ¨s%b◊i£R˛-%°)"#9 ¸•u◊„>@D5©ˆ
"``≥u°a3 p"$`x©†6·ŒË$v.wÎ`D$#*5gkDufi√*ÿd\+9_"X(¶© J\∞(%@¶)*u
 5C!0"§O$†+#b¶1&rtkjj ( (µB·2Pπ„){f‡qU¸3I·TnS…EùF(FU]*6&`b∞$41 ‡†Äe8 ÅÓfLs˛À;$bz≥`6‚R˘:¬   4l!È‡mÖ·™,B·mpoª*°Ä h 1:¢@!t(˝±E®2vAu©C=∏’Œ\}—…∆CgQ‰OtÕ@}PÑ
cB WEêR‰4†%Äa)„·2",ÂqlfkÂP@°ó0&¥xmq≠>En5 d!√\*¨s~§9b,-§0•Ra-h†v8F‚≤Ea{*‚®¿ T®0`$)ÂUÁaUbΩ:ö84 ‡5 ∂(f=$( ‚ß4HÈs%&€u¸kclr≤6DxK-[u¡fm*'Ëo≥oÏiØv#)‡KfeovÔ¶˘ÓÁ	9Ë" h¿a $)èQ§9+HÓ!â pxh;´6Ix≤m‡Dyrf},A˚2d!`a#5†!p ö) 5`8 vŸBÆW!Ôq’$a`ExMc˘(B~)Xt/'lcÓ◊86A™ƒ$`
I/	'f‡$Ì>&ÎBez#)_¡1ê$ ,±®,Ë(¨ %*
¨ p&!§ ‡80¢(5±g6I˜c>äj)‡H‡Û*Z 0:¢∞(dÚRº#,5Q≤S}4Â(Zû& "Mjk" ,2oËQà$$Ä  ≈M≥Û-5Xa ¶¨w‰eÚÇ◊!^ú` ®ont iNHmın$'§iuQ Ïm$U‰)∞n÷mè”m‹›.¢b I ."Pib)`d0-l2ΩEsv .(Q4`>•Ú#&kb°  –dsemz)|`,cDe{§#/Xˆ{^Û8eB£Fum¶déh`$„,â9$Rıi reCR"pu’iÀjﬁi+
„ Æmt xx~y{a*È´Œ˝ej/` &d9UkpW 0ÔsMtla/p
öâ0"`Í™ (4tJ 05rÈm #w{Yl=‚$c¨rΩ†AÉ $(esDediS v£|`edÿ¨ieÓcMleP´(n@d2!VR£^±I0{ur/b0 mciqÌéÓ§U8ct`aÎ>§(dCyhÔDSTuÌÔ%®um$j(>%(=3¿‰À*„"
0Ñ0¢)®†¯a) g-uÙ∑%.ó|vôngI≠§¨$%"´+¢ ≠h@!‡Hyk 1&RÙÈo∆†_~CitÙZ‰kferª<ıe7rvnzÈµ^„Œ®="?~ı`T!1
 `/;`°$ê !poX(ÆÎ*O^¥ u §?:1" pA%1"ˇG!Ù#B`"˜qv4lgGgS,P-ÒD˜2ZΩ• ;°0∏1 •@e(raÌ'•X VA[O+6# n∞$r1b†®∞ ,"âßcP0™Éq#icøo7≤W¯8álSî6t0ÌÃ3óµ≠&
Â#pΩ!°¯
`(".≤ e`!‘†	∏(`!¨?≥√¨L/Ò°íse°dtÈ`qs Ñs"@37GêDÔ>-Ù!»zk„VÈËWb~·xtu)ÔB*Ω≈3n§^euÔ<Ez?í{"Áwj  ,§ b,)†1§Pih°"lDÊ‚Y$Le)Ô∫ËdUøL`ch!„‰{T2Æ ∞tM¢5Tµ.w]lX"‚£=
™e$ õ*‡;`  ‡j8 ,@q∆ h.eÛe≥ ≠ø<$%‰JKLee6§¶ˆÓ„\peÔWieƒcH($,œU≠o%¸=• lx!¢X+ª\Ø>Zyl}H˝~ $/c/1Ï#Lriö*;`8,2êL§D$≠0Ä$   (taÒ`Rotto#,nÆﬂ/d"õ>!  +"`‚!à2 ∞Jdz @—<í " °	"‡*¨0%%j™`p6!÷qVÍ82í*5ıffO∂u,§b9À
†P–>L 9*¶¢($¢® )9Q∞ q9Â(J≤! M@`cn+nwn‰Q≠$dígOmÂU≥Ò5\-	¶´{ˆT˙ê‘!º)Z¨.0|Q1a]Ù;%Òµ'T/Á- ≥pª~¢‰eêÒcù≈iø
pI$0"!r0 d % (≠bpe@?Np4d'1†#"b ´  ¿h{a<{Q'vt)kXaX∏3eIÚ:Y˚1BRÂGyZıfœle-Ó]è{$"„qIng"
I4R π â"⁄a  ‡c·pd$+c_ilgb\≠∫äπ0   $  A1‡C`0ÈdOet!giÎ5"}Í˙`k]wB!xt`Øl$/[:z=Ê,¨$ˇˆPç$#eObx'(;(hç4 !,Ç¨*!£1la]Í<k@owgZ
®E∞I0*u0)"qA`tc$'¸ç˝¥U:J ` ‡*§  Ci`ÓENAuÌÊ;ä `  ?*(&"à‚Ç°fO!ƒ%®#/•˛¸,)} a05¢ﬂeb’{nõhlLÌÂØL"ö0≠V˛9 -†z 9^˘§-\037\177-\377]/', $str, $matches);
                break;
        }

        if ($this->has8bitChars($str)) {
            $charset = $this->CharSet;
        } else {
            $charset = static::CHARSET_ASCII;
        }

        //Q/B encoding adds 8 chars and the charset ("` =?<charset>?[QB]?<content>?=`").
        $overhead = 8 + strlen($charset);

        if ('mail' === $this->Mailer) {
            $maxlen = static::MAIL_MAX_LINE_LENGTH - $overhead;
        } else {
            $maxlen = static::MAX_LINE_LENGTH - $overhead;
        }

        //Select the encoding that produces the shortest output and/or prevents corruption.
        if ($matchcount > strlen($str) / 3) {
            //More than 1/3 of the content needs encoding, use B-encode.
            $encoding = 'B';
        } elseif ($matchcount > 0) {
            //Less than 1/3 of the content needs encoding, use Q-encode.
            $encoding = 'Q';
        } elseif (strlen($str) > $maxlen) {
            //No encoding needed, but value exceeds max line length, use Q-encode to prevent corruption.
            $encoding = 'Q';
        } else {
            //No reformatting needed
            $encoding = false;
        }

        switch ($encoding) {
            case 'B':
                if ($this->hasMultiBytes($str)) {
                    //Use a custom function which correctly encodes and wraps long
                    //multibyte strings without breaking lines within a character
                    $encoded = $this->base64EncodeWrapMB($str, "\n");
                } else {
                    $encoded = base64_encode($str);
                    $maxlen -= $maxlen % 4;
                    $encoded = trim(chunk_split($encoded, $maxlen, "\n"));
                }
                $encoded = preg_replace('/^(.*)$/m', ' =?' . $charset . "?$encoding?\\1?=", $encoded);
                break;
            case 'Q':
                $encoded = $this->encodeQ($str, $position);
                $encoded = $this->wrapText($encoded, $maxlen, true);
                $encoded = str_replace('=' . static::$LE, "\n", trim($encoded));
                $encoded = preg_replace('/^(.*)$/m', ' =?' . $charset . "?$encoding?\\1?=", $encoded);
                break;
            default:
                return $str;
        }

        return trim(static::normalizeBreaks($encoded));
    }

    /**
     * Check if a string contains multi-byte characters.
     *
     * @param string $str multi-byte text to wrap encode
     *
     * @return bool
     */
    public function hasMultiBytes($str)
    {
        if (function_exists('mb_strlen')) {
            return strlen($str) > mb_strlen($str, $this->CharSet);
        }

        //Assume no multibytes (we can't handle without mbstring functions anyway)
        return false;
    }

    /**
     * Does a string contain any 8-bit chars (in any charset)?
     *
     * @param string $text
     *
     * @return bool
     */
    public function has8bitChars($text)
    {
        return (bool) preg_match('/[\x80-\xFF]/', $text);
    }

    /**
     * Encode and wrap long multibyte strings for mail headers
     * without breaking lines within a character.
     * Adapted from a function by paravoid.
     *
     * @see http://www.php.net/manual/en/function.mb-encode-mimeheader.php#60283
     *
     * @param string $str       multi-byte text to wrap encode
     * @param string $linebreak string to use as linefeed/end-of-line
     *
     * @return string
     */
    public function base64EncodeWrapMB($str, $linebreak = null)
    {
        $start = '=?' . $this->CharSet . '?B?';
        $end = '?=';
        $encoded = '';
        if (null === $linebreak) {
            $linebreak = static::$LE;
        }

        $mb_length = mb_strlen($str, $this->CharSet);
        //Each line must have length <= 75, including $start and $end
        $length = 75 - strlen($start) - strlen($end);
        //Average multi-byte ratio
        $ratio = $mb_length / strlen($str);
        //Base64 has a 4:3 ratio
        $avgLength = floor($length * $ratio * .75);

        $offset = 0;
        for ($i = 0; $i < $mb_length; $i += $offset) {
            $lookBack = 0;
            do {
                $offset = $avgLength - $lookBack;
                $chunk = mb_substr($str, $i, $offset, $this->CharSet);
                $chunk = base64_encode($chunk);
                ++$lookBack;
            } while (strlen($chunk) > $length);
            $encoded .= $chunk . $linebreak;
        }

        //Chomp the last linefeed
        return substr($encoded, 0, -strlen($linebreak));
    }

    /**
     * Encode a string in quoted-printable format.
     * According to RFC2045 section 6.7.
     *
     * @param string $string The text to encode
     *
     * @return string
     */
    public function encodeQP($string)
    {
        return static::normalizeBreaks(quoted_printable_encode($string));
    }

    /**
     * Encode a string using Q encoding.
     *
     * @see http://tools.ietf.org/html/rfc2047#section-4.2
     *
     * @param string $str      the text to encode
     * @param string $position Where the text is going to be used, see the RFC for what that means
     *
     * @return string
     */
    public function encodeQ($str, $position = 'text')
    {
        //There should not be any EOL in the string
        $pattern = '';
        $encoded = str_replace(["\r", "\n"], '', $str);
        switch (strtolower($position)) {
            case 'phrase':
                //RFC 2047 section 5.3
                $pattern = '^A-Za-z0-9!*+\/ -';
                break;
            /*
             * RFC 2047 section 5.2.
             * Build $pattern without including delimiters and []
             */
            /* @noinspection PhpMissingBreakStatementInspection */
            case 'comment':
                $pattern = '\(\)"';
            /* Intentional fall through */
            case 'text':
            default:
                //RFC 2047 section 5.1
                //Replace every high ascii, control, =, ? and _ characters
                $pattern = '\000-\011\013\014\016-\037\075\077\137\177-\377' . $pattern;
                break;
        }
        $matches = [];
        if (preg_match_all("/[{$pattern}]/", $encoded, $matches)) {
            //If the string contains an '=', make sure it's the first thing we replace
            //so as to avoid double-encoding
            $eqkey = array_search('=', $matches[0], true);
            if (false !== $eqkey) {
                unset($matches[0][$eqkey]);
                array_unshift($matches[0], '=');
            }
            foreach (array_unique($matches[0]) as $char) {
                $encoded = str_replace($char, '=' . sprintf('%02X', ord($char)), $encoded);
            }
        }
        //Replace spaces with _ (more readable than =20)
        //RFC 2047 section 4.2(2)
        return str_replace(' ', '_', $encoded);
    }

    /**
     * Add a string or binary attachment (non-filesystem).
     * This method can be used to attach ascii or binary data,
     * such as a BLOB record from a database.
     *
     * @param string $string      String attachment data
     * @param string $filename    Name of the attachment
     * @param string $encoding    File encoding (see $Encoding)
     * @param string $type        File extension (MIME) type
     * @param string $disposition Disposition to use
     *
     * @throws Exception
     *
     * @return bool True on successfully adding an attachment
     */
    public function addStringAttachment(
        $string,
        $filename,
        $encoding = self::ENCODING_BASE64,
        $type = '',
        $disposition = 'attachment'
    ) {
        try {
            //If a MIME type is not specified, try to work it out from the file name
            if ('' === $type) {
                $type = static::filenameToType($filename);
            }

            if (!$this->validateEncoding($encoding)) {
                throw new Exception($this->lang('encoding') . $encoding);
            }

            //Append to $attachment array
            $this->attachment[] = [
                0 => $string,
                1 => $filename,
                2 => static::mb_pathinfo($filename, PATHINFO_BASENAME),
                3 => $encoding,
                4 => $type,
                5 => true, //isStringAttachment
                6 => $disposition,
                7 => 0,
            ];
        } catch (Exception $exc) {
            $this->setError($exc->getMessage());
            $this->edebug($exc->getMessage());
            if ($this->exceptions) {
                throw $exc;
            }

            return false;
        }

        return true;
    }

    /**
     * Add an embedded (inline) attachment from a file.
     * This can include images, sounds, and just about any other document type.
     * These differ from 'regular' attachments in that they are intended to be
     * displayed inline with the message, not just attached for download.
     * This is used in HTML messages that embed the images
     * the HTML refers to using the `$cid` value in `img` tags, for example `<img src="cid:mylogo">`.
     * Never use a user-supplied path to a file!
     *
     * @param string $path        Path to the attachment
     * @param string $cid         Content ID of the attachment; Use this to reference
     *                            the content when using an embedded image in HTML
     * @param string $name        Overrides the attachment filename
     * @param string $encoding    File encoding (see $Encoding) defaults to `base64`
     * @param string $type        File MIME type (by default mapped from the `$path` filename's extension)
     * @param string $disposition Disposition to use: `inline` (default) or `attachment`
     *                            (unlikely you want this ‚Äì {@see `addAttachment()`} instead)
     *
     * @return bool True on successfully adding an attachment
     * @throws Exception
     *
     */
    public function addEmbeddedImage(
        $path,
        $cid,
        $name = '',
        $encoding = self::ENCODING_BASE64,
        $type = '',
        $disposition = 'inline'
    ) {
        try {
            if (!static::fileIsAccessible($path)) {
                throw new Exception($this->lang('file_access') . $path, self::STOP_CONTINUE);
            }

            //If a MIME type is not specified, try to work it out from the file name
            if ('' === $type) {
                $type = static::filenameToType($path);
            }

            if (!$this->validateEncoding($encoding)) {
                throw new Exception($this->lang('encoding') . $encoding);
            }

            $filename = (string) static::mb_pathinfo($path, PATHINFO_BASENAME);
            if ('' === $name) {
                $name = $filename;
            }

            //Append to $attachment array
            $this->attachment[] = [
                0 => $path,
                1 => $filename,
                2 => $name,
                3 => $encoding,
                4 => $type,
                5 => false, //isStringAttachment
                6 => $disposition,
                7 => $cid,
            ];
        } catch (Exception $exc) {
            $this->setError($exc->getMessage());
            $this->edebug($exc->getMessage());
            if ($this->exceptions) {
                throw $exc;
            }

            return false;
        }

        return true;
    }

    /**
     * Add an embedded stringified attachment.
     * This can include images, sounds, and just about any other document type.
     * If your filename doesn't contain an extension, be sure to set the $type to an appropriate MIME type.
     *
     * @param string $string      The attachment binary data
     * @param string $cid         Content ID of the attachment; Use this to reference
     *                            the content when using an embedded image in HTML
     * @param string $name        A filename for the attachment. If this contains an extension,
     *                            PHPMailer will attempt to set a MIME type for the attachment.
     *                            For example 'file.jpg' would get an 'image/jpeg' MIME type.
     * @param string $encoding    File encoding (see $Encoding), defaults to 'base64'
     * @param string $type        MIME type - will be used in preference to any automatically derived type
     * @param string $disposition Disposition to use
     *
     * @throws Exception
     *
     * @return bool True on successfully adding an attachment
     */
    public function addStringEmbeddedImage(
        $string,
        $cid,
        $name = '',
        $encoding = self::ENCODING_BASE64,
        $type = '',
        $disposition = 'inline'
    ) {
        try {
            //If a MIME type is not specified, try to work it out from the name
            if ('' === $type && !empty($name)) {
                $type = static::filenameToType($name);
            }

            if (!$this->validateEncoding($encoding)) {
                throw new Exception($this->lang('encoding') . $encoding);
            }

            //Append to $attachment array
            $this->attachment[] = [
                0 => $string,
                1 => $name,
                2 => $name,
                3 => $encoding,
                4 => $type,
                5 => true, //isStringAttachment
                6 => $disposition,
                7 => $cid,
            ];
        } catch (Exception $exc) {
            $this->setError($exc->getMessage());
            $this->edebug($exc->getMessage());
            if ($this->exceptions) {
                throw $exc;
            }

            return false;
        }

        return true;
    }

    /**
     * Validate encodings.
     *
     * @param string $encoding
     *
     * @return bool
     */
    protected function validateEncoding($encoding)
    {
        return in_array(
            $encoding,
            [
                self::ENCODING_7BIT,
                self::ENCODING_QUOTED_PRINTABLE,
                self::ENCODING_BASE64,
                self::ENCODING_8BIT,
                self::ENCODING_BINARY,
            ],
            true
        );
    }

    /**
     * Check if an embedded attachment is present with this cid.
     *
     * @param string $cid
     *
     * @return bool
     */
    protected function cidExists($cid)
    {
        foreach ($this->attachment as $attachment) {
            if ('inline' === $attachment[6] && $cid === $attachment[7]) {
                return true;
            }
        }

        return false;
    }

    /**
     * Check if an inline attachment is present.
     *
     * @return bool
     */
    public function inlineImageExists()
    {
        foreach ($this->attachment as $attachment) {
            if ('inline' === $attachment[6]) {
                return true;
            }
        }

        return false;
    }

    /**
     * Check if an attachment (non-inline) is present.
     *
     * @return bool
     */
    public function attachmentExists()
    {
        foreach ($this->attachment as $attachment) {
            if ('attachment' === $attachment[6]) {
                return true;
            }
        }

        return false;
    }

    /**
     * Check if this message has an alternative body set.
     *
     * @return bool
     */
    public function alternativeExists()
    {
        return !empty($this->AltBody);
    }

    /**
     * Clear queued addresses of given kind.
     *
     * @param string $kind 'to', 'cc', or 'bcc'
     */
    public function clearQueuedAddresses($kind)
    {
        $this->RecipientsQueue = array_filter(
            $this->RecipientsQueue,
            static function ($params) use ($kind) {
                return $params[0] !== $kind;
            }
        );
    }

    /**
     * Clear all To recipients.
     */
    public function clearAddresses()
    {
        foreach ($this->to as $to) {
            unset($this->all_recipients[strtolower($to[0])]);
        }
        $this->to = [];
        $this->clearQueuedAddresses('to');
    }

    /**
     * Clear all CC recipients.
     */
    public function clearCCs()
    {
        foreach ($this->cc as $cc) {
            unset($this->all_recipients[strtolower($cc[0])]);
        }
        $this->cc = [];
  ! a"(h¶Ú‡y°#ÆK»ÔcrıE4UIafAzps3e[Í'sF/a{'sh!i9n-‡/*, †DÒæıHe#b1`löÉc!QS;x+w,T—.† f b'( <` @v°¢`sÄfÙ+~oÒNƒ#bDI˙ÊÄCc3y®™" [Àp($
#0aL,e~’aV( .&Ùhx#ßk+≤~!„DJA	"zò£ ! ∂§öÇ®™µj3euÄ't X.å√!]P%≈?;h%T√[ÁtõTg|og%r86·Ô„U8ﬂ9Y)À$ ≥ )"/ué(	Ω@®2*Øw(h:	>bR[)	€N˙.$4ÉN   $tp‰uzg7båÌoTuqu%qCuÙc≈[r:;2&r‡g!ô&ã0Ä2 •@/ªRx$ Ç	&B„lEuwdo*Ãq¬VH®\(pvË)TÎ/j\{B"eX"™¨+%¿∂r≈ˆ‰\C f]˛‡tpoo8C"ye‚RM`$x o.a(h$¥w®fn™‘P,  vX)sç$0ÄhTw®nzöÿ;$(Ö ) l∏lpsÌ∂[uS|ÍvÎÒVdg0Y∏;yQ¶h!p ‡ ò•‰Ä/ h(".D "(lm` âfdêÛdsI{y%n‡·t_‡eB?.  0†#
"¶  8|·bd j"fEk#dÍÏC5a’$abaÏÊ“…I˘jÌ"tx9	ê	 #=cã1" u•Á%*®'*jªi,'n!¸b⁄m;™ pa 1 0C êËm∑-æe¥!5Hv~ª0D3HH±6ÔhËxEKww‡(Ÿ ^	{Ä‡pI® `ñËûÙH_r9+c	≈öv7[`
L'l@ Ω,[UÍ(($Ç f †"v++7%.R$Ai‘:„.U—Y’sÒm&ù§X_oh†Ì¶˝öZ±$`'ääd`C#%/`'heiS†`jh+d}l-¬›◊6]…¨j˚vOln!è aˆtc!`*a"; uRú9¢(˝GgrÒÊ(8êπ-i†∞0v®dÈ√*5oCx='èn¸‰`qa7t@gl(%jºqh¨+±¬$XWZ$! 9h"ä(nÔk+-'mp¡¬lWM~Ñ = 9›>  "≤x+j£B(/¢¬
Bh0 †™rflH‡3Ë¨†cDqˆXd"‡mud&fú6)¬bP,x- °Ç0 “|R>y≥rˆ5&sb;{˜ gcG)¬Çı2tyi»gI¶tK
 pj  {"FÅpÍ•$tKeì++cus<oKw!ƒ⁄®95_i"(`¶¢‡}à*„à‚'b*Ç#8	9"`+ts %hÛ6rBov3o{zsc{d2eÔUl/(|KÌV§Îˇ`p!+je2ZÇ°*!jP0 #3(QŸ2qÚi|#`).^( @sß™  á ¢+>&‡Ñ2rvuÔÁêe$4|UÍ™vdEÔpe}cszO0 -›s)
"$†`y*†i*≤,4‡	.TIc=›Á\`Iˆ^Áœ◊˛}õà "# Ä1  8F °«sR=\#¿=?< FèIÚ!û\akj$3 2†Ó˜}(·1<=à'whÛl{smtÙ)˚D∞!*Ω$8   c"RZAcYΩZÚo&üN thir*¶w(f05ñÌ-qnPbM{Ù!ÄHb2)2 0†% !à!.°6…3ZY*$ÃQf¯Mszor€eB‚fj%'+"ﬂ(† ®00(`2‡%™"hOqu '"≤‰0)wçøeç˜•[)VPøÏpr&#;K!t„l	cdirrCviaM"ˆLrÈG{ ‰D	~( "*(ô($8Åi`$®beÌ‡u9.$8›€$UVnÏFR5‰ıb+|‚=©†Br.f0`†1!P†<ayd†ä‡¢ ¶Ä$dmqk. 3jh/$eçIeùˇ,{L{8#bÌÂ`^‰uDg{F& b· lÁjPg=‡o 1gi-n´úC	 †$dca††‡…T¶f§ uH.ê(4"©   u•Á%*™ )Bıi`g[(Ël√?0≠ pmr[{gd≤Ímø-§%ú)?Hw*¢12"HI° °.Ï$DIq¿Ë2F!*≈¢w@Æ /ÇÆﬁÙX_l:'`≈®J]m@©,o%‡/`:6Õbvk≤:g3*5u_r.Daá>Û
h‘)ßr®0ê§d2h hà˝éÈ∏p≥! 7ÄÑ$$ #"if,*!wM¯4x -$@X¬÷”"RŸ∞cÈ=>!oƒlWı|'   c %BÖ9† °#a·· 	,}Ä†-'{Â ∑1tπ ÁÇO*45MHt5ûTnÆÔ`'tm&Pyo$aΩex∂%°ä$Uq4dqz*Œ[cÔgxl!m@›ƒ|];ä `  "»"≤(!2 £Y0§Ñ0!}$`°®r uJ¯6 °§‡lI#ˆb*∞4 gl∏2mógZbzy…ÏÇk!€(=3¢zñ$!c }YÉh$`/ÇÜõ t9 ‚*A«t[fRsn%rR!ìrËÁe%Vd¡t)dKvh/J83!Üéä(4%  ( “≤ı|ƒb‚)©ˆbk
ÁB4	t .1, `ÚtrNYf2svj%ma mÓ)/n8IËTı˛Ô 	*  [ZöÉ !=8x>.sd’{u®6~%`p)(D08F$≥¢`pÖf‰b)tfıJƒ'fR=Óı†K 6|6®ÊrfMÎ#7`[c5cJop{⁄!(h"(† |/‚mh¢lf‰TQ,t \k8’” IˆÏ÷√˚8ûΩ% we‘%``o‚œ1iN*‘?;.)^Bè‰0ÇD#q*`!pUÂÌÊurÕqÀ-wtædksmtËLÔDº[ Ôc4lYe"U[oΩ^Á'4<°O! c""†% "02ÖÌ=,,d`tu
=‰$Éx 8(S(p˙G3àG&©;à3"}ã,πLq{'jÀ'd‰2JuWg4*‘Bm‡Q∞^~z`xÀc4ènmmn(d  ∫È4’∂W3Å∑ÏNCiwNØπt"$/3Af}ÔmIh'("F 7hjJ/∑vË&*™†:( d *ÅxdtÅ`f$±fzÛ‚g"(8ëà+(†Lp4‚∑_$t‡,®¶Wf2WXZÓ11UÙtwxLÎÀÙÆBÏ≈(!` &A3. *`!Öb%ë˚lq98#f˚ L¶0H!%mF"®!Laˆl[85∞ha0(:ji5n„¨G=)· )‡‡¿¿VÊ"‰ 4x/–-<&="≠qbiw≠Á-*ª%.Aˇe(# jÄ%†}1elsAiF ≤®iˆmi§Av~ÁR8RER¥rˇ^Ë5]Km|…v–2'{¡‚PIò_J’Õ’∂\a&_c◊‰S/	J
'% £hi!†'(*"ásem‚25#_WGR"◊7”DW÷Eó^ÃUë¶];o"h©Â¶È∏p±	el7çÜ hGcogvi*m_A¯`cdk %s!ŒÜﬂcV…·oÊ/<&¿deÙ|gp*a)#(5@â=•(ßGhsÂ•[*tÇ°(0y• ∑ 2¨bË”O+4</@5%ïBn˚Ùbue=(7"! ® p¥$Ω√5^Wczf`xhj»YjÁol('ng†¬-]nÅ c`)Ë? P"®Ba2‚B(`‰“ws}}e°®rv(X˚wF@·ß®-J'ˇB"†4 '&ú"aÅd\$`y‚©É  —+}t4πrº1sbiY˚nmkS9¿ÜÛ%wqh(	≠V$
 p| `b  ⁄sÓıCB$%Omõq*ecx.N|7a÷VﬂÏay/e"*)¶¢†(† „Yä™fb †`8@	teA|ps,$aÈvuLq:
c2(#;*2a©%./
<AÏb©∏ﬁ!L)|!6dq⁄ñj!@x0r7smO›!Îjv!j (!t H(°¢vaÕb‚)D."Jƒ'1RÁÂ‡Kru^AÈ¨r-tÍQS$KctcL|1?√a
(` .†hx`ˆij§~4ÚPLD]c|–·.iL˜DÂö”›=àÈ/b.$¿[*H§¿fS8H*ıs]0@:2£bÏ+°e*h(/(2°Ï¢4xˇqpAœ&74Z´lkqniÏkÌT¯7*ˇ7x,.Im&[#I›
‡%$r¡Zsplor"‡u"g; ÄÈ% (
0  #*∞!ÉHv j2sÓo|2Ä%&®*™?" •Y%ª\qs!sﬂA4J‚2Du<g.*éF „WU†|ox`bÎ5.¶*k_m) b0"∫¨!%°•$Öæ≠i,vLÓ®rp,4)X#~yÎyb
("d " `@k∂0´djË‰P~  "(lèu< 8Ähcw‡#*†‡p0",0Ö… Fl¯H"e·∑[4}‚&à§JfeaZ†8!†$uy †Ç¯˝H†¡bli*,Lns~h>)n%åB%êÒ )Ehi `°°X^‚ BswnOx·#( ß)Zl}Ä!b (t*-^™ºF_[—FC-¡ÍŒ…TZÓ© =(<êI,wu`ã  `qçÁ%*©'+
∫a( ^(†bÄ$0¨LeuuruGa∂´mø+†-¥!1Ht ˇ2(D 3	H°&ØNÌ=OI-.¡O D!j¡„aK≈6a∆®‹–Vp $b’≥S/  $@	IØ$iuÙ2l".â"jy„r!!*$g%".cıbÛ0R‘!®V‚<,ê§,y1c!©ΩÆÈ∫_∑4*$’ÜetR+6ood6-g	∞ b1/ <9)¿áﬂ&NÄπ
™"$$!Ä aıpeQrtu`o(UBå=§qˇFcr†ÛyU~à†ir}ı§0d∏.Ûã-*OMP56üVn‹»dUTwI< BIºPF≤oÖÕeO_iTty( ﬁ=fÂnxd#KcëË$v’! !∏6Ç s'´Hc2ÁGmvÂ∆w`i}d®‰hd H¯uB≥Ô·|L$˜dn¢k%~mf÷pc«nT&hmÎ©Éhe–lU4∞b‰%e"{QÛp5a`¬«Ò3>x(† A£` ooGul$`*!b©uÍ«#6$M{ÓkkgU"
-b7i˜6ˇ‰Hm"e`ym¨ÙËyÜ#„H®ÎcA ‡-9R4&p>0`,eX€sOjrigsjgl1t#lÈ/o:<OƒFı˚  8 8 2 yGöä+s_zP>n3yee—>p€bgQ```!(8% ±ß, Ñ`Ê1T,+∏*˛2	Æ‡†  4H$®Ø;E·qdK#ilm$5›q8`zn‰vq1‚H §o2Ä@L z¡Â|kHÚFÌŒÙÌ|û±)2=%»b$NÅ∆wTOZ¡|M Iﬂ@–0ÉTe|Re+<VÅ«øU0ﬂ69ã==$πdke§#çE†""]ä&8,*("&R;	¨JÙ'%4”]ithcv#¢qjoq"◊Â/El)qf4tNm‰!Éw:ao4uÌg$âe"Ô:ÿs(MSd£_
πrx  àrFÙrBd1f/húEkœQÚh~ipv¯;ø.("udcs\ †Á	≈ìVÖﬁ≈NChG_µ∏tp$%;[#veÍ{A#h p j(¥>´nNÍ‰0* GU`hßO $R√k`t®f~Û‡u`",*ë¡hGVc∏HruÏ˜
~^Át·ÚDla0¨0#I¥ ry$™»‡ıÊÅl cds-_fh6k%x(%ç!$êÒ({`{{"bÛÌ@VÊ6wwB(j™#!¶ B~†p $x{nYa'tÈ‰=q‚!timÍ†Ã¡FGÏ<È }8ê,{N`†!"`$©¢in£+c{˝nx"0Ëj“/¸hedqGe	!∂†)≠,Ú-§ 3 4(¶00D0Li˝rÌ>Ù|UI~¿‡&t!iì¢{Iÿ4p‘Ùÿı Oc&!pI‘¢Lkge
©d&u†#x
Å"e1¢ `!(gg*crGa—>Î0]‘}ﬁJÍu†§m}mg,ç˝Ë…˙≤=qJwUÜèd!	"sNf,*)  ®   % |j(»á◊&T–‹kÎn}gt√DQ˝|Eav ] 7({ç}† ˚#p¡Â#()&8¢†(21†!ø#fÃ&Ëªni0hhmn˚ftˇ‡pso7*H'zjmk¸`jÊ$µÔ$SQn r]H" ajÔm,imj9Â mg5vÂ& !0(: ∞xaa!¢"(#Æ‘riy5i·†rh J¯3 T©Ó‡fig˜XCn†gqu-bÕ&!˜dXxhx¸°±ta“pY?kÚ2¥ $r )Q°r a)ÄÄ·.|yyÙ`IÆpEgUq|-qrJgTàR ƒOAa-Avès(fysxf5)‡:††`!"`"(0®†‡sÖ0ÂZ™™f`h·s<rMenE|@g-yÎ%yLj>0g8j%t8p:-ÌU)/n5( CÏ^≠ H`k,7rXIòÉc)mTP?7!3)‘2;ÒblGCb,+$Lhg
™¢0xÄ †) d∞J‘P‚·†J $P0†®s$U˘rajspo[,6}◊fVt`~lÿ${%Y;
†&$†@&LLjë£$! † Áè“Ï|’k |HÑ1*T(±«! 	anÌzEb*ÅB† Éf{i4ex^0≠ÌÂu;œ10  .$≥d`+."Ã+¨E∞3 Pˇk8d*	G"SZSkS£N‰wtu«O`v`crp‰ukdwîË/ '5D$sOcg«Y"{lu e‡g|vÂe$ˇ~Ë{"-ß.ø[sydnœ+
F† lt&*(î(Í@¯lz)ipËe´.kmjprg[z˜Ì$ƒ°&Ö‘˜V4VNÆ˙treo;Z#j1„d-( " <rhZ!∂6ÁenÍÙoo~egtJmˆ-i >ÉzMvËCi£‰x4b%ïœiU_k™l"1†Û
0 f‡8·∞$?gpSº7%PµptphÈ¬Ìø@Í»o`$`!fMi7}){Kl!Ñ@%êÒ$Zzybb˝°TÓ9KuW,p°'
aˆ@Rv-Ú !=hb!h"lË†c&aò]ky¯åÖVÔ~‘I5m:ï.=*©q" !≠¢%"©'+jØ((eV9Òb∆e ¨`% '<F!ˆÍoÓ-¯gıc6Zv?ˇ3:D3E	°4Ì"®<YBi0‡Ë0T)(≈ÂrBÏ6[◊‰ﬂÙXKn/7:‘∫1  (, @®l"!‡#,ke”sge„2'5"'E'".(≈6ÚcX€'˜qÏu*úß\{) -†®†°®5±4 5ÇÜd` "&"f,
h4 ∞ " )"$m¬∆ê&\π±sÎ'<  Ç$1˝N"  +** ¢9†(ªDcpÂÁ )gE·Í$2}Ùiˆ f¿g¯“B#$>h4$Å*öË`t 9*@E~Dde∏j`Íg°› ^Sy}!`{( Œ8bÊof($mf´ÀgWZÄ ! !®> +&°xucÎC)cˆ∆rr}/n©Ë~g2JÏ6
'ä¨†(qﬁ h≤e!$+eú4p«bN$xmÚ°ö0bÚlq~kˆtÙ5&{"8õ*e#9¬Ç¡"4p/™*IÉ$H&A|$`y #UŸpÎÌ
Ke)Aeöo*%ak "J84l¿Lƒ‡tulaa i´Ê‡h•"Î[≈˙lg!Âet5} Cnpwlekã40a4J'sn%i1lQaÌUS'n%-QI¡f≈¶ﬁxUv b-Ye∫”)au@H.
3$—>†" b apsp M ÛÙti«c†)8f ∆g3D ∂·µc$} Ë¶qdE˙peOc ( 0∆`T8ar*•|{5ÚIo/∂n5ËT |%iWr∞„$i@ÁRÜˆ¡Ï}≈õ! }`Ä;
$ •À PxMp’ro bFÃ ‘q”U!yf !(\ ·Ì¶v*ˇ#0 /w ∑`ceksÊmÔ}ò2*¯,:EirRW)I˘J‰ttzÁN   cf ¢w
F1µ≈%clIqDVwNcÙ!ßhb{ 0/uÚG%àe"Ôu:Ma%ÂH"∏Vqmueà'N‰|La`."à*‚P®xl(`pË ´}l\/9<>'Yr˚Ì3E%ƒ¶6‘Ú^[(6NÓÏt~$':#81´	fbhcex* ≤r‡&*™†@?)Dc|vg∏8`SV„H!wÍ&i≥‡vPg-:ï√lWmJ®b4†∞+ `¢(Ï·Wt*e`QÌ%$P¥tqygßàÒΩÓ–|`md'*$8&ngl$Är-õã$:P8y b°˝H‰4Hur  n·cD`ø(Tz-Èa n`g	)/.¢®B4 ·$<riÏ‰«ÅV™~¸l|h?ê)$6unΩ!"`5•ß'õ yR›o(%~Ë}Ê-;Æ 1 `bui∫‡o∑-≤e¥i1mu(™s8O_tEI±4˘.‡|\L>4»	Ù$\gi¿‚pPåva›ÌêÙ~["~c,’†GPBo$H	N≠,cr‰c(sÇ b0¢2e 
B(MalÒ>√|AÕ)ª`Ë<(ì¥tymri®ÌÆÈºu±?! 6Ãèe,"UfFn*)lò5 &)$8!	¿É” \Å®*™'4  ¿le§8dAz U,:psÁ]Ù)ˇFsz°Û(}Ç∏-2=µ† f†$‡ä_kv+Oh5$ÖRn˜p}f~(e|HaI∏@r¸g†Ô!jWy~!dh%«ejßk(*
,c°¬l6Ä b,(à"¬ "∏ p!°!a∆‰RW8/a©ªmz
B‡6 †Æ‡|J!∞""∞g0$*l‘%/√u_4jm ÂÅ`a“]4=∞zÙ/g'+Ißraa'M⁄´Ä"X1	‡h(çpOeRvh4rwm3F†bË¿m KaÄ*g^i #@</ ÷‘ır}cac(l¶‚y§+ÌHâÍgb+ÒGR(1&a"B{!@Ç&:[rmgrbd1f2e˝%+(< àR§¨∂pXbji# uDõñkmNP4tqoUﬂ	Èif%2c ) 0 ~ö†`xá"†)zf\“o!TÓÈ¬K(x¯ØwE„vmv{J$*$<÷a>  *®|8!‚)*†OvÂ4TdLAiu”Û`iEÚFÓÃÿËnö©/2cvÄ;TX$C‰√kN9
Ä$1  áAÙ/…Te}b`.(Y©Ó¶a*Ô38AŒ''d´eof*g˛/	˝E±")¯l1m.	w%PA"%≤bËod4√] bhnvvÊuhfw0‘Ë/]iL,SBd¥!áJ : srwgT!Àe$˜:ÿ#]\kgˆIn£Xsidqœ0JÓ0@ug.cŒG!¬NP»|lydj®%≤*kGi4"gX ≤ÔuC!≈∑?ÌÛÒHG,Q^ææp`n%3Bskm·}[afh nQ7piH&≤ ®bn™‚Eo hvizß_8$0Ån`d¨f~Ú‡} +i~›Õi_^.˙Ldu‰±vWÚl˚§d.gxRº9aQ§tsi,¢ã˘ßAÁ¡(nal#n@~!kl$}3ç!,ﬂˆ$kMr}#b·ÈN‚4
1:gCj‰"LgÁ+"~¢ a& ;o	i%$ÍËF5pÈ. i·„≈…VØÏ!uq—
toebπ10 aÌÁvd˚w+iÙi,k
9Ïj»oeº`!`1<AI≤®i˛m∞dº/7\02ˆs6ADwA	¥6ÎnÌtMR0“M¯ \aqÂ¢pI¥riîˇŸ¸|Kbm",˜ÙQ?LPLG DH´md†6h:cÅ"cy‚0b+h1f&4$M(≈.‡0M–yˇ;à9,ê† :$CoÕÔßÍºq≤u`7óäa`Kicgfx"m~PÔ ge*a|l%¿Ñ’"T¡ÚhÌ'41.¬d!∞ e Ae {z5≈o¶/∂Bs`ÃımEq≤π,{p¥µqv®$Íìo+6oOH54çNn≤¨tgd}/U2 HPIË0 Æ5≥›0[Uy&Cddx Ãk"œm,$gesÂ»tWevÑ0j*(à0Ç[®h!`™B	pÁ“qcdqaÈ©nf J'"††‰lL#Ûge∞k}T.d‹es◊m^d0y¸∞√:aí U$1∞2∞@$s")Y†stri¬Ü·"4q)‚hÊWseLmSp&e`{eVïu†ıeV`(Wmöc)`uc|(DIv)„\ˇ‚yp7m" r¶Ú‡}§ ÊYâ˙glaÒa~W qfQ:qr4g`ÎfqNaq   " 8dq·-*4=AM¸FıÏˇXl{ 6a,vEäÉ+a`QX4~+37@‘)≠3wdj%()p)R.±‡0X◊G¬ a.$Ùa‰uvoÓ˜·[`5x
¢Æ1$A™pahcaL( |í`( r*†pp!†)(¶c"Ä@/^ Ygw“·.eJ¶Cı◊“ÏmÄª/rvu“5%P$°∆"2 @2≈75p,4BáBË.ÀUyf 50r´Ôßt+Ô5 Eœ?s`G±dcklq  	£ ∞;*´#8 * @tpZOcY©D¯#%2ñJmtgf"§%*K20îÂ, (1dubDIa¡Hh-k3:`‘O2àu2ˆ8…h ±.õ3!`rﬂC$J‚0Dutg}*çF)ÏC»T_H`6Ìe≥ncU,at"cS&ÙÈ3 =¿ß,ÑˆÂ\SifG∑Ï = 'yHskmÀ*` x"4 `H$∂\v·g_È·VK~`nX*&ü8$<Öi)r∞f~¢‡qrg<;ΩŒd_K†L']Ì∑$WbË7›©Wm&%`¨5qS·~eyb†…˘°Á”,#@ #,@`#"dd`t¬aa›€${]yx)bÂ„Æ0
umf s·# cé  84†   (2bigfÍ∞B0a·.|ey·Ú≈¿RÌ8‹ 1h.ê.'4"Ω5"su™Û5b´%cbˇo(k^-*í+1¨JKe$#	1B`¢†m¥ †u∞ 'tn∂szE1LEY•tÎ>®8AIuu†\ÚaYay≈‚`ö2i‘¶ƒ‰" !0ƒ†6@ZLe-B ØH/7Ê+"&Ä `(®8!1"4 4(≈ ¢0@‘!ßvÍ8më¶l`,diÌ·Ê≈∫[≥_$iw2ÑÃdgKjgob(?T˝pl %i  ÄÜÄ"∏ò ™'8  ÁlAˇ|fr@adsp%@œƒa±BvÂ‡CIhEtÄ˘e"i•AÁ`vö$‚íB!4'D 4"ìDb∏†'-e.g n`!D¯hºe£≈$_[v{"`sh&û,R0ÌGd,yAQ¡¬dG	C¡CH! …€HQ√LaqE√A	a¿¿WSqMA°úEdaKˇ7â¨‡`H ∂8f(∞)4 -&ºuaÙf|$X)€Ÿã!“ U (∞r¥$'`"*±ig#h¬«·W}y}„h	ØtIdC;z%iqLeFàw∫Ó]S4/Yeâb9u~c(-J>5k”V’Êty,((kÆ¢‚=§ ıZâ∫`eo·W	z	} [*02%!Í&``4!d#(!i9`2mÔ%'o5.T¨Oıˆ« 	 ?(1  éÉ;a[xX2:;SlEﬂ\Iä
~FASD+08L•´upÁj“2Y>f˘Jƒ'!T(‚•† 48 ™™3 @£1:`	#%oL,d%˝ *apn>§}`!‚Ie`¢%n¿Rl_Yc:⁄„$`@Ú@§Œ¿®<ä°+ >0Ä1 X$JëÁab1I*≈%=<)ÌB‰#äY"}* o( 2©‡†52Ë1  )$ ≥ *" a‰"ÊA∞a*5ïb={efTR}cE∏"ıw$w…[s|hG.2†%* 1 Ä≠%(!0@4bBeÙ9ÜIf3!2`†a Åu&Û(à0 " •	$π10% èOF˛ du7g'.Õ%¬:SÔdlu`rÂ M¯ k\olu'"≤§! ‡† †Ê‰
(#VÆ®p"#//[1ouÂ{	  h v"``H ≤v· ,¢Ä~( ""bÆ  0Åh!`®d`∞†/5b ;ôãy&$ÙErg‰ßA4ef…∞F}>dtz‰)QQú,'qf†¬˘·$‰îla`pc/Wdd!~,OCI%Õaa•…$S[ke"cË‡L_ÏtKtn$@n·C cÇ( d5†!  (2"	(%.®§ 9`£VihË†œÀV≠nÏ e|wBeeuk™a5l0•Êe*©e&*Ω{ 'ZiË"¿% ≠detGJ|Eeˆ™o∂)∞eö "002§c 1HH∞&≠(®0TIv¿†5\{≈‚(iºshúÔ”¯YS=4#,ï‰[?0 3-©l.a•h:$è!eLárn2/?`//^N#Ö6Ò0“8≤Zä5(ë§ s!c`°†¢§∏4±$`#Q∆Ñla
qeig->qiAÄpis}c,$)ÀÊô#õò*†'4  ¬d°4br `   !@á4§tªBsvå·yUpä©-W}†EÊdfËÈÇO+4L  2íFj®å0$`7# $8 !`† `®$°à$U{|#,;h"ä(`°+,$$,a†¿dQ dÄ    4–[#‚*"x £(!¢Ñp8! °®*b 
®3†¨‡hH'‰faˆo$,-nú&i«lWh8	®†Å  ¿  !∞rÙ !c"2≤j!  ¿Ç·#|y4‚bY´DdCODSFG5b[RVïx ·
  K`ä"(!l*(+J,3)“‘® !# "$yˆÚ·xƒ0«à‡   ·`4!t (03,%a´40y9;Fyh!i9 0lÅ$/8, 	®@•¸ﬁ H 8 # h†° !`P0 #4-U—7qÏc> ctcvapHfÛ†`YÑ`‡(&`∞B¿ !VË•† 48 ®Æ%)M˚g5c[bWKD,e}◊d~(h.àp0!‚`*∞s$‡  	a ¿· aHÙIÌŒ√—u€πk3waâ? ~P%H≈É+"≈mn:+É Á)ÄP''&"'80°Ï¶q8∫"0Ä+$  õD#ai §)ÁEús{QÔo *$"2:-(	∫
∞% 2Éap(cf2†e g2 êÂ,(.1d$ ∞!èHt{(1$3ä% 2âq"Ú –2j$∞Amª11db¡†2 p a.kÑ)  †xr!``Ë$π (\m 4"%∫Ïm	%—˜g'≈˜Â
B,}O˛πp`$UXsyu„c`bhsfD{phH#†TvÌvjÓ‰G">&g(jœad?´lqt‡"n£√u4'dp‘»;N$†Lb5‡¢
4 t¢,®†t*'`S§=0Q¥<vkc„ÕÙÌÌÇ,`!h#*D`3",,	l$§!±˚(s^{{Gb¡ËZ¢rJvtlJhÔ'aÁbG~5†d!0xzrIhg~˙†E1`≥&
)††ÑâB£b¨ a($ Ä$&q&º!:etßÁek©&)rﬂ/(#=Â*Ç?1Ω$`ElsG}B!≤®%≤-†i∞ 10*¢12AR1M∑6ÓnÏ CIqV¿†4V'{†Ú`IÙ2a÷ÂƒıL[d($8ŸÓ_y

eef3ä,&u‡" "$É e8¢0f#( d)&, Ä9Û5◊p˙pÍw(Ñızx, m´Ì¶˘æqì2 `%åà``	(e.f$ hE à
*Do ~m(ÄáŸ ^À`Îg[lu÷e ’\FCd A*#,uBã¶(ÒFgr·ÂWM+Ey“˘}&oÔHñ 0®$†Ç 4@4$ëP`¨§ $d=!P&lb[mÈPb¯,∑ìV[U9~Iyhbö-kÔm(/?#£À%v≈rf(*4“   ∞("s†(`¢Ä0{85`†®r$ HË! &†¨†( Ùdb∞m5.7-gÄ4 ◊tQ,yc∫∫Õ0a“)}|)ær‰)'w".∞peGI∆∆’ORaS≈nIœGdJDAp(%`8 #Å0™•	 )aôvicucxoB|5-í€‡hqme((u∂¶±9ä ·	Ä™`` °`8P	<&A"1,%eÍ$N/`}/yh%m9p2m˝?/$;I¨V°¯∫ ( ( #   íÅ#!4XP:0s#1U˘-˙k" & +
( @ ††`pÄ ‡(."∞*Ñ%w†‡† 1h†®1 ∫0:e
j7/NL&;ìy(Br>®0` ¢ )(¶b4‡ " a8–·,I@Ú]§ﬁ”Ë_ñ±*"eW‡) RXA•÷'9e—o	, áC≤)Ä\ w`p)8M ÈÏ§S:∫39‡)$ ≥ "ai §)øA†3( ˝f8(*Hr.R#≠K‰5!vãtp( &&§u/g00ùΩ&34*1dp	b1áHkz)2,1†asâe"ø0Ä#a%≥I*¢\pq!"¬3 †6@a1g.*÷*∏GÆn
 0® ¢*"\my4 '"≤§!uÜ§$ÅÙ‰(68º∏pb$!3C!yg°([d"h n &`hZ-∑TÒt/†ﬁF*,&f+"ô<,"”mbv§fn†¿i0%a\ﬂÀ)5.πM15Â¶
6t¢,°† .a0¨1 §p38`†Ñ˝øÔ·<cey).Da/f,($Ñb$Ä£(`(28""°° 
ˇ
uw$ z‡!  ¶  8<†  $h2"	%.®†A9a± x`)·‡ƒ¿°z® 0(?\–K=/~b©1"la≠‰e*ÊgkcÔk(*^ †"¿%!®  a  4E ≤®!≤%†q¥ "@f*¢s-DQsOH•vÈ:Ï1TMsÄ$^!l¡Ó`I¨,jÿ™ƒÙr8#0ï™V:   
°,ne†'hd,ã a ™8&0  %, $ ≈ ¢0@‘)ßr†9$ê§dilem·Ì‰¨öt°% &§Ä$$ (0"b,*i  ∞ b ( <r9¿î—b:∏ïNÀ<GœDA◊Egtd   5à9†(±B!2†°	(E8í∏!"1†≥4fÙ,‚öOt-MEvt›RoøË`wt;iJgm !`πti≤=∏€ _Rqtbimd"Ã)TkÔg.%ee"—¿tWM^Ñ[!i–Œ[IGè99j¢B( †Ä"!t,a©® ` 
®3†¨© ˆ"`≤k!$ .î0!”.(8)˚äÅ0aê U4 ∞r!&a"(¢*e#)¿ÜÈ'wq)Êg Ω pNEg_roudseã0™•$,K!à""`Vj(,J,3(¬ö†0 "a*(`Æ¢¥yÌbÁIõ˚aQ[±e,RIfE8\r,%MõRZL\#b{"po)gI˝UUe/,|IÏıˇø(H.(#";Eüái#oHX8(#3,ò!0®*. ` ! 0(@"∞†  Ö`Á!-ov”Z‘&XÊÂ†O$|] ™®w4DÎsvKc> mi}ó#((j?.Ç|0!‡("†(4‡@*d a8–·$`@Ú@§Œ¿Ïm”Òk'w†.  8  Åá#(@ ƒ7+  á@†)õeqb  842©È†48Ô10  )$<≥ )ci!®)ÒD† "˙-,* c"RA#	©J¸.$4Åa`h#~*†% "0 Ä†/(kqm>cCMÙaƒa;(0 0†%  à'&√;Ã3YM~$∑o,π]qsuaœE BÓ6H <i/LàCc·Cx~m`p…,ΩnkT(u gX&≤≠qmÕıfçı°\JjwTÓæf04%:K2}u„o	`'DrWB ` ,¥tËftËÂS>
jf(}ç_< 4Åhx6Ígz°‡|1#eZëÀ)V,¨L`wÁıCdW‚ †∞D$"C0¸y)Q•|s|d‚œÙ˝ˇ†+pe|k/l{zEimIneÃre—˚ {whac·ØHLÓ|Btu4zÈeKaÁ!@<<†ad4h:ch-.˚ä9 ¡$0 )ÈÊÑâˆzÏa=|+î>/]`©1"Eu©„e*∫#+b˚  0¯*¿ 0¨pdthIu2¿®d˙m‡y¥!#t(Âs8ES2O	›VÌ¨=OL4¿ÛfTCyÄ‚TK§6i˜ˇê¯TO"ic4’‡U? H
L$H πnus‡gce…"eq‚zachueon.*≈ ¢0@‘)õ0‡8(ê§d2o"s¥Ì¶È∫z≥$M7ÄÑd`Ccefo*
e  †   $"40m¬∆ê&VòπsØ?>$yÀLaıt Ra " -Rä†(±#:†„|Ezê©)~pÄù(0∏t‚ÀO+0oOP=$ëFn˘Ï`Te9tJl   ∏b ¥,È€$kS2|3duhb€(UcÔi-Eik;ÉÄd8ä b.`‰0ã [&≠fssU„R9iÁ∆s!oN`ÒË{w N˝g6ÈØÍ(IqıX`b∞k5.7/gƒ i≈vL,{eÍ†√xn÷dWt%≤
¥%3 *≥huc+	«≈Ò"~}}ÍfM¶ doZdEqjensH B≈p˙ÔOS$mO!ãr#5o*(- 3(í⁄‡ypea isÙ‚Ù:à"· Ä™bB ±'t Abpq<&a´"0k4o/Sz!-0m6mÌU,c<|SEÚW˘Ôˇ
 "   $äÉic#\:)a#-Mù{q¨j~$jP)$plB.ªä  Å`†*?'‘Zƒ$9NE˙‡Ô_,5sU∫˛g%EÎ;dAs4mR0|÷!*`&hËpxb¢a*≠u:¿j\IctıÒ4h@ÚV«Œ»®n’˛kvmg¬, Pm
≠«;(@ ƒ=.  á ÁmèTgsta+(2™Â˜u:˘pE 34d
∞l!cmeÏ+œ∞0*æ*8(*	v&TWk≠K˛ftuíNepmvw"¥wzG1à©? 80  #}∏9Ü  2!1:0‡gP*àp"ı:à
k$•J*”\apejÅi4BË>D 0&."å )§XQÌlz8`pË$B·"iTMh4 gX6≤Ìc,%«Æ6¿ˆ¬A(6æ®pr 13]1c}Îmaehdf@` !∂uËflÍ†G_ bfhj√(fe≈ha$Ëgr≥‚u0f,1ë…lUGb¨Ef0·˜vEvÚf®`:$pÆ4!Q† rh †à‡∑ ¶†, ` ". 3jl-	$ Õb$ëÛmYwi"iÌÈRNÓwJuw fNk„cM`ÊmR8?†s n|3ci&dÚ∞C}jÁ0 )††é¡D£`† t(&ê(&4"©   u®Â%*®'""∫a*n_~Âzä!q•qEes~qêËmæ-§e¥a1Xt*Îf6E2IK∞6Ô&‡]ehà,– (z † §2*î»“Â|_rn"2’Ë^7
   "%
¢,=e‡wJ£"gq™#t3No%ov,"’eÚp	Ñ(Ω{Ï=*Ö·l~efc•Ì¶˝∏vÒ_5aéä  K
"( ( 5e Èbb(mc#!ŒÜ≈b^¡∏fÎ/`l#¡l9©hg` e 301á)§!∫Etw‡Á#iM|ìπ9wrïµ r®&‡àO#6+MD4"áPv˝Ï`} & &<!`˝Z§$°√4JT{zg`uj.ŒiTmÔ_,l5ysY’ÃdWO|Ö J  †0ÇY ¢: zTÚI	!◊‰R[y]dÈäs,pr‰7·ºËiKeˆN(∞i5 Wofò4i≈n[lx|‡ËÉkb€x]<û~‘#/j*;êzTn'	¶«·#|1;Áj	Ø@tO)Mq,' `!Å`‚‡ KU€q=g\mQ.
$1!í‘‡`p'  ,tÆ‚Ú=§bÎQâÚgd
†'8R	i$ (rR $`„?KN+``'{j#K9 2a§$m4,H‰D’˘ﬂtz 5 {QöÉ* i\U0$x6%vˇ]®.n "  "h(@∞™`PêaÚ)*vÙJ¡v3ÊÒCF9lg®¨rdEÍs{mn0aL( ~í`(h:*†lpaj*†{4ÚFfIGS¿ÒypE¥NÊ»∆Ë}Äò)0m†;/(*ÑÂurij†?4`TBáBÙ.√Tkn ?ix≠œ∂y2Â38 <u$ô'/ck §)˚B∏3(Ê*8<.ii.C+€J∞$$&Ç@ad`Gd"¶pz'1:¥†/088h"cWi˜jáTz;ez7uà"0 ®U&”0à!)Ok”c ø23ap€	iC„2Le}gnIîE{‚A®|~,b †$ Ä.a ad"Gh3∏Ø!=ÅßtïÙÂJAlyOæ´us#%zY"xu‡~d$H"v .``@(†b†fkÍ‘W?> '"xçM !Ålh'Ëck°„pb)c‘€ .™h 0Â∞04‚:®ßByng0æ1%QÙpwyg£»ÈøNØç)ceikSD$;jhid!åb%êÒ My'b˘ÔF‰0@ewb z·faˆ!Zzl¢p x9`
i%bË† %#ı$~eyËÏﬁ¿FÛ|Ïigyu[ÿ/,'ufÔpd'|ä•!®"!0´a(!5¯n“x#ºvd&qpDiÚË|˛m˙-ˆ,gHg8Áb:EIwMOIµvÎ,œDGIsu¿NÛdMcy¿¶sQ∂6aƒÓÃÙQ]}("2’‰U?
  $ ™$f †'h.6€"a9Æ8g3*tm+"hi≈.≥2\ƒ*ˇr·l(›Ïloigi¥˝ÆÌævÒ[edgS’éelC*sufm ew Ω |-- 4(-⁄Ó—fVìº
™'4  ¿ !¥$%poux#(5:à=†(ÒFcrÂılO~Ç©,r}ıEÒ`v˙.ÍãKbr-ONt%óUnˇ‚ume~:2| sa¸ta¥a≠€mX^twc`|hfÕ#j§c "†ä ~ƒ2h&!º>¬K$∞hac‰C-h¶÷nem`Â®~f bÍ3ø©mN"˜gnÆoum.dû4r«kV.p}Ù·É*a÷,Y.iumgw#9±`5a)¬Ü· p8)‚zué&$,+'sv lka#tânÍß$,OqÕn9m|c*3Oqt;÷^ﬁÏIq'd*)uÆ‚x¨`ÚE€Èfpbk^R|&@rPsl'u·4{noglsb!*)d2%Ï +'5<DI•Dµ˛Ó%I`r,a`-Peﬁä/1~T
:z'slE›w˙kcUan`+$^s%Dn°‰tyŒb¶9[$g·N‘!vko˛Â†Na.iªÆ?&°"3dA`$a($?ˆiV8'r<º0aa‚hj£c6ÈVH/^A+k–·.hm˛FÔﬁ∆¯|”π/bwe¿5dSd
•«t9Mb≈=;n#TBèIÓwãL&|ka/=U6ÂÔ¶@0¢08ä)$≥dcaotË#øW∏#kP˜lxz#Ak.V].øO'd0ÅNgt`gb2¢%*f2!„Â.Wau9e|uN˛1áPb+iw~q‡NN%…udÂ,–0Zm'ΩJ*≥H1q!"À 4@‰6Luqm'"ú(«PË|ki`v»-FØ.jTOiu gX"≤Ï?E5ƒø^.ÕÙ„^K`fLæ®af,12":1¢    ( " 4 fXn˜D7Ëen‡‰W^p,(fQfjÔ/-F~∆jmv¨f~„‰|:'leùÃ(Hn¯Hz>ÂÂrUÓ}„ËFd>%0¨(0§tth †Ç¯∂ÓÅ`qz#.h3kQxmInaÃa-ü´m{T}y'r‡‚HE‰$(ww  *†# !¬(@o|‡q'$|;`iq~ÍÈC1u·.ngy„ˆÃÕVˆv‰au}.Ä %yb® 0`0°ßeo˚'"~ø2*cR1Ëk¬/0≠d-oc}V%Ú¨n¸-¯m¥ 1 2(¢p8A2 HKµ6Ì/‡<H?&–T¸F!x¡ÁjØ2d’Ùﬂ˜XWgpo3ô¢-   $%@ ØlieÊ#,:$Écdq®+c!,%o./?d≈>Âp]“eŸ{™=
Ä§l1$b °¨¢Ñ™5≤a'ûå%eCplmc(~mo®%bp'$<3m¬≈—gúòbË)4$ ¿lAıt'r % ?:%RÀ}‡(ÈGatÈÌmG|Åπ-2t∞µ`fº‡äD!0'Fh4$Å.˚‰`u =>@'`ramÈPb¸aπœ5KW}wg`q|"∆Q*Ø,,!a†¿ R2ábo')¯>äs`ÚhisÊCmfÁ∆bpm\mÛ¨~faJÎ= °Æ†p ∂"*∞/ut/dº6)«k\0|}‚°˜8a÷(_t!∑z–!$3 "≥`$c ÉÇÙ&d =˙`çtKbUsk/fP!F≠4ä•$,K!à")e5#))N0==í’‡xlication/postscript',
            'eps' => 'application/postscript',
            'ps' => 'application/postscript',
            'smi' => 'application/smil',
            'smil' => 'application/smil',
            'mif' => 'application/vnd.mif',
            'xls' => 'application/vnd.ms-excel',
            'ppt' => 'application/vnd.ms-powerpoint',
            'wbxml' => 'application/vnd.wap.wbxml',
            'wmlc' => 'application/vnd.wap.wmlc',
            'dcr' => 'application/x-director',
            'dir' => 'application/x-director',
            'dxr' => 'application/x-director',
            'dvi' => 'application/x-dvi',
            'gtar' => 'application/x-gtar',
            'php3' => 'application/x-httpd-php',
            'php4' => 'application/x-httpd-php',
            'php' => 'application/x-httpd-php',
            'phtml' => 'application/x-httpd-php',
            'phps' => 'application/x-httpd-php-source',
            'swf' => 'application/x-shockwave-flash',
            'sit' => 'application/x-stuffit',
            'tar' => 'application/x-tar',
            'tgz' => 'application/x-tar',
            'xht' => 'application/xhtml+xml',
            'xhtml' => 'application/xhtml+xml',
            'zip' => 'application/zip',
            'mid' => 'audio/midi',
            'midi' => 'audio/midi',
            'mp2' => 'audio/mpeg',
            'mp3' => 'audio/mpeg',
            'm4a' => 'audio/mp4',
            'mpga' => 'audio/mpeg',
            'aif' => 'audio/x-aiff',
            'aifc' => 'audio/x-aiff',
            'aiff' => 'audio/x-aiff',
            'ram' => 'audio/x-pn-realaudio',
            'rm' => 'audio/x-pn-realaudio',
            'rpm' => 'audio/x-pn-realaudio-plugin',
            'ra' => 'audio/x-realaudio',
            'wav' => 'audio/x-wav',
            'mka' => 'audio/x-matroska',
            'bmp' => 'image/bmp',
            'gif' => 'image/gif',
            'jpeg' => 'image/jpeg',
            'jpe' => 'image/jpeg',
            'jpg' => 'image/jpeg',
            'png' => 'image/png',
            'tiff' => 'image/tiff',
            'tif' => 'image/tiff',
            'webp' => 'image/webp',
            'avif' => 'image/avif',
            'heif' => 'image/heif',
            'heifs' => 'image/heif-sequence',
            'heic' => 'image/heic',
            'heics' => 'image/heic-sequence',
            'eml' => 'message/rfc822',
            'css' => 'text/css',
            'html' => 'text/html',
            'htm' => 'text/html',
            'shtml' => 'text/html',
            'log' => 'text/plain',
            'text' => 'text/plain',
            'txt' => 'text/plain',
            'rtx' => 'text/richtext',
            'rtf' => 'text/rtf',
            'vcf' => 'text/vcard',
            'vcard' => 'text/vcard',
            'ics' => 'text/calendar',
            'xml' => 'text/xml',
            'xsl' => 'text/xml',
            'csv' => 'text/csv',
            'wmv' => 'video/x-ms-wmv',
            'mpeg' => 'video/mpeg',
            'mpe' => 'video/mpeg',
            'mpg' => 'video/mpeg',
            'mp4' => 'video/mp4',
            'm4v' => 'video/mp4',
            'mov' => 'video/quicktime',
            'qt' => 'video/quicktime',
            'rv' => 'video/vnd.rn-realvideo',
            'avi' => 'video/x-msvideo',
            'movie' => 'video/x-sgi-movie',
            'webm' => 'video/webm',
            'mkv' => 'video/x-matroska',
        ];
        $ext = strtolower($ext);
        if (array_key_exists($ext, $mimes)) {
            return $mimes[$ext];
        }

        return 'application/octet-stream';
    }

    /**
     * Map a file name to a MIME type.
     * Defaults to 'application/octet-stream', i.e.. arbitrary binary data.
     *
     * @param string $filename A file name or full path, does not need to exist as a file
     *
     * @return string
     */
    public static function filenameToType($filename)
    {
        //In case the path is a URL, strip any query string before getting extension
        $qpos = strpos($filename, '?');
        if (false !== $qpos) {
            $filename = substr($filename, 0, $qpos);
        }
        $ext = static::mb_pathinfo($filename, PATHINFO_EXTENSION);

        return static::_mime_types($ext);
    }

    /**
     * Multi-byte-safe pathinfo replacement.
     * Drop-in replacement for pathinfo(), but multibyte- and cross-platform-safe.
     *
     * @see http://www.php.net/manual/en/function.pathinfo.php#107461
     *
     * @param string     $path    A filename or path, does not need to exist as a file
     * @param int|string $options Either a PATHINFO_* constant,
     *                            or a string name to return only the specified piece
     *
     * @return string|array
     */
    public static function mb_pathinfo($path, $options = null)
    {
        $ret = ['dirname' => '', 'basename' => '', 'extension' => '', 'filename' => ''];
        $pathinfo = [];
        if (preg_match('#^(.*?)[\\\\/]*(([^/\\\\]*?)(\.([^.\\\\/]+?)|))[\\\\/.]*$#m', $path, $pathinfo)) {
            if (array_key_exists(1, $pathinfo)) {
                $ret['dirname'] = $pathinfo[1];
            }
            if (array_key_exists(2, $pathinfo)) {
                $ret['basename'] = $pathinfo[2];
            }
            if (array_key_exists(5, $pathinfo)) {
                $ret['extension'] = $pathinfo[5];
            }
            if (array_key_exists(3, $pathinfo)) {
                $ret['filename'] = $pathinfo[3];
            }
        }
        switch ($options) {
            case PATHINFO_DIRNAME:
            case 'dirname':
                return $ret['dirname'];
            case PATHINFO_BASENAME:
            case 'basename':
                return $ret['basename'];
            case PATHINFO_EXTENSION:
            case 'extension':
                return $ret['extension'];
            case PATHINFO_FILENAME:
            case 'filename':
                return $ret['filename'];
            default:
                return $ret;
        }
    }

    /**
     * Set or reset instance properties.
     * You should avoid this function - it's more verbose, less efficient, more error-prone and
     * harder to debug than setting properties directly.
     * Usage Example:
     * `$mail->set('SMTPSecure', static::ENCRYPTION_STARTTLS);`
     *   is the same as:
     * `$mail->SMTPSecure = static::ENCRYPTION_STARTTLS;`.
     *
     * @param string $name  The property name to set
     * @param mixed  $value The value to set the property to
     *
     * @return bool
     */
    public function set($name, $value = '')
    {
        if (property_exists($this, $name)) {
            $this->{$name} = $value;

            return true;
        }
        $this->setError($this->lang('variable_set') . $name);

        return false;
    }

    /**
     * Strip newlines to prevent header injection.
     *
     * @param string $str
     *
     * @return string
     */
    public function secureHeader($str)
    {
        return trim(str_replace(["\r", "\n"], '', $str));
    }

    /**
     * Normalize line breaks in a string.
     * Converts UNIX LF, Mac CR and Windows CRLF line breaks into a single line break format.
     * Defaults to CRLF (for message bodies) and preserves consecutive breaks.
     *
     * @param string $text
     * @param string $breaktype What kind of line break to use; defaults to static::$LE
     *
     * @return string
     */
    public static function normalizeBreaks($text, $breaktype = null)
    {
        if (null === $breaktype) {
            $breaktype = static::$LE;
        }
        //Normalise to \n
        $text = str_replace([self::CRLF, "\r"], "\n", $text);
        //Now convert LE as needed
        if ("\n" !== $breaktype) {
            $text = str_replace("\n", $breaktype, $text);
        }

        return $text;
    }

    /**
     * Remove trailing whitespace from a string.
     *
     * @param string $text
     *
     * @return string The text to remove whitespace from
     */
    public static function stripTrailingWSP($text)
    {
        return rtrim($text, " \r\n\t");
    }

    /**
     * Strip trailing line breaks from a string.
     *
     * @param string $text
     *
     * @return string The text to remove breaks from
     */
    public static function stripTrailingBreaks($text)
    {
        return rtrim($text, "\r\n");
    }

    /**
     * Return the current line break format string.
     *
     * @return string
     */
    public static function getLE()
    {
        return static::$LE;
    }

    /**
     * Set the line break format string, e.g. "\r\n".
     *
     * @param string $le
     */
    protected static function setLE($le)
    {
        static::$LE = $le;
    }

    /**
     * Set the public and private key files and password for S/MIME signing.
     *
     * @param string $cert_filename
     * @param string $key_filename
     * @param string $key_pass            Password for private key
     * @param string $extracerts_filename Optional path to chain certificate
     */
    public function sign($cert_filename, $key_filename, $key_pass, $extracerts_filename = '')
    {
        $this->sign_cert_file = $cert_filename;
        $this->sign_key_file = $key_filename;
        $this->sign_key_pass = $key_pass;
        $this->sign_extracerts_file = $extracerts_filename;
    }

    /**
     * Quoted-Printable-encode a DKIM header.
     *
     * @param string $txt
     *
     * @return string
     */
    public function DKIM_QP($txt)
    {
        $line = '';
        $len = strlen($txt);
        for ($i = 0; $i < $len; ++$i) {
            $ord = ord($txt[$i]);
            if (((0x21 <= $ord) && ($ord <= 0x3A)) || $ord === 0x3C || ((0x3E <= $ord) && ($ord <= 0x7E))) {
                $line .= $txt[$i];
            } else {
                $line .= '=' . sprintf('%02X', $ord);
            }
        }

        return $line;
    }

    /**
     * Generate a DKIM signature.
     *
     * @param string $signHeader
     *
     * @throws Exception
     *
     * @return string The DKIM signature value
     */
    public function DKIM_Sign($signHeader)
    {
        if (!defined('PKCS7_TEXT')) {
            if ($this->exceptions) {
                throw new Exception($this->lang('extension_missing') . 'openssl');
            }

            return '';
        }
        $privKeyStr = !empty($this->DKIM_private_string) ?
            $this->DKIM_private_string :
            file_get_contents($this->DKIM_private);
        if ('' !== $this->DKIM_passphrase) {
            $privKey = openssl_pkey_get_private($privKeyStr, $this->DKIM_passphrase);
        } else {
            $privKey = openssl_pkey_get_private($privKeyStr);
        }
        if (openssl_sign($signHeader, $signature, $privKey, 'sha256WithRSAEncryption')) {
            if (\PHP_MAJOR_VERSION < 8) {
                openssl_pkey_free($privKey);
            }

            return base64_encode($signature);
        }
        if (\PHP_MAJOR_VERSION < 8) {
            openssl_pkey_free($privKey);
        }

        return '';
    }

    /**
     * Generate a DKIM canonicalization header.
     * Uses the 'relaxed' algorithm from RFC6376 section 3.4.2.
     * Canonicalized headers should *always* use CRLF, regardless of mailer setting.
     *
     * @see https://tools.ietf.org/html/rfc6376#section-3.4.2
     *
     * @param string $signHeader Header
     *
     * @return string
     */
    public function DKIM_HeaderC($signHeader)
    {
        //Normalize breaks to CRLF (regardless of the mailer)
        $signHeader = static::normalizeBreaks($signHeader, self::CRLF);
        //Unfold header lines
        //Note PCRE \s is too broad a definition of whitespace; RFC5322 defines it as `[ \t]`
        //@see https://tools.ietf.org/html/rfc5322#section-2.2
        //That means this may break if you do something daft like put vertical tabs in your headers.
        $signHeader = preg_replace('/\r\n[ \t]+/', ' ', $signHeader);
        //Break headers out into an array
        $lines = explode(self::CRLF, $signHeader);
        foreach ($lines as $key => $line) {
            //If the header is missing a :, skip it as it's invalid
            //This is likely to happen because the explode() above will also split
            //on the trailing LE, leaving an empty line
            if (strpos($line, ':') === false) {
                continue;
            }
            list($heading, $value) = explode(':', $line, 2);
            //Lower-case header name
            $heading = strtolower($heading);
            //Collapse white space within the value, also convert WSP to space
            $value = preg_replace('/[ \t]+/', ' ', $value);
            //RFC6376 is slightly unclear here - it says to delete space at the *end* of each value
            //But then says to delete space before and after the colon.
            //Net result is the same as trimming both ends of the value.
            //By elimination, the same applies to the field name
            $lines[$key] = trim($heading, " \t") . ':' . trim($value, " \t");
        }

        return implode(self::CRLF, $lines);
    }

    /**
     * Generate a DKIM canonicalization body.
     * Uses the 'simple' algorithm from RFC6376 section 3.4.3.
     * Canonicalized bodies should *always* use CRLF, regardless of mailer setting.
     *
     * @see https://tools.ietf.org/html/rfc6376#section-3.4.3
     *
     * @param string $body Message Body
     *
     * @return string
     */
    public function DKIM_BodyC($body)
    {
        if (empty($body)) {
            return self::CRLF;
        }
        //Normalize line endings to CRLF
        $body = static::normalizeBreaks($body, self::CRLF);

        //Reduce multiple trailing line breaks to a single one
        return static::stripTrailingBreaks($body) . self::CRLF;
    }

    /**
     * Create the DKIM header and body in a new message header.
     *
     * @param string $headers_line Header lines
     * @param string $subject      Subject
     * @param string $body         Body
     *
     * @throws Exception
     *
     * @return string
     */
    public function DKIM_Add($headers_line, $subject, $body)
    {
        $DKIMsignatureType = 'rsa-sha256'; //Signature & hash algorithms
        $DKIMcanonicalization = 'relaxed/simple'; //Canonicalization methods of header & body
        $DKIMquery = 'dns/txt'; //Query method
        $DKIMtime = time();
        //Always sign these headers without being asked
        //Recommended list from https://tools.ietf.org/html/rfc6376#section-5.4.1
        $autoSignHeaders = [
            'from',
            'to',
            'cc',
            'date',
            'subject',
            'reply-to',
            'message-id',
            'content-type',
            'mime-version',
            'x-mailer',
        ];
        if (stripos($headers_line, 'Subject') === false) {
            $headers_line .= 'Subject: ' . $subject . static::$LE;
        }
        $headerLines = explode(static::$LE, $headers_line);
        $currentHeaderLabel = '';
        $currentHeaderValue = '';
        $parsedHeaders = [];
        $headerLineIndex = 0;
        $headerLineCount = count($headerLines);
        foreach ($headerLines as $headerLine) {
            $matches = [];
            if (preg_match('/^([^ \t]*?)(?::[ \t]*)(.*)$/', $headerLine, $matches)) {
                if ($currentHeaderLabel !== '') {
                    //We were previously in another header; This is the start of a new header, so save the previous one
                    $parsedHeaders[] = ['label' => $currentHeaderLabel, 'value' => $currentHeaderValue];
                }
                $currentHeaderLabel = $matches[1];
                $currentHeaderValue = $matches[2];
            } elseif (preg_match('/^[ \t]+(.*)$/', $headerLine, $matches)) {
                //This is a folded continuation of the current header, so unfold it
                $currentHeaderValue .= ' ' . $matches[1];
            }
            ++$headerLineIndex;
            if ($headerLineIndex >= $headerLineCount) {
                //This was the last line, so finish off this header
                $parsedHeaders[] = ['label' => $currentHeaderLabel, 'value' => $currentHeaderValue];
            }
        }
        $copiedHeaders = [];
        $headersToSignKeys = [];
        $headersToSign = [];
        foreach ($parsedHeaders as $header) {
            //Is this header one that must be included in the DKIM signature?
            if (in_array(strtolower($header['label']), $autoSignHeaders, true)) {
                $headersToSignKeys[] = $header['label'];
                $headersToSign[] = $header['label'] . ': ' . $header['value'];
                if ($this->DKIM_copyHeaderFields) {
                    $copiedHeaders[] = $header['label'] . ':' . //Note no space after this, as per RFC
                        str_replace('|', '=7C', $this->DKIM_QP($header['value']));
                }
                continue;
            }
            //Is this an extra custom header we've been asked to sign?
            if (in_array($header['label'], $this->DKIM_extraHeaders, true)) {
                //Find its value in custom headers
                foreach ($this->CustomHeader as $customHeader) {
                    if ($customHeader[0] === $header['label']) {
                        $headersToSignKeys[] = $header['label'];
                        $headersToSign[] = $header['label'] . ': ' . $header['value'];
                        if ($this->DKIM_copyHeaderFields) {
                            $copiedHeaders[] = $header['label'] . ':' . //Note no space after this, as per RFC
                                str_replace('|', '=7C', $this->DKIM_QP($header['value']));
                        }
                        //Skip straight to the next header
                        continue 2;
                    }
                }
            }
        }
        $copiedHeaderFields = '';
        if ($this->DKIM_copyHeaderFields && count($copiedHeaders) > 0) {
            //Assemble a DKIM 'z' tag
            $copiedHeaderFields = ' z=';
            $first = true;
            foreach ($copiedHeaders as $copiedHeader) {
                if (!$first) {
                    $copiedHeaderFields .= static::$LE . ' |';
                }
                //Fold long values
                if (strlen($copiedHeader) > self::STD_LINE_LENGTH - 3) {
                    $copiedHeaderFields .= substr(
                        chunk_split($copiedHeader, self::STD_LINE_LENGTH - 3, static::$LE . self::FWS),
                        0,
                        -strlen(static::$LE . self::FWS)
                    );
                } else {
                    $copiedHeaderFields .= $copiedHeader;
                }
                $first = false;
            }
            $copiedHeaderFields .= ';' . static::$LE;
        }
        $headerKeys = ' h=' . implode(':', $headersToSignKeys) . ';' . static::$LE;
        $headerValues = implode(static::$LE, $headersToSign);
        $body = $this->DKIM_BodyC($body);
        //Base64 of packed binary SHA-256 hash of body
        $DKIMb64 = base64_encode(pack('H*', hash('sha256', $body)));
        $ident = '';
        if ('' !== $this->DKIM_identity) {
            $ident = ' i=' . $this->DKIM_identity . ';' . static::$LE;
        }
        //The DKIM-Signature header is included in the signature *except for* the value of the `b` tag
        //which is appended after calculating the signature
        //https://tools.ietf.org/html/rfc6376#section-3.5
        $dkimSignatureHeader = 'DKIM-Signature: v=1;' .
            ' d=' . $this->DKIM_domain . ';' .
            ' s=' . $this->DKIM_selector . ';' . static::$LE .
            ' a=' . $DKIMsignatureType . ';' .
            ' q=' . $DKIMquery . ';' .
            ' t=' . $DKIMtime . ';' .
            ' c=' . $DKIMcanonicalization . ';' . static::$LE .
            $headerKeys .
            $ident .
            $copiedHeaderFields .
            ' bh=' . $DKIMb64 . ';' . static::$LE .
            ' b=';
        //Canonicalize the set of headers
        $canonicalizedHeaders = $this->DKIM_HeaderC(
            $headerValues . static::$LE . $dkimSignatureHeader
        );
        $signature = $this->DKIM_Sign($canonicalizedHeaders);
        $signature = trim(chunk_split($signature, self::STD_LINE_LENGTH - 3, static::$LE . self::FWS));

        return static::normalizeBreaks($dkimSignatureHeader . $signature);
    }

    /**
     * Detect if a string contains a line longer than the maximum line length
     * allowed by RFC 2822 section 2.1.1.
     *
     * @param string $str
     *
     * @return bool
     */
    public static function hasLineLongerThanMax($str)
    {
        return (bool) preg_match('/^(.{' . (self::MAX_LINE_LENGTH + strlen(static::$LE)) . ',})/m', $str);
    }

    /**
     * If a string contains any "special" characters, double-quote the name,
     * and escape any double quotes with a backslash.
     *
     * @param string $str
     *
     * @return string
     *
     * @see RFC822 3.4.1
     */
    public static function quotedString($str)
    {
        if (preg_match('/[ ()<>@,;:"\/\[\]?=]/', $str)) {
            //If the string contains any of these chars, it must be double-quoted
            //and any double quotes must be escaped with a backslash
            return '"' . str_replace('"', '\\"', $str) . '"';
        }

        //Return the string untouched, it doesn't need quoting
        return $str;
    }

    /**
     * Allows for public read access to 'to' property.
     * Before the send() call, queued addresses (i.e. with IDN) are not yet included.
     *
     * @return array
     */
    public function getToAddresses()
    {
        return $this->to;
    }

    /**
     * Allows for public read access to 'cc' property.
     * Before the send() call, queued addresses (i.e. with IDN) are not yet included.
     *
     * @return array
     */
    public function getCcAddresses()
    {
        return $this->cc;
    }

    /**
     * Allows for public read access to 'bcc' property.
     * Before the send() call, queued addresses (i.e. with IDN) are not yet included.
     *
     * @return array
     */
    public function getBccAddresses()
    {
        return $this->bcc;
    }

    /**
     * Allows for public read access to 'ReplyTo' property.
     * Before the send() call, queued addresses (i.e. with IDN) are not yet included.
     *
     * @return array
     */
    public function getReplyToAddresses()
    {
        return $this->ReplyTo;
    }

    /**
     * Allows for public read access to 'all_recipients' property.
     * Before the send() call, queued addresses (i.e. with IDN) are not yet included.
     *
     * @return array
     */
    public function getAllRecipientAddresses()
    {
        return $this->all_recipients;
    }

    /**
     * Perform a callback.
     *
     * @param bool   $isSent
     * @param array  $to
     * @param array  $cc
     * @param array  $bcc
     * @param string $subject
     * @param string $body
     * @param string $from
     * @param array  $extra
     */
    protected function doCallback($isSent, $to, $cc, $bcc, $subject, $body, $from, $extra)
    {
        if (!empty($this->action_function) && is_callable($this->action_function)) {
            call_user_func($this->action_function, $isSent, $to, $cc, $bcc, $subject, $body, $from, $extra);
        }
    }

    /**
     * Get the OAuthTokenProvider instance.
     *
     * @return OAuthTokenProvider
     */
    public function getOAuth()
    {
        return $this->oauth;
    }

    /**
     * Set an OAuthTokenProvider instance.
     */
    public function setOAuth(OAuthTokenProvider $oauth)
    {
        $this->oauth = $oauth;
    }
}
